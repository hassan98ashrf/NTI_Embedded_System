
calc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00000c4c  00000ce0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a2  0080007e  0080007e  00000cfe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cfe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001925  00000000  00000000  00000ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a4e  00000000  00000000  000027c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dd2  00000000  00000000  00003217  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000238  00000000  00000000  00003fec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004eb  00000000  00000000  00004224  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e56  00000000  00000000  0000470f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00005565  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e4       	ldi	r30, 0x4C	; 76
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	ae e7       	ldi	r26, 0x7E	; 126
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 32       	cpi	r26, 0x20	; 32
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ab 04 	call	0x956	; 0x956 <main>
  8a:	0c 94 24 06 	jmp	0xc48	; 0xc48 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Calc_init>:
uint8_t colmnum = 1;
uint8_t globalFlag = 0;

void Calc_init(void)
{
	DIO_init();
  92:	0e 94 b9 04 	call	0x972	; 0x972 <DIO_init>
	LCD_INIT();
  96:	0e 94 9f 03 	call	0x73e	; 0x73e <LCD_INIT>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	2f ef       	ldi	r18, 0xFF	; 255
  9c:	89 e6       	ldi	r24, 0x69	; 105
  9e:	98 e1       	ldi	r25, 0x18	; 24
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	80 40       	sbci	r24, 0x00	; 0
  a4:	90 40       	sbci	r25, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <Calc_init+0xe>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <Calc_init+0x18>
  aa:	00 00       	nop
	_delay_ms(1000);
	KEYPAD_INIT();
  ac:	0e 94 82 02 	call	0x504	; 0x504 <KEYPAD_INIT>
  b0:	08 95       	ret

000000b2 <shiftArr>:
}

void  shiftArr(uint8_t index)
{
	for(uint8_t i = index; i<=exp_arr_index; i++)
  b2:	12 c0       	rjmp	.+36     	; 0xd8 <shiftArr+0x26>
	{
		exp_arr[i] = exp_arr[i+2];
  b4:	28 2f       	mov	r18, r24
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	f9 01       	movw	r30, r18
  ba:	32 96       	adiw	r30, 0x02	; 2
  bc:	ee 0f       	add	r30, r30
  be:	ff 1f       	adc	r31, r31
  c0:	e0 58       	subi	r30, 0x80	; 128
  c2:	ff 4f       	sbci	r31, 0xFF	; 255
  c4:	40 81       	ld	r20, Z
  c6:	51 81       	ldd	r21, Z+1	; 0x01
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	f9 01       	movw	r30, r18
  ce:	e0 58       	subi	r30, 0x80	; 128
  d0:	ff 4f       	sbci	r31, 0xFF	; 255
  d2:	51 83       	std	Z+1, r21	; 0x01
  d4:	40 83       	st	Z, r20
	KEYPAD_INIT();
}

void  shiftArr(uint8_t index)
{
	for(uint8_t i = index; i<=exp_arr_index; i++)
  d6:	8f 5f       	subi	r24, 0xFF	; 255
  d8:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <exp_arr_index>
  dc:	98 17       	cp	r25, r24
  de:	50 f7       	brcc	.-44     	; 0xb4 <shiftArr+0x2>
	{
		exp_arr[i] = exp_arr[i+2];
	}
	exp_arr_index-=2;
  e0:	92 50       	subi	r25, 0x02	; 2
  e2:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <exp_arr_index>
  e6:	08 95       	ret

000000e8 <calc_CalculateResult>:
	return;
}
void calc_CalculateResult()
{
	//exp_arr_index--;
	for(uint8_t i=0; i<=exp_arr_index; i++)
  e8:	20 e0       	ldi	r18, 0x00	; 0
  ea:	4a c0       	rjmp	.+148    	; 0x180 <calc_CalculateResult+0x98>
	{
		if(exp_arr[i] == '*') {exp_arr[i-1] *= exp_arr[i+1]; shiftArr(i); i=0;}
  ec:	82 2f       	mov	r24, r18
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	fc 01       	movw	r30, r24
  f2:	ee 0f       	add	r30, r30
  f4:	ff 1f       	adc	r31, r31
  f6:	e0 58       	subi	r30, 0x80	; 128
  f8:	ff 4f       	sbci	r31, 0xFF	; 255
  fa:	40 81       	ld	r20, Z
  fc:	51 81       	ldd	r21, Z+1	; 0x01
  fe:	4a 32       	cpi	r20, 0x2A	; 42
 100:	51 05       	cpc	r21, r1
 102:	01 f5       	brne	.+64     	; 0x144 <calc_CalculateResult+0x5c>
 104:	ac 01       	movw	r20, r24
 106:	41 50       	subi	r20, 0x01	; 1
 108:	51 09       	sbc	r21, r1
 10a:	fc 01       	movw	r30, r24
 10c:	31 96       	adiw	r30, 0x01	; 1
 10e:	ee 0f       	add	r30, r30
 110:	ff 1f       	adc	r31, r31
 112:	e0 58       	subi	r30, 0x80	; 128
 114:	ff 4f       	sbci	r31, 0xFF	; 255
 116:	60 81       	ld	r22, Z
 118:	71 81       	ldd	r23, Z+1	; 0x01
 11a:	fa 01       	movw	r30, r20
 11c:	ee 0f       	add	r30, r30
 11e:	ff 1f       	adc	r31, r31
 120:	e0 58       	subi	r30, 0x80	; 128
 122:	ff 4f       	sbci	r31, 0xFF	; 255
 124:	40 81       	ld	r20, Z
 126:	51 81       	ldd	r21, Z+1	; 0x01
 128:	46 9f       	mul	r20, r22
 12a:	c0 01       	movw	r24, r0
 12c:	47 9f       	mul	r20, r23
 12e:	90 0d       	add	r25, r0
 130:	56 9f       	mul	r21, r22
 132:	90 0d       	add	r25, r0
 134:	11 24       	eor	r1, r1
 136:	91 83       	std	Z+1, r25	; 0x01
 138:	80 83       	st	Z, r24
 13a:	82 2f       	mov	r24, r18
 13c:	0e 94 59 00 	call	0xb2	; 0xb2 <shiftArr>
 140:	20 e0       	ldi	r18, 0x00	; 0
 142:	1d c0       	rjmp	.+58     	; 0x17e <calc_CalculateResult+0x96>
		else if(exp_arr[i] == '/') {exp_arr[i-1] /= exp_arr[i+1]; shiftArr(i); i=0;}
 144:	4f 32       	cpi	r20, 0x2F	; 47
 146:	51 05       	cpc	r21, r1
 148:	d1 f4       	brne	.+52     	; 0x17e <calc_CalculateResult+0x96>
 14a:	ac 01       	movw	r20, r24
 14c:	41 50       	subi	r20, 0x01	; 1
 14e:	51 09       	sbc	r21, r1
 150:	fc 01       	movw	r30, r24
 152:	31 96       	adiw	r30, 0x01	; 1
 154:	ee 0f       	add	r30, r30
 156:	ff 1f       	adc	r31, r31
 158:	e0 58       	subi	r30, 0x80	; 128
 15a:	ff 4f       	sbci	r31, 0xFF	; 255
 15c:	60 81       	ld	r22, Z
 15e:	71 81       	ldd	r23, Z+1	; 0x01
 160:	fa 01       	movw	r30, r20
 162:	ee 0f       	add	r30, r30
 164:	ff 1f       	adc	r31, r31
 166:	e0 58       	subi	r30, 0x80	; 128
 168:	ff 4f       	sbci	r31, 0xFF	; 255
 16a:	80 81       	ld	r24, Z
 16c:	91 81       	ldd	r25, Z+1	; 0x01
 16e:	0e 94 bb 05 	call	0xb76	; 0xb76 <__divmodhi4>
 172:	71 83       	std	Z+1, r23	; 0x01
 174:	60 83       	st	Z, r22
 176:	82 2f       	mov	r24, r18
 178:	0e 94 59 00 	call	0xb2	; 0xb2 <shiftArr>
 17c:	20 e0       	ldi	r18, 0x00	; 0
	return;
}
void calc_CalculateResult()
{
	//exp_arr_index--;
	for(uint8_t i=0; i<=exp_arr_index; i++)
 17e:	2f 5f       	subi	r18, 0xFF	; 255
 180:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <exp_arr_index>
 184:	82 17       	cp	r24, r18
 186:	08 f0       	brcs	.+2      	; 0x18a <calc_CalculateResult+0xa2>
 188:	b1 cf       	rjmp	.-158    	; 0xec <calc_CalculateResult+0x4>
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	43 c0       	rjmp	.+134    	; 0x214 <calc_CalculateResult+0x12c>
		if(exp_arr[i] == '*') {exp_arr[i-1] *= exp_arr[i+1]; shiftArr(i); i=0;}
		else if(exp_arr[i] == '/') {exp_arr[i-1] /= exp_arr[i+1]; shiftArr(i); i=0;}
	}
	for(uint8_t i=0; i<=exp_arr_index; i++)
	{
		if(exp_arr[i] == '+') {exp_arr[i-1] += exp_arr[i+1]; shiftArr(i); i=0;}
 18e:	28 2f       	mov	r18, r24
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	f9 01       	movw	r30, r18
 194:	ee 0f       	add	r30, r30
 196:	ff 1f       	adc	r31, r31
 198:	e0 58       	subi	r30, 0x80	; 128
 19a:	ff 4f       	sbci	r31, 0xFF	; 255
 19c:	40 81       	ld	r20, Z
 19e:	51 81       	ldd	r21, Z+1	; 0x01
 1a0:	4b 32       	cpi	r20, 0x2B	; 43
 1a2:	51 05       	cpc	r21, r1
 1a4:	d1 f4       	brne	.+52     	; 0x1da <calc_CalculateResult+0xf2>
 1a6:	a9 01       	movw	r20, r18
 1a8:	41 50       	subi	r20, 0x01	; 1
 1aa:	51 09       	sbc	r21, r1
 1ac:	f9 01       	movw	r30, r18
 1ae:	31 96       	adiw	r30, 0x01	; 1
 1b0:	ee 0f       	add	r30, r30
 1b2:	ff 1f       	adc	r31, r31
 1b4:	e0 58       	subi	r30, 0x80	; 128
 1b6:	ff 4f       	sbci	r31, 0xFF	; 255
 1b8:	20 81       	ld	r18, Z
 1ba:	31 81       	ldd	r19, Z+1	; 0x01
 1bc:	fa 01       	movw	r30, r20
 1be:	ee 0f       	add	r30, r30
 1c0:	ff 1f       	adc	r31, r31
 1c2:	e0 58       	subi	r30, 0x80	; 128
 1c4:	ff 4f       	sbci	r31, 0xFF	; 255
 1c6:	40 81       	ld	r20, Z
 1c8:	51 81       	ldd	r21, Z+1	; 0x01
 1ca:	24 0f       	add	r18, r20
 1cc:	35 1f       	adc	r19, r21
 1ce:	31 83       	std	Z+1, r19	; 0x01
 1d0:	20 83       	st	Z, r18
 1d2:	0e 94 59 00 	call	0xb2	; 0xb2 <shiftArr>
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	1c c0       	rjmp	.+56     	; 0x212 <calc_CalculateResult+0x12a>
		else if(exp_arr[i] == '-') {exp_arr[i-1] -= exp_arr[i+1]; shiftArr(i); i=0;}
 1da:	4d 32       	cpi	r20, 0x2D	; 45
 1dc:	51 05       	cpc	r21, r1
 1de:	c9 f4       	brne	.+50     	; 0x212 <calc_CalculateResult+0x12a>
 1e0:	a9 01       	movw	r20, r18
 1e2:	41 50       	subi	r20, 0x01	; 1
 1e4:	51 09       	sbc	r21, r1
 1e6:	f9 01       	movw	r30, r18
 1e8:	31 96       	adiw	r30, 0x01	; 1
 1ea:	ee 0f       	add	r30, r30
 1ec:	ff 1f       	adc	r31, r31
 1ee:	e0 58       	subi	r30, 0x80	; 128
 1f0:	ff 4f       	sbci	r31, 0xFF	; 255
 1f2:	60 81       	ld	r22, Z
 1f4:	71 81       	ldd	r23, Z+1	; 0x01
 1f6:	fa 01       	movw	r30, r20
 1f8:	ee 0f       	add	r30, r30
 1fa:	ff 1f       	adc	r31, r31
 1fc:	e0 58       	subi	r30, 0x80	; 128
 1fe:	ff 4f       	sbci	r31, 0xFF	; 255
 200:	20 81       	ld	r18, Z
 202:	31 81       	ldd	r19, Z+1	; 0x01
 204:	26 1b       	sub	r18, r22
 206:	37 0b       	sbc	r19, r23
 208:	31 83       	std	Z+1, r19	; 0x01
 20a:	20 83       	st	Z, r18
 20c:	0e 94 59 00 	call	0xb2	; 0xb2 <shiftArr>
 210:	80 e0       	ldi	r24, 0x00	; 0
	for(uint8_t i=0; i<=exp_arr_index; i++)
	{
		if(exp_arr[i] == '*') {exp_arr[i-1] *= exp_arr[i+1]; shiftArr(i); i=0;}
		else if(exp_arr[i] == '/') {exp_arr[i-1] /= exp_arr[i+1]; shiftArr(i); i=0;}
	}
	for(uint8_t i=0; i<=exp_arr_index; i++)
 212:	8f 5f       	subi	r24, 0xFF	; 255
 214:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <exp_arr_index>
 218:	98 17       	cp	r25, r24
 21a:	08 f0       	brcs	.+2      	; 0x21e <calc_CalculateResult+0x136>
 21c:	b8 cf       	rjmp	.-144    	; 0x18e <calc_CalculateResult+0xa6>
	{
		if(exp_arr[i] == '+') {exp_arr[i-1] += exp_arr[i+1]; shiftArr(i); i=0;}
		else if(exp_arr[i] == '-') {exp_arr[i-1] -= exp_arr[i+1]; shiftArr(i); i=0;}
	}
	return;
}
 21e:	08 95       	ret

00000220 <calc_DisplayResult>:
void calc_DisplayResult()
{
 220:	cf 92       	push	r12
 222:	df 92       	push	r13
 224:	ef 92       	push	r14
 226:	ff 92       	push	r15
 228:	0f 93       	push	r16
 22a:	1f 93       	push	r17
 22c:	cf 93       	push	r28
	
	LCD_MOVE_CURSOR(rawnum , colmnum);
 22e:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 232:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <rawnum>
 236:	0e 94 7f 04 	call	0x8fe	; 0x8fe <LCD_MOVE_CURSOR>
	LCD_write_char(readValu);
 23a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <readValu>
 23e:	0e 94 df 03 	call	0x7be	; 0x7be <LCD_write_char>
 242:	2f ef       	ldi	r18, 0xFF	; 255
 244:	8e e9       	ldi	r24, 0x9E	; 158
 246:	94 e2       	ldi	r25, 0x24	; 36
 248:	21 50       	subi	r18, 0x01	; 1
 24a:	80 40       	sbci	r24, 0x00	; 0
 24c:	90 40       	sbci	r25, 0x00	; 0
 24e:	e1 f7       	brne	.-8      	; 0x248 <calc_DisplayResult+0x28>
 250:	00 c0       	rjmp	.+0      	; 0x252 <calc_DisplayResult+0x32>
 252:	00 00       	nop
	_delay_ms(1500);
	LCD_instruction(CLEAR_DISPLAY);
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	0e 94 0c 03 	call	0x618	; 0x618 <LCD_instruction>
	rawnum=1; colmnum=1;
 25a:	c1 e0       	ldi	r28, 0x01	; 1
 25c:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <rawnum>
 260:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <__DATA_REGION_ORIGIN__>
	LCD_MOVE_CURSOR(rawnum , colmnum);
 264:	61 e0       	ldi	r22, 0x01	; 1
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	0e 94 7f 04 	call	0x8fe	; 0x8fe <LCD_MOVE_CURSOR>
	LCD_SEND_STRING("Result = ");
 26c:	83 e7       	ldi	r24, 0x73	; 115
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 72 04 	call	0x8e4	; 0x8e4 <LCD_SEND_STRING>
	LCD_MOVE_CURSOR(1,10);
 274:	6a e0       	ldi	r22, 0x0A	; 10
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	0e 94 7f 04 	call	0x8fe	; 0x8fe <LCD_MOVE_CURSOR>
	//7th digit
	LCD_write_char((exp_arr[exp_arr_index] / 1000000) +48);
 27c:	e0 91 7f 00 	lds	r30, 0x007F	; 0x80007f <exp_arr_index>
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	ee 0f       	add	r30, r30
 284:	ff 1f       	adc	r31, r31
 286:	e0 58       	subi	r30, 0x80	; 128
 288:	ff 4f       	sbci	r31, 0xFF	; 255
 28a:	60 81       	ld	r22, Z
 28c:	71 81       	ldd	r23, Z+1	; 0x01
 28e:	07 2e       	mov	r0, r23
 290:	00 0c       	add	r0, r0
 292:	88 0b       	sbc	r24, r24
 294:	99 0b       	sbc	r25, r25
 296:	0f 2e       	mov	r0, r31
 298:	f0 e4       	ldi	r31, 0x40	; 64
 29a:	cf 2e       	mov	r12, r31
 29c:	f2 e4       	ldi	r31, 0x42	; 66
 29e:	df 2e       	mov	r13, r31
 2a0:	ff e0       	ldi	r31, 0x0F	; 15
 2a2:	ef 2e       	mov	r14, r31
 2a4:	f1 2c       	mov	r15, r1
 2a6:	f0 2d       	mov	r31, r0
 2a8:	a7 01       	movw	r20, r14
 2aa:	96 01       	movw	r18, r12
 2ac:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__divmodsi4>
 2b0:	80 e3       	ldi	r24, 0x30	; 48
 2b2:	82 0f       	add	r24, r18
 2b4:	0e 94 df 03 	call	0x7be	; 0x7be <LCD_write_char>
	//6th digit
	LCD_write_char(((exp_arr[exp_arr_index] %1000000)/100000) +48);
 2b8:	e0 91 7f 00 	lds	r30, 0x007F	; 0x80007f <exp_arr_index>
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	ee 0f       	add	r30, r30
 2c0:	ff 1f       	adc	r31, r31
 2c2:	e0 58       	subi	r30, 0x80	; 128
 2c4:	ff 4f       	sbci	r31, 0xFF	; 255
 2c6:	60 81       	ld	r22, Z
 2c8:	71 81       	ldd	r23, Z+1	; 0x01
 2ca:	07 2e       	mov	r0, r23
 2cc:	00 0c       	add	r0, r0
 2ce:	88 0b       	sbc	r24, r24
 2d0:	99 0b       	sbc	r25, r25
 2d2:	a7 01       	movw	r20, r14
 2d4:	96 01       	movw	r18, r12
 2d6:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__divmodsi4>
 2da:	0f 2e       	mov	r0, r31
 2dc:	f0 ea       	ldi	r31, 0xA0	; 160
 2de:	cf 2e       	mov	r12, r31
 2e0:	f6 e8       	ldi	r31, 0x86	; 134
 2e2:	df 2e       	mov	r13, r31
 2e4:	ee 24       	eor	r14, r14
 2e6:	e3 94       	inc	r14
 2e8:	f1 2c       	mov	r15, r1
 2ea:	f0 2d       	mov	r31, r0
 2ec:	a7 01       	movw	r20, r14
 2ee:	96 01       	movw	r18, r12
 2f0:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__divmodsi4>
 2f4:	80 e3       	ldi	r24, 0x30	; 48
 2f6:	82 0f       	add	r24, r18
 2f8:	0e 94 df 03 	call	0x7be	; 0x7be <LCD_write_char>
	//5th digit
	LCD_write_char(((exp_arr[exp_arr_index] %100000)/10000) +48);
 2fc:	e0 91 7f 00 	lds	r30, 0x007F	; 0x80007f <exp_arr_index>
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	ee 0f       	add	r30, r30
 304:	ff 1f       	adc	r31, r31
 306:	e0 58       	subi	r30, 0x80	; 128
 308:	ff 4f       	sbci	r31, 0xFF	; 255
 30a:	60 81       	ld	r22, Z
 30c:	71 81       	ldd	r23, Z+1	; 0x01
 30e:	07 2e       	mov	r0, r23
 310:	00 0c       	add	r0, r0
 312:	88 0b       	sbc	r24, r24
 314:	99 0b       	sbc	r25, r25
 316:	a7 01       	movw	r20, r14
 318:	96 01       	movw	r18, r12
 31a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__divmodsi4>
 31e:	20 e1       	ldi	r18, 0x10	; 16
 320:	37 e2       	ldi	r19, 0x27	; 39
 322:	40 e0       	ldi	r20, 0x00	; 0
 324:	50 e0       	ldi	r21, 0x00	; 0
 326:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__divmodsi4>
 32a:	80 e3       	ldi	r24, 0x30	; 48
 32c:	82 0f       	add	r24, r18
 32e:	0e 94 df 03 	call	0x7be	; 0x7be <LCD_write_char>
	//4th digit
	LCD_write_char(((exp_arr[exp_arr_index]%10000)/1000) +48);
 332:	e0 91 7f 00 	lds	r30, 0x007F	; 0x80007f <exp_arr_index>
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	ee 0f       	add	r30, r30
 33a:	ff 1f       	adc	r31, r31
 33c:	e0 58       	subi	r30, 0x80	; 128
 33e:	ff 4f       	sbci	r31, 0xFF	; 255
 340:	80 81       	ld	r24, Z
 342:	91 81       	ldd	r25, Z+1	; 0x01
 344:	60 e1       	ldi	r22, 0x10	; 16
 346:	77 e2       	ldi	r23, 0x27	; 39
 348:	0e 94 bb 05 	call	0xb76	; 0xb76 <__divmodhi4>
 34c:	08 ee       	ldi	r16, 0xE8	; 232
 34e:	13 e0       	ldi	r17, 0x03	; 3
 350:	b8 01       	movw	r22, r16
 352:	0e 94 bb 05 	call	0xb76	; 0xb76 <__divmodhi4>
 356:	80 e3       	ldi	r24, 0x30	; 48
 358:	86 0f       	add	r24, r22
 35a:	0e 94 df 03 	call	0x7be	; 0x7be <LCD_write_char>
	//3rd digit
	LCD_write_char(((exp_arr[exp_arr_index]%1000)/100) +48);
 35e:	e0 91 7f 00 	lds	r30, 0x007F	; 0x80007f <exp_arr_index>
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	ee 0f       	add	r30, r30
 366:	ff 1f       	adc	r31, r31
 368:	e0 58       	subi	r30, 0x80	; 128
 36a:	ff 4f       	sbci	r31, 0xFF	; 255
 36c:	80 81       	ld	r24, Z
 36e:	91 81       	ldd	r25, Z+1	; 0x01
 370:	b8 01       	movw	r22, r16
 372:	0e 94 bb 05 	call	0xb76	; 0xb76 <__divmodhi4>
 376:	04 e6       	ldi	r16, 0x64	; 100
 378:	10 e0       	ldi	r17, 0x00	; 0
 37a:	b8 01       	movw	r22, r16
 37c:	0e 94 bb 05 	call	0xb76	; 0xb76 <__divmodhi4>
 380:	80 e3       	ldi	r24, 0x30	; 48
 382:	86 0f       	add	r24, r22
 384:	0e 94 df 03 	call	0x7be	; 0x7be <LCD_write_char>
	//2nd digit
	LCD_write_char(((exp_arr[exp_arr_index]%100)/10) +48);
 388:	e0 91 7f 00 	lds	r30, 0x007F	; 0x80007f <exp_arr_index>
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	ee 0f       	add	r30, r30
 390:	ff 1f       	adc	r31, r31
 392:	e0 58       	subi	r30, 0x80	; 128
 394:	ff 4f       	sbci	r31, 0xFF	; 255
 396:	80 81       	ld	r24, Z
 398:	91 81       	ldd	r25, Z+1	; 0x01
 39a:	b8 01       	movw	r22, r16
 39c:	0e 94 bb 05 	call	0xb76	; 0xb76 <__divmodhi4>
 3a0:	0a e0       	ldi	r16, 0x0A	; 10
 3a2:	10 e0       	ldi	r17, 0x00	; 0
 3a4:	b8 01       	movw	r22, r16
 3a6:	0e 94 bb 05 	call	0xb76	; 0xb76 <__divmodhi4>
 3aa:	80 e3       	ldi	r24, 0x30	; 48
 3ac:	86 0f       	add	r24, r22
 3ae:	0e 94 df 03 	call	0x7be	; 0x7be <LCD_write_char>
	//1st digit
	LCD_write_char(((exp_arr[exp_arr_index]%10)/1) +48);
 3b2:	e0 91 7f 00 	lds	r30, 0x007F	; 0x80007f <exp_arr_index>
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	ee 0f       	add	r30, r30
 3ba:	ff 1f       	adc	r31, r31
 3bc:	e0 58       	subi	r30, 0x80	; 128
 3be:	ff 4f       	sbci	r31, 0xFF	; 255
 3c0:	80 81       	ld	r24, Z
 3c2:	91 81       	ldd	r25, Z+1	; 0x01
 3c4:	b8 01       	movw	r22, r16
 3c6:	0e 94 bb 05 	call	0xb76	; 0xb76 <__divmodhi4>
 3ca:	80 5d       	subi	r24, 0xD0	; 208
 3cc:	0e 94 df 03 	call	0x7be	; 0x7be <LCD_write_char>
	
	globalFlag = 1;
 3d0:	c0 93 7e 00 	sts	0x007E, r28	; 0x80007e <__data_end>
	return;
}
 3d4:	cf 91       	pop	r28
 3d6:	1f 91       	pop	r17
 3d8:	0f 91       	pop	r16
 3da:	ff 90       	pop	r15
 3dc:	ef 90       	pop	r14
 3de:	df 90       	pop	r13
 3e0:	cf 90       	pop	r12
 3e2:	08 95       	ret

000003e4 <calc_toint>:

void calc_toint(uint8_t digit)
{
	digit -= 48;
 3e4:	80 53       	subi	r24, 0x30	; 48
	exp_arr[exp_arr_index] *= 10;
 3e6:	e0 91 7f 00 	lds	r30, 0x007F	; 0x80007f <exp_arr_index>
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	ee 0f       	add	r30, r30
 3ee:	ff 1f       	adc	r31, r31
 3f0:	e0 58       	subi	r30, 0x80	; 128
 3f2:	ff 4f       	sbci	r31, 0xFF	; 255
 3f4:	20 81       	ld	r18, Z
 3f6:	31 81       	ldd	r19, Z+1	; 0x01
 3f8:	a9 01       	movw	r20, r18
 3fa:	44 0f       	add	r20, r20
 3fc:	55 1f       	adc	r21, r21
 3fe:	22 0f       	add	r18, r18
 400:	33 1f       	adc	r19, r19
 402:	22 0f       	add	r18, r18
 404:	33 1f       	adc	r19, r19
 406:	22 0f       	add	r18, r18
 408:	33 1f       	adc	r19, r19
 40a:	24 0f       	add	r18, r20
 40c:	35 1f       	adc	r19, r21
	exp_arr[exp_arr_index] += digit;
 40e:	28 0f       	add	r18, r24
 410:	31 1d       	adc	r19, r1
 412:	31 83       	std	Z+1, r19	; 0x01
 414:	20 83       	st	Z, r18
 416:	08 95       	ret

00000418 <calc_CheckNum>:
	return;
}

void calc_CheckNum(uint8_t num)
{
	if((num!='*') && (num!='/') && (num!='+') && (num!='-'))
 418:	8a 32       	cpi	r24, 0x2A	; 42
 41a:	49 f0       	breq	.+18     	; 0x42e <calc_CheckNum+0x16>
 41c:	8f 32       	cpi	r24, 0x2F	; 47
 41e:	39 f0       	breq	.+14     	; 0x42e <calc_CheckNum+0x16>
 420:	8b 32       	cpi	r24, 0x2B	; 43
 422:	29 f0       	breq	.+10     	; 0x42e <calc_CheckNum+0x16>
 424:	8d 32       	cpi	r24, 0x2D	; 45
 426:	19 f0       	breq	.+6      	; 0x42e <calc_CheckNum+0x16>
	{
		calc_toint(num);
 428:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <calc_toint>
 42c:	08 95       	ret
	}
	else
	{
		exp_arr_index++;
 42e:	20 91 7f 00 	lds	r18, 0x007F	; 0x80007f <exp_arr_index>
 432:	2f 5f       	subi	r18, 0xFF	; 255
		exp_arr[exp_arr_index] = num;
 434:	e2 2f       	mov	r30, r18
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	ee 0f       	add	r30, r30
 43a:	ff 1f       	adc	r31, r31
 43c:	e0 58       	subi	r30, 0x80	; 128
 43e:	ff 4f       	sbci	r31, 0xFF	; 255
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	91 83       	std	Z+1, r25	; 0x01
 444:	80 83       	st	Z, r24
		exp_arr_index++;
 446:	2f 5f       	subi	r18, 0xFF	; 255
 448:	20 93 7f 00 	sts	0x007F, r18	; 0x80007f <exp_arr_index>
 44c:	08 95       	ret

0000044e <Calculator>:
	return;
}

void Calculator()
{
	readValu = KEYPAD_READ();
 44e:	0e 94 93 02 	call	0x526	; 0x526 <KEYPAD_READ>
 452:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <readValu>
	if(readValu == '=')
 456:	8d 33       	cpi	r24, 0x3D	; 61
 458:	09 f0       	breq	.+2      	; 0x45c <Calculator+0xe>
 45a:	4c c0       	rjmp	.+152    	; 0x4f4 <Calculator+0xa6>
	{
		calc_CalculateResult();
 45c:	0e 94 74 00 	call	0xe8	; 0xe8 <calc_CalculateResult>
		calc_DisplayResult();
 460:	0e 94 10 01 	call	0x220	; 0x220 <calc_DisplayResult>
 464:	47 c0       	rjmp	.+142    	; 0x4f4 <Calculator+0xa6>
	}
	while( (readValu != 0xff)  &&  (readValu != '=') )
	{
		if(globalFlag == 1)
 466:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <__data_end>
 46a:	81 30       	cpi	r24, 0x01	; 1
 46c:	99 f4       	brne	.+38     	; 0x494 <Calculator+0x46>
		{LCD_instruction(CLEAR_DISPLAY);
 46e:	0e 94 0c 03 	call	0x618	; 0x618 <LCD_instruction>
			globalFlag = 0;
 472:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__data_end>
			exp_arr_index=0;
 476:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <exp_arr_index>
			for(uint8_t i=0; i<80; i++) {exp_arr[i]=0;}
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	09 c0       	rjmp	.+18     	; 0x490 <Calculator+0x42>
 47e:	e8 2f       	mov	r30, r24
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	ee 0f       	add	r30, r30
 484:	ff 1f       	adc	r31, r31
 486:	e0 58       	subi	r30, 0x80	; 128
 488:	ff 4f       	sbci	r31, 0xFF	; 255
 48a:	11 82       	std	Z+1, r1	; 0x01
 48c:	10 82       	st	Z, r1
 48e:	8f 5f       	subi	r24, 0xFF	; 255
 490:	80 35       	cpi	r24, 0x50	; 80
 492:	a8 f3       	brcs	.-22     	; 0x47e <Calculator+0x30>
		}
		
		calc_CheckNum(readValu);
 494:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <readValu>
 498:	0e 94 0c 02 	call	0x418	; 0x418 <calc_CheckNum>
		LCD_MOVE_CURSOR(rawnum , colmnum);
 49c:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4a0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <rawnum>
 4a4:	0e 94 7f 04 	call	0x8fe	; 0x8fe <LCD_MOVE_CURSOR>
		LCD_write_char(readValu);
 4a8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <readValu>
 4ac:	0e 94 df 03 	call	0x7be	; 0x7be <LCD_write_char>
		colmnum++;
 4b0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4b4:	8f 5f       	subi	r24, 0xFF	; 255
		if(colmnum == 21){ rawnum++;  }
 4b6:	85 31       	cpi	r24, 0x15	; 21
 4b8:	29 f4       	brne	.+10     	; 0x4c4 <Calculator+0x76>
 4ba:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <rawnum>
 4be:	9f 5f       	subi	r25, 0xFF	; 255
 4c0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <rawnum>
		colmnum%=21;rawnum %= 4;
 4c4:	97 e8       	ldi	r25, 0x87	; 135
 4c6:	89 9f       	mul	r24, r25
 4c8:	21 2d       	mov	r18, r1
 4ca:	11 24       	eor	r1, r1
 4cc:	98 2f       	mov	r25, r24
 4ce:	92 1b       	sub	r25, r18
 4d0:	96 95       	lsr	r25
 4d2:	92 0f       	add	r25, r18
 4d4:	92 95       	swap	r25
 4d6:	9f 70       	andi	r25, 0x0F	; 15
 4d8:	25 e1       	ldi	r18, 0x15	; 21
 4da:	92 9f       	mul	r25, r18
 4dc:	80 19       	sub	r24, r0
 4de:	11 24       	eor	r1, r1
 4e0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 4e4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <rawnum>
 4e8:	83 70       	andi	r24, 0x03	; 3
 4ea:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <rawnum>
		readValu = 0xff;
 4ee:	8f ef       	ldi	r24, 0xFF	; 255
 4f0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <readValu>
	if(readValu == '=')
	{
		calc_CalculateResult();
		calc_DisplayResult();
	}
	while( (readValu != 0xff)  &&  (readValu != '=') )
 4f4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <readValu>
 4f8:	8f 3f       	cpi	r24, 0xFF	; 255
 4fa:	19 f0       	breq	.+6      	; 0x502 <Calculator+0xb4>
 4fc:	8d 33       	cpi	r24, 0x3D	; 61
 4fe:	09 f0       	breq	.+2      	; 0x502 <Calculator+0xb4>
 500:	b2 cf       	rjmp	.-156    	; 0x466 <Calculator+0x18>
 502:	08 95       	ret

00000504 <KEYPAD_INIT>:

uint8_t arr[4][4] = { {'7','8','9','/'},  {'4','5','6','*'}, {'1','2','3','-'}, {'A','0','=','+'}};

void KEYPAD_INIT()
{
	DIO_EN_PULLUP(COLS_PORT, COL1);
 504:	67 e0       	ldi	r22, 0x07	; 7
 506:	83 e0       	ldi	r24, 0x03	; 3
 508:	0e 94 87 05 	call	0xb0e	; 0xb0e <DIO_EN_PULLUP>
	DIO_EN_PULLUP(COLS_PORT, COL2);
 50c:	66 e0       	ldi	r22, 0x06	; 6
 50e:	83 e0       	ldi	r24, 0x03	; 3
 510:	0e 94 87 05 	call	0xb0e	; 0xb0e <DIO_EN_PULLUP>
	DIO_EN_PULLUP(COLS_PORT, COL3);
 514:	65 e0       	ldi	r22, 0x05	; 5
 516:	83 e0       	ldi	r24, 0x03	; 3
 518:	0e 94 87 05 	call	0xb0e	; 0xb0e <DIO_EN_PULLUP>
	DIO_EN_PULLUP(COLS_PORT, COL4);
 51c:	63 e0       	ldi	r22, 0x03	; 3
 51e:	83 e0       	ldi	r24, 0x03	; 3
 520:	0e 94 87 05 	call	0xb0e	; 0xb0e <DIO_EN_PULLUP>
 524:	08 95       	ret

00000526 <KEYPAD_READ>:
}

uint8_t KEYPAD_READ()
{
 526:	0f 93       	push	r16
 528:	1f 93       	push	r17
 52a:	cf 93       	push	r28
 52c:	df 93       	push	r29
	uint8_t returnValue = 0xff; //NotPressed
	uint8_t bitRead=1;
	for(uint8_t row=0; row<4; row++)
 52e:	10 e0       	ldi	r17, 0x00	; 0
}

uint8_t KEYPAD_READ()
{
	uint8_t returnValue = 0xff; //NotPressed
	uint8_t bitRead=1;
 530:	d1 e0       	ldi	r29, 0x01	; 1
	DIO_EN_PULLUP(COLS_PORT, COL4);
}

uint8_t KEYPAD_READ()
{
	uint8_t returnValue = 0xff; //NotPressed
 532:	0f ef       	ldi	r16, 0xFF	; 255
	uint8_t bitRead=1;
	for(uint8_t row=0; row<4; row++)
 534:	68 c0       	rjmp	.+208    	; 0x606 <KEYPAD_READ+0xe0>
	{
		DIO_SetPinVal(ROWS_PORT, ROW1, 1);
 536:	41 e0       	ldi	r20, 0x01	; 1
 538:	65 e0       	ldi	r22, 0x05	; 5
 53a:	82 e0       	ldi	r24, 0x02	; 2
 53c:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_SetPinVal>
		DIO_SetPinVal(ROWS_PORT, ROW2, 1);
 540:	41 e0       	ldi	r20, 0x01	; 1
 542:	64 e0       	ldi	r22, 0x04	; 4
 544:	82 e0       	ldi	r24, 0x02	; 2
 546:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_SetPinVal>
		DIO_SetPinVal(ROWS_PORT, ROW3, 1);
 54a:	41 e0       	ldi	r20, 0x01	; 1
 54c:	63 e0       	ldi	r22, 0x03	; 3
 54e:	82 e0       	ldi	r24, 0x02	; 2
 550:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_SetPinVal>
		DIO_SetPinVal(ROWS_PORT, ROW4, 1);
 554:	41 e0       	ldi	r20, 0x01	; 1
 556:	62 e0       	ldi	r22, 0x02	; 2
 558:	82 e0       	ldi	r24, 0x02	; 2
 55a:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_SetPinVal>
		switch (row)
 55e:	11 30       	cpi	r17, 0x01	; 1
 560:	61 f0       	breq	.+24     	; 0x57a <KEYPAD_READ+0x54>
 562:	28 f0       	brcs	.+10     	; 0x56e <KEYPAD_READ+0x48>
 564:	12 30       	cpi	r17, 0x02	; 2
 566:	81 f0       	breq	.+32     	; 0x588 <KEYPAD_READ+0x62>
 568:	13 30       	cpi	r17, 0x03	; 3
 56a:	a1 f0       	breq	.+40     	; 0x594 <KEYPAD_READ+0x6e>
 56c:	0b c0       	rjmp	.+22     	; 0x584 <KEYPAD_READ+0x5e>
		{
			case 0:
				DIO_SetPinVal(ROWS_PORT, ROW1, 0);
 56e:	40 e0       	ldi	r20, 0x00	; 0
 570:	65 e0       	ldi	r22, 0x05	; 5
 572:	82 e0       	ldi	r24, 0x02	; 2
 574:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_SetPinVal>
				break;
 578:	05 c0       	rjmp	.+10     	; 0x584 <KEYPAD_READ+0x5e>
			case 1:
				DIO_SetPinVal(ROWS_PORT, ROW2, 0);
 57a:	40 e0       	ldi	r20, 0x00	; 0
 57c:	64 e0       	ldi	r22, 0x04	; 4
 57e:	82 e0       	ldi	r24, 0x02	; 2
 580:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_SetPinVal>
	DIO_EN_PULLUP(COLS_PORT, COL3);
	DIO_EN_PULLUP(COLS_PORT, COL4);
}

uint8_t KEYPAD_READ()
{
 584:	c0 e0       	ldi	r28, 0x00	; 0
 586:	3a c0       	rjmp	.+116    	; 0x5fc <KEYPAD_READ+0xd6>
				break;
			case 1:
				DIO_SetPinVal(ROWS_PORT, ROW2, 0);
				break;
			case 2:
				DIO_SetPinVal(ROWS_PORT, ROW3, 0);
 588:	40 e0       	ldi	r20, 0x00	; 0
 58a:	63 e0       	ldi	r22, 0x03	; 3
 58c:	82 e0       	ldi	r24, 0x02	; 2
 58e:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_SetPinVal>
				break;
 592:	f8 cf       	rjmp	.-16     	; 0x584 <KEYPAD_READ+0x5e>
			case 3:
				DIO_SetPinVal(ROWS_PORT, ROW4, 0);
 594:	40 e0       	ldi	r20, 0x00	; 0
 596:	62 e0       	ldi	r22, 0x02	; 2
 598:	82 e0       	ldi	r24, 0x02	; 2
 59a:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_SetPinVal>
				break;
 59e:	f2 cf       	rjmp	.-28     	; 0x584 <KEYPAD_READ+0x5e>
		}
		
		for(uint8_t col=0; col<4; col++)
		{
			switch (col)
 5a0:	c1 30       	cpi	r28, 0x01	; 1
 5a2:	61 f0       	breq	.+24     	; 0x5bc <KEYPAD_READ+0x96>
 5a4:	28 f0       	brcs	.+10     	; 0x5b0 <KEYPAD_READ+0x8a>
 5a6:	c2 30       	cpi	r28, 0x02	; 2
 5a8:	79 f0       	breq	.+30     	; 0x5c8 <KEYPAD_READ+0xa2>
 5aa:	c3 30       	cpi	r28, 0x03	; 3
 5ac:	99 f0       	breq	.+38     	; 0x5d4 <KEYPAD_READ+0xae>
 5ae:	17 c0       	rjmp	.+46     	; 0x5de <KEYPAD_READ+0xb8>
			{
				case 0:
					bitRead = DIO_ReadPinVal(COLS_PORT, COL1);
 5b0:	67 e0       	ldi	r22, 0x07	; 7
 5b2:	83 e0       	ldi	r24, 0x03	; 3
 5b4:	0e 94 2d 05 	call	0xa5a	; 0xa5a <DIO_ReadPinVal>
 5b8:	d8 2f       	mov	r29, r24
					break;
 5ba:	11 c0       	rjmp	.+34     	; 0x5de <KEYPAD_READ+0xb8>
				case 1:
					bitRead = DIO_ReadPinVal(COLS_PORT, COL2);
 5bc:	66 e0       	ldi	r22, 0x06	; 6
 5be:	83 e0       	ldi	r24, 0x03	; 3
 5c0:	0e 94 2d 05 	call	0xa5a	; 0xa5a <DIO_ReadPinVal>
 5c4:	d8 2f       	mov	r29, r24
					break;
 5c6:	0b c0       	rjmp	.+22     	; 0x5de <KEYPAD_READ+0xb8>
				case 2:
					bitRead = DIO_ReadPinVal(COLS_PORT, COL3);
 5c8:	65 e0       	ldi	r22, 0x05	; 5
 5ca:	83 e0       	ldi	r24, 0x03	; 3
 5cc:	0e 94 2d 05 	call	0xa5a	; 0xa5a <DIO_ReadPinVal>
 5d0:	d8 2f       	mov	r29, r24
					break;
 5d2:	05 c0       	rjmp	.+10     	; 0x5de <KEYPAD_READ+0xb8>
				case 3:
					bitRead = DIO_ReadPinVal(COLS_PORT, COL4);
 5d4:	63 e0       	ldi	r22, 0x03	; 3
 5d6:	83 e0       	ldi	r24, 0x03	; 3
 5d8:	0e 94 2d 05 	call	0xa5a	; 0xa5a <DIO_ReadPinVal>
 5dc:	d8 2f       	mov	r29, r24
					break;
			}
			if(bitRead == 0) {returnValue = arr[row][col]; break;}
 5de:	d1 11       	cpse	r29, r1
 5e0:	0c c0       	rjmp	.+24     	; 0x5fa <KEYPAD_READ+0xd4>
 5e2:	e1 2f       	mov	r30, r17
 5e4:	f0 e0       	ldi	r31, 0x00	; 0
 5e6:	ee 0f       	add	r30, r30
 5e8:	ff 1f       	adc	r31, r31
 5ea:	ee 0f       	add	r30, r30
 5ec:	ff 1f       	adc	r31, r31
 5ee:	ed 59       	subi	r30, 0x9D	; 157
 5f0:	ff 4f       	sbci	r31, 0xFF	; 255
 5f2:	ec 0f       	add	r30, r28
 5f4:	f1 1d       	adc	r31, r1
 5f6:	00 81       	ld	r16, Z
 5f8:	03 c0       	rjmp	.+6      	; 0x600 <KEYPAD_READ+0xda>
			case 3:
				DIO_SetPinVal(ROWS_PORT, ROW4, 0);
				break;
		}
		
		for(uint8_t col=0; col<4; col++)
 5fa:	cf 5f       	subi	r28, 0xFF	; 255
 5fc:	c4 30       	cpi	r28, 0x04	; 4
 5fe:	80 f2       	brcs	.-96     	; 0x5a0 <KEYPAD_READ+0x7a>
					bitRead = DIO_ReadPinVal(COLS_PORT, COL4);
					break;
			}
			if(bitRead == 0) {returnValue = arr[row][col]; break;}
		}
		if(bitRead == 0) {break;}
 600:	dd 23       	and	r29, r29
 602:	21 f0       	breq	.+8      	; 0x60c <KEYPAD_READ+0xe6>

uint8_t KEYPAD_READ()
{
	uint8_t returnValue = 0xff; //NotPressed
	uint8_t bitRead=1;
	for(uint8_t row=0; row<4; row++)
 604:	1f 5f       	subi	r17, 0xFF	; 255
 606:	14 30       	cpi	r17, 0x04	; 4
 608:	08 f4       	brcc	.+2      	; 0x60c <KEYPAD_READ+0xe6>
 60a:	95 cf       	rjmp	.-214    	; 0x536 <KEYPAD_READ+0x10>
		if(bitRead == 0) {break;}
	}
	
	
	return returnValue;
 60c:	80 2f       	mov	r24, r16
 60e:	df 91       	pop	r29
 610:	cf 91       	pop	r28
 612:	1f 91       	pop	r17
 614:	0f 91       	pop	r16
 616:	08 95       	ret

00000618 <LCD_instruction>:
 618:	cf 93       	push	r28
 61a:	c8 2f       	mov	r28, r24
 61c:	40 e0       	ldi	r20, 0x00	; 0
 61e:	63 e0       	ldi	r22, 0x03	; 3
 620:	80 e0       	ldi	r24, 0x00	; 0
 622:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_SetPinVal>
 626:	4c 2f       	mov	r20, r28
 628:	40 71       	andi	r20, 0x10	; 16
 62a:	50 e0       	ldi	r21, 0x00	; 0
 62c:	55 95       	asr	r21
 62e:	47 95       	ror	r20
 630:	55 95       	asr	r21
 632:	47 95       	ror	r20
 634:	55 95       	asr	r21
 636:	47 95       	ror	r20
 638:	55 95       	asr	r21
 63a:	47 95       	ror	r20
 63c:	60 e0       	ldi	r22, 0x00	; 0
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_SetPinVal>
 644:	4c 2f       	mov	r20, r28
 646:	40 72       	andi	r20, 0x20	; 32
 648:	50 e0       	ldi	r21, 0x00	; 0
 64a:	55 95       	asr	r21
 64c:	47 95       	ror	r20
 64e:	55 95       	asr	r21
 650:	47 95       	ror	r20
 652:	55 95       	asr	r21
 654:	47 95       	ror	r20
 656:	55 95       	asr	r21
 658:	47 95       	ror	r20
 65a:	55 95       	asr	r21
 65c:	47 95       	ror	r20
 65e:	61 e0       	ldi	r22, 0x01	; 1
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_SetPinVal>
 666:	4c 2f       	mov	r20, r28
 668:	40 74       	andi	r20, 0x40	; 64
 66a:	50 e0       	ldi	r21, 0x00	; 0
 66c:	04 2e       	mov	r0, r20
 66e:	45 2f       	mov	r20, r21
 670:	00 0c       	add	r0, r0
 672:	44 1f       	adc	r20, r20
 674:	55 0b       	sbc	r21, r21
 676:	00 0c       	add	r0, r0
 678:	44 1f       	adc	r20, r20
 67a:	55 1f       	adc	r21, r21
 67c:	62 e0       	ldi	r22, 0x02	; 2
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_SetPinVal>
 684:	4c 2f       	mov	r20, r28
 686:	44 1f       	adc	r20, r20
 688:	44 27       	eor	r20, r20
 68a:	44 1f       	adc	r20, r20
 68c:	64 e0       	ldi	r22, 0x04	; 4
 68e:	81 e0       	ldi	r24, 0x01	; 1
 690:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_SetPinVal>
 694:	41 e0       	ldi	r20, 0x01	; 1
 696:	62 e0       	ldi	r22, 0x02	; 2
 698:	80 e0       	ldi	r24, 0x00	; 0
 69a:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_SetPinVal>
 69e:	8f e9       	ldi	r24, 0x9F	; 159
 6a0:	9f e0       	ldi	r25, 0x0F	; 15
 6a2:	01 97       	sbiw	r24, 0x01	; 1
 6a4:	f1 f7       	brne	.-4      	; 0x6a2 <LCD_instruction+0x8a>
 6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <LCD_instruction+0x90>
 6a8:	00 00       	nop
 6aa:	40 e0       	ldi	r20, 0x00	; 0
 6ac:	62 e0       	ldi	r22, 0x02	; 2
 6ae:	80 e0       	ldi	r24, 0x00	; 0
 6b0:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_SetPinVal>
 6b4:	8f e9       	ldi	r24, 0x9F	; 159
 6b6:	9f e0       	ldi	r25, 0x0F	; 15
 6b8:	01 97       	sbiw	r24, 0x01	; 1
 6ba:	f1 f7       	brne	.-4      	; 0x6b8 <LCD_instruction+0xa0>
 6bc:	00 c0       	rjmp	.+0      	; 0x6be <LCD_instruction+0xa6>
 6be:	00 00       	nop
 6c0:	4c 2f       	mov	r20, r28
 6c2:	41 70       	andi	r20, 0x01	; 1
 6c4:	60 e0       	ldi	r22, 0x00	; 0
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_SetPinVal>
 6cc:	4c 2f       	mov	r20, r28
 6ce:	42 70       	andi	r20, 0x02	; 2
 6d0:	50 e0       	ldi	r21, 0x00	; 0
 6d2:	55 95       	asr	r21
 6d4:	47 95       	ror	r20
 6d6:	61 e0       	ldi	r22, 0x01	; 1
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_SetPinVal>
 6de:	4c 2f       	mov	r20, r28
 6e0:	44 70       	andi	r20, 0x04	; 4
 6e2:	50 e0       	ldi	r21, 0x00	; 0
 6e4:	55 95       	asr	r21
 6e6:	47 95       	ror	r20
 6e8:	55 95       	asr	r21
 6ea:	47 95       	ror	r20
 6ec:	62 e0       	ldi	r22, 0x02	; 2
 6ee:	81 e0       	ldi	r24, 0x01	; 1
 6f0:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_SetPinVal>
 6f4:	c8 70       	andi	r28, 0x08	; 8
 6f6:	4c 2f       	mov	r20, r28
 6f8:	50 e0       	ldi	r21, 0x00	; 0
 6fa:	55 95       	asr	r21
 6fc:	47 95       	ror	r20
 6fe:	55 95       	asr	r21
 700:	47 95       	ror	r20
 702:	55 95       	asr	r21
 704:	47 95       	ror	r20
 706:	64 e0       	ldi	r22, 0x04	; 4
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_SetPinVal>
 70e:	41 e0       	ldi	r20, 0x01	; 1
 710:	62 e0       	ldi	r22, 0x02	; 2
 712:	80 e0       	ldi	r24, 0x00	; 0
 714:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_SetPinVal>
 718:	8f e9       	ldi	r24, 0x9F	; 159
 71a:	9f e0       	ldi	r25, 0x0F	; 15
 71c:	01 97       	sbiw	r24, 0x01	; 1
 71e:	f1 f7       	brne	.-4      	; 0x71c <LCD_instruction+0x104>
 720:	00 c0       	rjmp	.+0      	; 0x722 <LCD_instruction+0x10a>
 722:	00 00       	nop
 724:	40 e0       	ldi	r20, 0x00	; 0
 726:	62 e0       	ldi	r22, 0x02	; 2
 728:	80 e0       	ldi	r24, 0x00	; 0
 72a:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_SetPinVal>
 72e:	8f e9       	ldi	r24, 0x9F	; 159
 730:	9f e0       	ldi	r25, 0x0F	; 15
 732:	01 97       	sbiw	r24, 0x01	; 1
 734:	f1 f7       	brne	.-4      	; 0x732 <LCD_instruction+0x11a>
 736:	00 c0       	rjmp	.+0      	; 0x738 <LCD_instruction+0x120>
 738:	00 00       	nop
 73a:	cf 91       	pop	r28
 73c:	08 95       	ret

0000073e <LCD_INIT>:
 73e:	2f ef       	ldi	r18, 0xFF	; 255
 740:	89 ef       	ldi	r24, 0xF9	; 249
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	21 50       	subi	r18, 0x01	; 1
 746:	80 40       	sbci	r24, 0x00	; 0
 748:	90 40       	sbci	r25, 0x00	; 0
 74a:	e1 f7       	brne	.-8      	; 0x744 <LCD_INIT+0x6>
 74c:	00 c0       	rjmp	.+0      	; 0x74e <LCD_INIT+0x10>
 74e:	00 00       	nop
 750:	83 e3       	ldi	r24, 0x33	; 51
 752:	0e 94 0c 03 	call	0x618	; 0x618 <LCD_instruction>
 756:	8f ec       	ldi	r24, 0xCF	; 207
 758:	97 e0       	ldi	r25, 0x07	; 7
 75a:	01 97       	sbiw	r24, 0x01	; 1
 75c:	f1 f7       	brne	.-4      	; 0x75a <LCD_INIT+0x1c>
 75e:	00 c0       	rjmp	.+0      	; 0x760 <LCD_INIT+0x22>
 760:	00 00       	nop
 762:	82 e3       	ldi	r24, 0x32	; 50
 764:	0e 94 0c 03 	call	0x618	; 0x618 <LCD_instruction>
 768:	8f ec       	ldi	r24, 0xCF	; 207
 76a:	97 e0       	ldi	r25, 0x07	; 7
 76c:	01 97       	sbiw	r24, 0x01	; 1
 76e:	f1 f7       	brne	.-4      	; 0x76c <LCD_INIT+0x2e>
 770:	00 c0       	rjmp	.+0      	; 0x772 <LCD_INIT+0x34>
 772:	00 00       	nop
 774:	88 e2       	ldi	r24, 0x28	; 40
 776:	0e 94 0c 03 	call	0x618	; 0x618 <LCD_instruction>
 77a:	8f ec       	ldi	r24, 0xCF	; 207
 77c:	97 e0       	ldi	r25, 0x07	; 7
 77e:	01 97       	sbiw	r24, 0x01	; 1
 780:	f1 f7       	brne	.-4      	; 0x77e <LCD_INIT+0x40>
 782:	00 c0       	rjmp	.+0      	; 0x784 <LCD_INIT+0x46>
 784:	00 00       	nop
 786:	8c e0       	ldi	r24, 0x0C	; 12
 788:	0e 94 0c 03 	call	0x618	; 0x618 <LCD_instruction>
 78c:	8f ec       	ldi	r24, 0xCF	; 207
 78e:	97 e0       	ldi	r25, 0x07	; 7
 790:	01 97       	sbiw	r24, 0x01	; 1
 792:	f1 f7       	brne	.-4      	; 0x790 <LCD_INIT+0x52>
 794:	00 c0       	rjmp	.+0      	; 0x796 <LCD_INIT+0x58>
 796:	00 00       	nop
 798:	81 e0       	ldi	r24, 0x01	; 1
 79a:	0e 94 0c 03 	call	0x618	; 0x618 <LCD_instruction>
 79e:	8f ec       	ldi	r24, 0xCF	; 207
 7a0:	97 e0       	ldi	r25, 0x07	; 7
 7a2:	01 97       	sbiw	r24, 0x01	; 1
 7a4:	f1 f7       	brne	.-4      	; 0x7a2 <LCD_INIT+0x64>
 7a6:	00 c0       	rjmp	.+0      	; 0x7a8 <LCD_INIT+0x6a>
 7a8:	00 00       	nop
 7aa:	82 e0       	ldi	r24, 0x02	; 2
 7ac:	0e 94 0c 03 	call	0x618	; 0x618 <LCD_instruction>
 7b0:	8f ec       	ldi	r24, 0xCF	; 207
 7b2:	97 e0       	ldi	r25, 0x07	; 7
 7b4:	01 97       	sbiw	r24, 0x01	; 1
 7b6:	f1 f7       	brne	.-4      	; 0x7b4 <LCD_INIT+0x76>
 7b8:	00 c0       	rjmp	.+0      	; 0x7ba <LCD_INIT+0x7c>
 7ba:	00 00       	nop
 7bc:	08 95       	ret

000007be <LCD_write_char>:
 7be:	cf 93       	push	r28
 7c0:	c8 2f       	mov	r28, r24
 7c2:	41 e0       	ldi	r20, 0x01	; 1
 7c4:	63 e0       	ldi	r22, 0x03	; 3
 7c6:	80 e0       	ldi	r24, 0x00	; 0
 7c8:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_SetPinVal>
 7cc:	4c 2f       	mov	r20, r28
 7ce:	40 71       	andi	r20, 0x10	; 16
 7d0:	50 e0       	ldi	r21, 0x00	; 0
 7d2:	55 95       	asr	r21
 7d4:	47 95       	ror	r20
 7d6:	55 95       	asr	r21
 7d8:	47 95       	ror	r20
 7da:	55 95       	asr	r21
 7dc:	47 95       	ror	r20
 7de:	55 95       	asr	r21
 7e0:	47 95       	ror	r20
 7e2:	60 e0       	ldi	r22, 0x00	; 0
 7e4:	81 e0       	ldi	r24, 0x01	; 1
 7e6:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_SetPinVal>
 7ea:	4c 2f       	mov	r20, r28
 7ec:	40 72       	andi	r20, 0x20	; 32
 7ee:	50 e0       	ldi	r21, 0x00	; 0
 7f0:	55 95       	asr	r21
 7f2:	47 95       	ror	r20
 7f4:	55 95       	asr	r21
 7f6:	47 95       	ror	r20
 7f8:	55 95       	asr	r21
 7fa:	47 95       	ror	r20
 7fc:	55 95       	asr	r21
 7fe:	47 95       	ror	r20
 800:	55 95       	asr	r21
 802:	47 95       	ror	r20
 804:	61 e0       	ldi	r22, 0x01	; 1
 806:	81 e0       	ldi	r24, 0x01	; 1
 808:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_SetPinVal>
 80c:	4c 2f       	mov	r20, r28
 80e:	40 74       	andi	r20, 0x40	; 64
 810:	50 e0       	ldi	r21, 0x00	; 0
 812:	04 2e       	mov	r0, r20
 814:	45 2f       	mov	r20, r21
 816:	00 0c       	add	r0, r0
 818:	44 1f       	adc	r20, r20
 81a:	55 0b       	sbc	r21, r21
 81c:	00 0c       	add	r0, r0
 81e:	44 1f       	adc	r20, r20
 820:	55 1f       	adc	r21, r21
 822:	62 e0       	ldi	r22, 0x02	; 2
 824:	81 e0       	ldi	r24, 0x01	; 1
 826:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_SetPinVal>
 82a:	4c 2f       	mov	r20, r28
 82c:	44 1f       	adc	r20, r20
 82e:	44 27       	eor	r20, r20
 830:	44 1f       	adc	r20, r20
 832:	64 e0       	ldi	r22, 0x04	; 4
 834:	81 e0       	ldi	r24, 0x01	; 1
 836:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_SetPinVal>
 83a:	41 e0       	ldi	r20, 0x01	; 1
 83c:	62 e0       	ldi	r22, 0x02	; 2
 83e:	80 e0       	ldi	r24, 0x00	; 0
 840:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_SetPinVal>
 844:	8f e9       	ldi	r24, 0x9F	; 159
 846:	9f e0       	ldi	r25, 0x0F	; 15
 848:	01 97       	sbiw	r24, 0x01	; 1
 84a:	f1 f7       	brne	.-4      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 84c:	00 c0       	rjmp	.+0      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 84e:	00 00       	nop
 850:	40 e0       	ldi	r20, 0x00	; 0
 852:	62 e0       	ldi	r22, 0x02	; 2
 854:	80 e0       	ldi	r24, 0x00	; 0
 856:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_SetPinVal>
 85a:	8f e9       	ldi	r24, 0x9F	; 159
 85c:	9f e0       	ldi	r25, 0x0F	; 15
 85e:	01 97       	sbiw	r24, 0x01	; 1
 860:	f1 f7       	brne	.-4      	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 862:	00 c0       	rjmp	.+0      	; 0x864 <__stack+0x5>
 864:	00 00       	nop
 866:	4c 2f       	mov	r20, r28
 868:	41 70       	andi	r20, 0x01	; 1
 86a:	60 e0       	ldi	r22, 0x00	; 0
 86c:	81 e0       	ldi	r24, 0x01	; 1
 86e:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_SetPinVal>
 872:	4c 2f       	mov	r20, r28
 874:	42 70       	andi	r20, 0x02	; 2
 876:	50 e0       	ldi	r21, 0x00	; 0
 878:	55 95       	asr	r21
 87a:	47 95       	ror	r20
 87c:	61 e0       	ldi	r22, 0x01	; 1
 87e:	81 e0       	ldi	r24, 0x01	; 1
 880:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_SetPinVal>
 884:	4c 2f       	mov	r20, r28
 886:	44 70       	andi	r20, 0x04	; 4
 888:	50 e0       	ldi	r21, 0x00	; 0
 88a:	55 95       	asr	r21
 88c:	47 95       	ror	r20
 88e:	55 95       	asr	r21
 890:	47 95       	ror	r20
 892:	62 e0       	ldi	r22, 0x02	; 2
 894:	81 e0       	ldi	r24, 0x01	; 1
 896:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_SetPinVal>
 89a:	c8 70       	andi	r28, 0x08	; 8
 89c:	4c 2f       	mov	r20, r28
 89e:	50 e0       	ldi	r21, 0x00	; 0
 8a0:	55 95       	asr	r21
 8a2:	47 95       	ror	r20
 8a4:	55 95       	asr	r21
 8a6:	47 95       	ror	r20
 8a8:	55 95       	asr	r21
 8aa:	47 95       	ror	r20
 8ac:	64 e0       	ldi	r22, 0x04	; 4
 8ae:	81 e0       	ldi	r24, 0x01	; 1
 8b0:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_SetPinVal>
 8b4:	41 e0       	ldi	r20, 0x01	; 1
 8b6:	62 e0       	ldi	r22, 0x02	; 2
 8b8:	80 e0       	ldi	r24, 0x00	; 0
 8ba:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_SetPinVal>
 8be:	8f e9       	ldi	r24, 0x9F	; 159
 8c0:	9f e0       	ldi	r25, 0x0F	; 15
 8c2:	01 97       	sbiw	r24, 0x01	; 1
 8c4:	f1 f7       	brne	.-4      	; 0x8c2 <__stack+0x63>
 8c6:	00 c0       	rjmp	.+0      	; 0x8c8 <__stack+0x69>
 8c8:	00 00       	nop
 8ca:	40 e0       	ldi	r20, 0x00	; 0
 8cc:	62 e0       	ldi	r22, 0x02	; 2
 8ce:	80 e0       	ldi	r24, 0x00	; 0
 8d0:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_SetPinVal>
 8d4:	8f e9       	ldi	r24, 0x9F	; 159
 8d6:	9f e0       	ldi	r25, 0x0F	; 15
 8d8:	01 97       	sbiw	r24, 0x01	; 1
 8da:	f1 f7       	brne	.-4      	; 0x8d8 <__stack+0x79>
 8dc:	00 c0       	rjmp	.+0      	; 0x8de <__stack+0x7f>
 8de:	00 00       	nop
 8e0:	cf 91       	pop	r28
 8e2:	08 95       	ret

000008e4 <LCD_SEND_STRING>:
 8e4:	cf 93       	push	r28
 8e6:	df 93       	push	r29
 8e8:	ec 01       	movw	r28, r24
 8ea:	03 c0       	rjmp	.+6      	; 0x8f2 <LCD_SEND_STRING+0xe>
 8ec:	0e 94 df 03 	call	0x7be	; 0x7be <LCD_write_char>
 8f0:	21 96       	adiw	r28, 0x01	; 1
 8f2:	88 81       	ld	r24, Y
 8f4:	81 11       	cpse	r24, r1
 8f6:	fa cf       	rjmp	.-12     	; 0x8ec <LCD_SEND_STRING+0x8>
 8f8:	df 91       	pop	r29
 8fa:	cf 91       	pop	r28
 8fc:	08 95       	ret

000008fe <LCD_MOVE_CURSOR>:
void LCD_MOVE_CURSOR(unsigned char row , unsigned char column)
{
	
	
	unsigned char data = 0x80;
	if(row>4||row<1||column>20||column<1)
 8fe:	9f ef       	ldi	r25, 0xFF	; 255
 900:	98 0f       	add	r25, r24
 902:	94 30       	cpi	r25, 0x04	; 4
 904:	c0 f4       	brcc	.+48     	; 0x936 <LCD_MOVE_CURSOR+0x38>
 906:	65 31       	cpi	r22, 0x15	; 21
 908:	c0 f4       	brcc	.+48     	; 0x93a <LCD_MOVE_CURSOR+0x3c>
 90a:	66 23       	and	r22, r22
 90c:	c1 f0       	breq	.+48     	; 0x93e <LCD_MOVE_CURSOR+0x40>
	{
		data=0x80;                       
	}
	else if(row==1)
 90e:	81 30       	cpi	r24, 0x01	; 1
 910:	19 f4       	brne	.+6      	; 0x918 <LCD_MOVE_CURSOR+0x1a>
	{
		data=0x80+column-1 ;
 912:	8f e7       	ldi	r24, 0x7F	; 127
 914:	86 0f       	add	r24, r22
 916:	16 c0       	rjmp	.+44     	; 0x944 <LCD_MOVE_CURSOR+0x46>
	}
	else if (row==2)
 918:	82 30       	cpi	r24, 0x02	; 2
 91a:	19 f4       	brne	.+6      	; 0x922 <LCD_MOVE_CURSOR+0x24>
	{
		data=0xc0+column-1;
 91c:	8f eb       	ldi	r24, 0xBF	; 191
 91e:	86 0f       	add	r24, r22
 920:	11 c0       	rjmp	.+34     	; 0x944 <LCD_MOVE_CURSOR+0x46>
	}
	else if (row==3)
 922:	83 30       	cpi	r24, 0x03	; 3
 924:	19 f4       	brne	.+6      	; 0x92c <LCD_MOVE_CURSOR+0x2e>
	{
		data=0x94+column-1;
 926:	83 e9       	ldi	r24, 0x93	; 147
 928:	86 0f       	add	r24, r22
 92a:	0c c0       	rjmp	.+24     	; 0x944 <LCD_MOVE_CURSOR+0x46>
	}
	else if (row==4)
 92c:	84 30       	cpi	r24, 0x04	; 4
 92e:	49 f4       	brne	.+18     	; 0x942 <LCD_MOVE_CURSOR+0x44>
	{
		data=0xD4+column-1;
 930:	83 ed       	ldi	r24, 0xD3	; 211
 932:	86 0f       	add	r24, r22
 934:	07 c0       	rjmp	.+14     	; 0x944 <LCD_MOVE_CURSOR+0x46>
	
	
	unsigned char data = 0x80;
	if(row>4||row<1||column>20||column<1)
	{
		data=0x80;                       
 936:	80 e8       	ldi	r24, 0x80	; 128
 938:	05 c0       	rjmp	.+10     	; 0x944 <LCD_MOVE_CURSOR+0x46>
 93a:	80 e8       	ldi	r24, 0x80	; 128
 93c:	03 c0       	rjmp	.+6      	; 0x944 <LCD_MOVE_CURSOR+0x46>
 93e:	80 e8       	ldi	r24, 0x80	; 128
 940:	01 c0       	rjmp	.+2      	; 0x944 <LCD_MOVE_CURSOR+0x46>

void LCD_MOVE_CURSOR(unsigned char row , unsigned char column)
{
	
	
	unsigned char data = 0x80;
 942:	80 e8       	ldi	r24, 0x80	; 128
	}
	else if (row==4)
	{
		data=0xD4+column-1;
	}
	LCD_instruction(data);
 944:	0e 94 0c 03 	call	0x618	; 0x618 <LCD_instruction>
 948:	8f ec       	ldi	r24, 0xCF	; 207
 94a:	97 e0       	ldi	r25, 0x07	; 7
 94c:	01 97       	sbiw	r24, 0x01	; 1
 94e:	f1 f7       	brne	.-4      	; 0x94c <LCD_MOVE_CURSOR+0x4e>
 950:	00 c0       	rjmp	.+0      	; 0x952 <LCD_MOVE_CURSOR+0x54>
 952:	00 00       	nop
 954:	08 95       	ret

00000956 <main>:
#include "DIO.h"
#include "CALC.h"

int main()
{
	Calc_init();
 956:	0e 94 49 00 	call	0x92	; 0x92 <Calc_init>
	
	while(1)
	{
		Calculator(); 
 95a:	0e 94 27 02 	call	0x44e	; 0x44e <Calculator>
 95e:	2f e7       	ldi	r18, 0x7F	; 127
 960:	8a e1       	ldi	r24, 0x1A	; 26
 962:	96 e0       	ldi	r25, 0x06	; 6
 964:	21 50       	subi	r18, 0x01	; 1
 966:	80 40       	sbci	r24, 0x00	; 0
 968:	90 40       	sbci	r25, 0x00	; 0
 96a:	e1 f7       	brne	.-8      	; 0x964 <main+0xe>
 96c:	00 c0       	rjmp	.+0      	; 0x96e <main+0x18>
 96e:	00 00       	nop
 970:	f4 cf       	rjmp	.-24     	; 0x95a <main+0x4>

00000972 <DIO_init>:
			break;
		case PC:
			TOG_BIT(PORTC, pinNum);
			break;
		case PD:
			TOG_BIT(PORTD, pinNum);
 972:	8f ef       	ldi	r24, 0xFF	; 255
 974:	8a bb       	out	0x1a, r24	; 26
 976:	87 bb       	out	0x17, r24	; 23
 978:	84 bb       	out	0x14, r24	; 20
 97a:	87 e1       	ldi	r24, 0x17	; 23
 97c:	81 bb       	out	0x11, r24	; 17
 97e:	08 95       	ret

00000980 <DIO_SetPinVal>:
 980:	81 30       	cpi	r24, 0x01	; 1
 982:	01 f1       	breq	.+64     	; 0x9c4 <DIO_SetPinVal+0x44>
 984:	30 f0       	brcs	.+12     	; 0x992 <DIO_SetPinVal+0x12>
 986:	82 30       	cpi	r24, 0x02	; 2
 988:	b1 f1       	breq	.+108    	; 0x9f6 <DIO_SetPinVal+0x76>
 98a:	83 30       	cpi	r24, 0x03	; 3
 98c:	09 f4       	brne	.+2      	; 0x990 <DIO_SetPinVal+0x10>
 98e:	4c c0       	rjmp	.+152    	; 0xa28 <DIO_SetPinVal+0xa8>
 990:	08 95       	ret
 992:	41 30       	cpi	r20, 0x01	; 1
 994:	59 f4       	brne	.+22     	; 0x9ac <DIO_SetPinVal+0x2c>
 996:	2b b3       	in	r18, 0x1b	; 27
 998:	81 e0       	ldi	r24, 0x01	; 1
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	02 c0       	rjmp	.+4      	; 0x9a2 <DIO_SetPinVal+0x22>
 99e:	88 0f       	add	r24, r24
 9a0:	99 1f       	adc	r25, r25
 9a2:	6a 95       	dec	r22
 9a4:	e2 f7       	brpl	.-8      	; 0x99e <DIO_SetPinVal+0x1e>
 9a6:	82 2b       	or	r24, r18
 9a8:	8b bb       	out	0x1b, r24	; 27
 9aa:	08 95       	ret
 9ac:	2b b3       	in	r18, 0x1b	; 27
 9ae:	81 e0       	ldi	r24, 0x01	; 1
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <DIO_SetPinVal+0x38>
 9b4:	88 0f       	add	r24, r24
 9b6:	99 1f       	adc	r25, r25
 9b8:	6a 95       	dec	r22
 9ba:	e2 f7       	brpl	.-8      	; 0x9b4 <DIO_SetPinVal+0x34>
 9bc:	80 95       	com	r24
 9be:	82 23       	and	r24, r18
 9c0:	8b bb       	out	0x1b, r24	; 27
 9c2:	08 95       	ret
 9c4:	41 30       	cpi	r20, 0x01	; 1
 9c6:	59 f4       	brne	.+22     	; 0x9de <DIO_SetPinVal+0x5e>
 9c8:	2b b3       	in	r18, 0x1b	; 27
 9ca:	81 e0       	ldi	r24, 0x01	; 1
 9cc:	90 e0       	ldi	r25, 0x00	; 0
 9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <DIO_SetPinVal+0x54>
 9d0:	88 0f       	add	r24, r24
 9d2:	99 1f       	adc	r25, r25
 9d4:	6a 95       	dec	r22
 9d6:	e2 f7       	brpl	.-8      	; 0x9d0 <DIO_SetPinVal+0x50>
 9d8:	82 2b       	or	r24, r18
 9da:	8b bb       	out	0x1b, r24	; 27
 9dc:	08 95       	ret
 9de:	2b b3       	in	r18, 0x1b	; 27
 9e0:	81 e0       	ldi	r24, 0x01	; 1
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	02 c0       	rjmp	.+4      	; 0x9ea <DIO_SetPinVal+0x6a>
 9e6:	88 0f       	add	r24, r24
 9e8:	99 1f       	adc	r25, r25
 9ea:	6a 95       	dec	r22
 9ec:	e2 f7       	brpl	.-8      	; 0x9e6 <DIO_SetPinVal+0x66>
 9ee:	80 95       	com	r24
 9f0:	82 23       	and	r24, r18
 9f2:	8b bb       	out	0x1b, r24	; 27
 9f4:	08 95       	ret
 9f6:	41 30       	cpi	r20, 0x01	; 1
 9f8:	59 f4       	brne	.+22     	; 0xa10 <DIO_SetPinVal+0x90>
 9fa:	2b b3       	in	r18, 0x1b	; 27
 9fc:	81 e0       	ldi	r24, 0x01	; 1
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	02 c0       	rjmp	.+4      	; 0xa06 <DIO_SetPinVal+0x86>
 a02:	88 0f       	add	r24, r24
 a04:	99 1f       	adc	r25, r25
 a06:	6a 95       	dec	r22
 a08:	e2 f7       	brpl	.-8      	; 0xa02 <DIO_SetPinVal+0x82>
 a0a:	82 2b       	or	r24, r18
 a0c:	8b bb       	out	0x1b, r24	; 27
 a0e:	08 95       	ret
 a10:	2b b3       	in	r18, 0x1b	; 27
 a12:	81 e0       	ldi	r24, 0x01	; 1
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	02 c0       	rjmp	.+4      	; 0xa1c <DIO_SetPinVal+0x9c>
 a18:	88 0f       	add	r24, r24
 a1a:	99 1f       	adc	r25, r25
 a1c:	6a 95       	dec	r22
 a1e:	e2 f7       	brpl	.-8      	; 0xa18 <DIO_SetPinVal+0x98>
 a20:	80 95       	com	r24
 a22:	82 23       	and	r24, r18
 a24:	8b bb       	out	0x1b, r24	; 27
 a26:	08 95       	ret
 a28:	41 30       	cpi	r20, 0x01	; 1
 a2a:	59 f4       	brne	.+22     	; 0xa42 <DIO_SetPinVal+0xc2>
 a2c:	2b b3       	in	r18, 0x1b	; 27
 a2e:	81 e0       	ldi	r24, 0x01	; 1
 a30:	90 e0       	ldi	r25, 0x00	; 0
 a32:	02 c0       	rjmp	.+4      	; 0xa38 <DIO_SetPinVal+0xb8>
 a34:	88 0f       	add	r24, r24
 a36:	99 1f       	adc	r25, r25
 a38:	6a 95       	dec	r22
 a3a:	e2 f7       	brpl	.-8      	; 0xa34 <DIO_SetPinVal+0xb4>
 a3c:	82 2b       	or	r24, r18
 a3e:	8b bb       	out	0x1b, r24	; 27
 a40:	08 95       	ret
 a42:	2b b3       	in	r18, 0x1b	; 27
 a44:	81 e0       	ldi	r24, 0x01	; 1
 a46:	90 e0       	ldi	r25, 0x00	; 0
 a48:	02 c0       	rjmp	.+4      	; 0xa4e <DIO_SetPinVal+0xce>
 a4a:	88 0f       	add	r24, r24
 a4c:	99 1f       	adc	r25, r25
 a4e:	6a 95       	dec	r22
 a50:	e2 f7       	brpl	.-8      	; 0xa4a <DIO_SetPinVal+0xca>
 a52:	80 95       	com	r24
 a54:	82 23       	and	r24, r18
 a56:	8b bb       	out	0x1b, r24	; 27
 a58:	08 95       	ret

00000a5a <DIO_ReadPinVal>:
 a5a:	81 30       	cpi	r24, 0x01	; 1
 a5c:	d1 f0       	breq	.+52     	; 0xa92 <DIO_ReadPinVal+0x38>
 a5e:	28 f0       	brcs	.+10     	; 0xa6a <DIO_ReadPinVal+0x10>
 a60:	82 30       	cpi	r24, 0x02	; 2
 a62:	59 f1       	breq	.+86     	; 0xaba <DIO_ReadPinVal+0x60>
 a64:	83 30       	cpi	r24, 0x03	; 3
 a66:	e9 f1       	breq	.+122    	; 0xae2 <DIO_ReadPinVal+0x88>
 a68:	50 c0       	rjmp	.+160    	; 0xb0a <DIO_ReadPinVal+0xb0>
 a6a:	49 b3       	in	r20, 0x19	; 25
 a6c:	81 e0       	ldi	r24, 0x01	; 1
 a6e:	90 e0       	ldi	r25, 0x00	; 0
 a70:	9c 01       	movw	r18, r24
 a72:	06 2e       	mov	r0, r22
 a74:	02 c0       	rjmp	.+4      	; 0xa7a <DIO_ReadPinVal+0x20>
 a76:	22 0f       	add	r18, r18
 a78:	33 1f       	adc	r19, r19
 a7a:	0a 94       	dec	r0
 a7c:	e2 f7       	brpl	.-8      	; 0xa76 <DIO_ReadPinVal+0x1c>
 a7e:	84 2f       	mov	r24, r20
 a80:	90 e0       	ldi	r25, 0x00	; 0
 a82:	82 23       	and	r24, r18
 a84:	93 23       	and	r25, r19
 a86:	02 c0       	rjmp	.+4      	; 0xa8c <DIO_ReadPinVal+0x32>
 a88:	95 95       	asr	r25
 a8a:	87 95       	ror	r24
 a8c:	6a 95       	dec	r22
 a8e:	e2 f7       	brpl	.-8      	; 0xa88 <DIO_ReadPinVal+0x2e>
 a90:	08 95       	ret
 a92:	46 b3       	in	r20, 0x16	; 22
 a94:	81 e0       	ldi	r24, 0x01	; 1
 a96:	90 e0       	ldi	r25, 0x00	; 0
 a98:	9c 01       	movw	r18, r24
 a9a:	06 2e       	mov	r0, r22
 a9c:	02 c0       	rjmp	.+4      	; 0xaa2 <DIO_ReadPinVal+0x48>
 a9e:	22 0f       	add	r18, r18
 aa0:	33 1f       	adc	r19, r19
 aa2:	0a 94       	dec	r0
 aa4:	e2 f7       	brpl	.-8      	; 0xa9e <DIO_ReadPinVal+0x44>
 aa6:	84 2f       	mov	r24, r20
 aa8:	90 e0       	ldi	r25, 0x00	; 0
 aaa:	82 23       	and	r24, r18
 aac:	93 23       	and	r25, r19
 aae:	02 c0       	rjmp	.+4      	; 0xab4 <DIO_ReadPinVal+0x5a>
 ab0:	95 95       	asr	r25
 ab2:	87 95       	ror	r24
 ab4:	6a 95       	dec	r22
 ab6:	e2 f7       	brpl	.-8      	; 0xab0 <DIO_ReadPinVal+0x56>
 ab8:	08 95       	ret
 aba:	43 b3       	in	r20, 0x13	; 19
 abc:	81 e0       	ldi	r24, 0x01	; 1
 abe:	90 e0       	ldi	r25, 0x00	; 0
 ac0:	9c 01       	movw	r18, r24
 ac2:	06 2e       	mov	r0, r22
 ac4:	02 c0       	rjmp	.+4      	; 0xaca <DIO_ReadPinVal+0x70>
 ac6:	22 0f       	add	r18, r18
 ac8:	33 1f       	adc	r19, r19
 aca:	0a 94       	dec	r0
 acc:	e2 f7       	brpl	.-8      	; 0xac6 <DIO_ReadPinVal+0x6c>
 ace:	84 2f       	mov	r24, r20
 ad0:	90 e0       	ldi	r25, 0x00	; 0
 ad2:	82 23       	and	r24, r18
 ad4:	93 23       	and	r25, r19
 ad6:	02 c0       	rjmp	.+4      	; 0xadc <DIO_ReadPinVal+0x82>
 ad8:	95 95       	asr	r25
 ada:	87 95       	ror	r24
 adc:	6a 95       	dec	r22
 ade:	e2 f7       	brpl	.-8      	; 0xad8 <DIO_ReadPinVal+0x7e>
 ae0:	08 95       	ret
 ae2:	40 b3       	in	r20, 0x10	; 16
 ae4:	81 e0       	ldi	r24, 0x01	; 1
 ae6:	90 e0       	ldi	r25, 0x00	; 0
 ae8:	9c 01       	movw	r18, r24
 aea:	06 2e       	mov	r0, r22
 aec:	02 c0       	rjmp	.+4      	; 0xaf2 <DIO_ReadPinVal+0x98>
 aee:	22 0f       	add	r18, r18
 af0:	33 1f       	adc	r19, r19
 af2:	0a 94       	dec	r0
 af4:	e2 f7       	brpl	.-8      	; 0xaee <DIO_ReadPinVal+0x94>
 af6:	84 2f       	mov	r24, r20
 af8:	90 e0       	ldi	r25, 0x00	; 0
 afa:	82 23       	and	r24, r18
 afc:	93 23       	and	r25, r19
 afe:	02 c0       	rjmp	.+4      	; 0xb04 <DIO_ReadPinVal+0xaa>
 b00:	95 95       	asr	r25
 b02:	87 95       	ror	r24
 b04:	6a 95       	dec	r22
 b06:	e2 f7       	brpl	.-8      	; 0xb00 <DIO_ReadPinVal+0xa6>
 b08:	08 95       	ret
 b0a:	80 e0       	ldi	r24, 0x00	; 0
 b0c:	08 95       	ret

00000b0e <DIO_EN_PULLUP>:
	}
}

void DIO_EN_PULLUP(uint8_t portName, uint8_t pinNum)
{
	switch(portName)
 b0e:	81 30       	cpi	r24, 0x01	; 1
 b10:	89 f0       	breq	.+34     	; 0xb34 <DIO_EN_PULLUP+0x26>
 b12:	28 f0       	brcs	.+10     	; 0xb1e <DIO_EN_PULLUP+0x10>
 b14:	82 30       	cpi	r24, 0x02	; 2
 b16:	c9 f0       	breq	.+50     	; 0xb4a <DIO_EN_PULLUP+0x3c>
 b18:	83 30       	cpi	r24, 0x03	; 3
 b1a:	11 f1       	breq	.+68     	; 0xb60 <DIO_EN_PULLUP+0x52>
 b1c:	08 95       	ret
	{
		case PA:
			SET_BIT(PINA, pinNum);
 b1e:	29 b3       	in	r18, 0x19	; 25
 b20:	81 e0       	ldi	r24, 0x01	; 1
 b22:	90 e0       	ldi	r25, 0x00	; 0
 b24:	02 c0       	rjmp	.+4      	; 0xb2a <DIO_EN_PULLUP+0x1c>
 b26:	88 0f       	add	r24, r24
 b28:	99 1f       	adc	r25, r25
 b2a:	6a 95       	dec	r22
 b2c:	e2 f7       	brpl	.-8      	; 0xb26 <DIO_EN_PULLUP+0x18>
 b2e:	82 2b       	or	r24, r18
 b30:	89 bb       	out	0x19, r24	; 25
			break;
 b32:	08 95       	ret
		case PB:
			SET_BIT(PINB, pinNum);
 b34:	26 b3       	in	r18, 0x16	; 22
 b36:	81 e0       	ldi	r24, 0x01	; 1
 b38:	90 e0       	ldi	r25, 0x00	; 0
 b3a:	02 c0       	rjmp	.+4      	; 0xb40 <DIO_EN_PULLUP+0x32>
 b3c:	88 0f       	add	r24, r24
 b3e:	99 1f       	adc	r25, r25
 b40:	6a 95       	dec	r22
 b42:	e2 f7       	brpl	.-8      	; 0xb3c <DIO_EN_PULLUP+0x2e>
 b44:	82 2b       	or	r24, r18
 b46:	86 bb       	out	0x16, r24	; 22
			break;
 b48:	08 95       	ret
		case PC:
			SET_BIT(PINC, pinNum);
 b4a:	23 b3       	in	r18, 0x13	; 19
 b4c:	81 e0       	ldi	r24, 0x01	; 1
 b4e:	90 e0       	ldi	r25, 0x00	; 0
 b50:	02 c0       	rjmp	.+4      	; 0xb56 <DIO_EN_PULLUP+0x48>
 b52:	88 0f       	add	r24, r24
 b54:	99 1f       	adc	r25, r25
 b56:	6a 95       	dec	r22
 b58:	e2 f7       	brpl	.-8      	; 0xb52 <DIO_EN_PULLUP+0x44>
 b5a:	82 2b       	or	r24, r18
 b5c:	83 bb       	out	0x13, r24	; 19
			break;
 b5e:	08 95       	ret
		case PD:
			SET_BIT(PIND, pinNum);
 b60:	20 b3       	in	r18, 0x10	; 16
 b62:	81 e0       	ldi	r24, 0x01	; 1
 b64:	90 e0       	ldi	r25, 0x00	; 0
 b66:	02 c0       	rjmp	.+4      	; 0xb6c <DIO_EN_PULLUP+0x5e>
 b68:	88 0f       	add	r24, r24
 b6a:	99 1f       	adc	r25, r25
 b6c:	6a 95       	dec	r22
 b6e:	e2 f7       	brpl	.-8      	; 0xb68 <DIO_EN_PULLUP+0x5a>
 b70:	82 2b       	or	r24, r18
 b72:	80 bb       	out	0x10, r24	; 16
 b74:	08 95       	ret

00000b76 <__divmodhi4>:
 b76:	97 fb       	bst	r25, 7
 b78:	07 2e       	mov	r0, r23
 b7a:	16 f4       	brtc	.+4      	; 0xb80 <__divmodhi4+0xa>
 b7c:	00 94       	com	r0
 b7e:	07 d0       	rcall	.+14     	; 0xb8e <__divmodhi4_neg1>
 b80:	77 fd       	sbrc	r23, 7
 b82:	09 d0       	rcall	.+18     	; 0xb96 <__divmodhi4_neg2>
 b84:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__udivmodhi4>
 b88:	07 fc       	sbrc	r0, 7
 b8a:	05 d0       	rcall	.+10     	; 0xb96 <__divmodhi4_neg2>
 b8c:	3e f4       	brtc	.+14     	; 0xb9c <__divmodhi4_exit>

00000b8e <__divmodhi4_neg1>:
 b8e:	90 95       	com	r25
 b90:	81 95       	neg	r24
 b92:	9f 4f       	sbci	r25, 0xFF	; 255
 b94:	08 95       	ret

00000b96 <__divmodhi4_neg2>:
 b96:	70 95       	com	r23
 b98:	61 95       	neg	r22
 b9a:	7f 4f       	sbci	r23, 0xFF	; 255

00000b9c <__divmodhi4_exit>:
 b9c:	08 95       	ret

00000b9e <__divmodsi4>:
 b9e:	05 2e       	mov	r0, r21
 ba0:	97 fb       	bst	r25, 7
 ba2:	1e f4       	brtc	.+6      	; 0xbaa <__divmodsi4+0xc>
 ba4:	00 94       	com	r0
 ba6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__negsi2>
 baa:	57 fd       	sbrc	r21, 7
 bac:	07 d0       	rcall	.+14     	; 0xbbc <__divmodsi4_neg2>
 bae:	0e 94 02 06 	call	0xc04	; 0xc04 <__udivmodsi4>
 bb2:	07 fc       	sbrc	r0, 7
 bb4:	03 d0       	rcall	.+6      	; 0xbbc <__divmodsi4_neg2>
 bb6:	4e f4       	brtc	.+18     	; 0xbca <__divmodsi4_exit>
 bb8:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <__negsi2>

00000bbc <__divmodsi4_neg2>:
 bbc:	50 95       	com	r21
 bbe:	40 95       	com	r20
 bc0:	30 95       	com	r19
 bc2:	21 95       	neg	r18
 bc4:	3f 4f       	sbci	r19, 0xFF	; 255
 bc6:	4f 4f       	sbci	r20, 0xFF	; 255
 bc8:	5f 4f       	sbci	r21, 0xFF	; 255

00000bca <__divmodsi4_exit>:
 bca:	08 95       	ret

00000bcc <__negsi2>:
 bcc:	90 95       	com	r25
 bce:	80 95       	com	r24
 bd0:	70 95       	com	r23
 bd2:	61 95       	neg	r22
 bd4:	7f 4f       	sbci	r23, 0xFF	; 255
 bd6:	8f 4f       	sbci	r24, 0xFF	; 255
 bd8:	9f 4f       	sbci	r25, 0xFF	; 255
 bda:	08 95       	ret

00000bdc <__udivmodhi4>:
 bdc:	aa 1b       	sub	r26, r26
 bde:	bb 1b       	sub	r27, r27
 be0:	51 e1       	ldi	r21, 0x11	; 17
 be2:	07 c0       	rjmp	.+14     	; 0xbf2 <__udivmodhi4_ep>

00000be4 <__udivmodhi4_loop>:
 be4:	aa 1f       	adc	r26, r26
 be6:	bb 1f       	adc	r27, r27
 be8:	a6 17       	cp	r26, r22
 bea:	b7 07       	cpc	r27, r23
 bec:	10 f0       	brcs	.+4      	; 0xbf2 <__udivmodhi4_ep>
 bee:	a6 1b       	sub	r26, r22
 bf0:	b7 0b       	sbc	r27, r23

00000bf2 <__udivmodhi4_ep>:
 bf2:	88 1f       	adc	r24, r24
 bf4:	99 1f       	adc	r25, r25
 bf6:	5a 95       	dec	r21
 bf8:	a9 f7       	brne	.-22     	; 0xbe4 <__udivmodhi4_loop>
 bfa:	80 95       	com	r24
 bfc:	90 95       	com	r25
 bfe:	bc 01       	movw	r22, r24
 c00:	cd 01       	movw	r24, r26
 c02:	08 95       	ret

00000c04 <__udivmodsi4>:
 c04:	a1 e2       	ldi	r26, 0x21	; 33
 c06:	1a 2e       	mov	r1, r26
 c08:	aa 1b       	sub	r26, r26
 c0a:	bb 1b       	sub	r27, r27
 c0c:	fd 01       	movw	r30, r26
 c0e:	0d c0       	rjmp	.+26     	; 0xc2a <__udivmodsi4_ep>

00000c10 <__udivmodsi4_loop>:
 c10:	aa 1f       	adc	r26, r26
 c12:	bb 1f       	adc	r27, r27
 c14:	ee 1f       	adc	r30, r30
 c16:	ff 1f       	adc	r31, r31
 c18:	a2 17       	cp	r26, r18
 c1a:	b3 07       	cpc	r27, r19
 c1c:	e4 07       	cpc	r30, r20
 c1e:	f5 07       	cpc	r31, r21
 c20:	20 f0       	brcs	.+8      	; 0xc2a <__udivmodsi4_ep>
 c22:	a2 1b       	sub	r26, r18
 c24:	b3 0b       	sbc	r27, r19
 c26:	e4 0b       	sbc	r30, r20
 c28:	f5 0b       	sbc	r31, r21

00000c2a <__udivmodsi4_ep>:
 c2a:	66 1f       	adc	r22, r22
 c2c:	77 1f       	adc	r23, r23
 c2e:	88 1f       	adc	r24, r24
 c30:	99 1f       	adc	r25, r25
 c32:	1a 94       	dec	r1
 c34:	69 f7       	brne	.-38     	; 0xc10 <__udivmodsi4_loop>
 c36:	60 95       	com	r22
 c38:	70 95       	com	r23
 c3a:	80 95       	com	r24
 c3c:	90 95       	com	r25
 c3e:	9b 01       	movw	r18, r22
 c40:	ac 01       	movw	r20, r24
 c42:	bd 01       	movw	r22, r26
 c44:	cf 01       	movw	r24, r30
 c46:	08 95       	ret

00000c48 <_exit>:
 c48:	f8 94       	cli

00000c4a <__stop_program>:
 c4a:	ff cf       	rjmp	.-2      	; 0xc4a <__stop_program>
