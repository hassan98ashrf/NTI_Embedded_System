
project1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000af8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  00000af8  00000b8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000a2  008000a2  00000bce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001cd3  00000000  00000000  00000d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000947  00000000  00000000  00002a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d13  00000000  00000000  00003356  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  0000406c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e2  00000000  00000000  00004268  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001344  00000000  00000000  0000484a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00005b8e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ef       	ldi	r30, 0xF8	; 248
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3a       	cpi	r26, 0xA2	; 162
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 ea       	ldi	r26, 0xA2	; 162
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3a       	cpi	r26, 0xA4	; 164
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 90 03 	call	0x720	; 0x720 <main>
  8a:	0c 94 7a 05 	jmp	0xaf4	; 0xaf4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Ping_Init>:
uint8_t i=1,j=1;


void Ping_Init(void)
{
	DIO_Init();
  92:	0e 94 92 04 	call	0x924	; 0x924 <DIO_Init>
	LCD_Init();
  96:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <LCD_Init>
	LCD_CustomerChar(1,customChar);
  9a:	65 e6       	ldi	r22, 0x65	; 101
  9c:	70 e0       	ldi	r23, 0x00	; 0
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	0e 94 73 03 	call	0x6e6	; 0x6e6 <LCD_CustomerChar>
	LCD_GoTo(4,0);
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	84 e0       	ldi	r24, 0x04	; 4
  a8:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <LCD_GoTo>
	LCD_WriteString("Player1:0  Player2:0");
  ac:	8d e6       	ldi	r24, 0x6D	; 109
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 10 03 	call	0x620	; 0x620 <LCD_WriteString>
  b4:	08 95       	ret

000000b6 <Ping_Play>:



void Ping_Play(void)
{
	LCD_GoTo(ch_2,19);
  b6:	63 e1       	ldi	r22, 0x13	; 19
  b8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ch_2>
  bc:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <LCD_GoTo>
	LCD_WriteChar(1);
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_WriteChar>
	LCD_GoTo(ch_1,0);
  c6:	60 e0       	ldi	r22, 0x00	; 0
  c8:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <ch_1>
  cc:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <LCD_GoTo>
	LCD_WriteChar(1);
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_WriteChar>
	
	
	if (flag_direction)
  d6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <flag_direction>
  da:	88 23       	and	r24, r24
  dc:	09 f4       	brne	.+2      	; 0xe0 <Ping_Play+0x2a>
  de:	d1 c0       	rjmp	.+418    	; 0x282 <Ping_Play+0x1cc>
	{
		if(!DIO_ReadPin(BALL1_DOWN))
  e0:	8f e1       	ldi	r24, 0x1F	; 31
  e2:	0e 94 a2 04 	call	0x944	; 0x944 <DIO_ReadPin>
  e6:	81 11       	cpse	r24, r1
  e8:	18 c0       	rjmp	.+48     	; 0x11a <Ping_Play+0x64>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	2f ef       	ldi	r18, 0xFF	; 255
  ec:	89 ef       	ldi	r24, 0xF9	; 249
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	80 40       	sbci	r24, 0x00	; 0
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <Ping_Play+0x3a>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <Ping_Play+0x44>
  fa:	00 00       	nop
		{
			_delay_ms(20);
			while(!DIO_ReadPin(BALL1_DOWN));
  fc:	8f e1       	ldi	r24, 0x1F	; 31
  fe:	0e 94 a2 04 	call	0x944	; 0x944 <DIO_ReadPin>
 102:	88 23       	and	r24, r24
 104:	d9 f3       	breq	.-10     	; 0xfc <Ping_Play+0x46>
			j++;
 106:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 10a:	8f 5f       	subi	r24, 0xFF	; 255
 10c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			if(j==4)
 110:	84 30       	cpi	r24, 0x04	; 4
 112:	19 f4       	brne	.+6      	; 0x11a <Ping_Play+0x64>
			{
				j=3;
 114:	83 e0       	ldi	r24, 0x03	; 3
 116:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
		}
		if(!DIO_ReadPin(BALL1_UP))
 11a:	8e e1       	ldi	r24, 0x1E	; 30
 11c:	0e 94 a2 04 	call	0x944	; 0x944 <DIO_ReadPin>
 120:	81 11       	cpse	r24, r1
 122:	18 c0       	rjmp	.+48     	; 0x154 <Ping_Play+0x9e>
 124:	2f ef       	ldi	r18, 0xFF	; 255
 126:	89 ef       	ldi	r24, 0xF9	; 249
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <Ping_Play+0x74>
 132:	00 c0       	rjmp	.+0      	; 0x134 <Ping_Play+0x7e>
 134:	00 00       	nop
		{
			
			_delay_ms(20);
			while(!DIO_ReadPin(BALL1_UP));
 136:	8e e1       	ldi	r24, 0x1E	; 30
 138:	0e 94 a2 04 	call	0x944	; 0x944 <DIO_ReadPin>
 13c:	88 23       	and	r24, r24
 13e:	d9 f3       	breq	.-10     	; 0x136 <Ping_Play+0x80>
			j--;
 140:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 144:	81 50       	subi	r24, 0x01	; 1
 146:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			if(j==0)
 14a:	81 11       	cpse	r24, r1
 14c:	03 c0       	rjmp	.+6      	; 0x154 <Ping_Play+0x9e>
			{
				j=1;
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
		}
		
		if(!DIO_ReadPin(PLAYER2_DOWN))
 154:	8d e1       	ldi	r24, 0x1D	; 29
 156:	0e 94 a2 04 	call	0x944	; 0x944 <DIO_ReadPin>
 15a:	81 11       	cpse	r24, r1
 15c:	20 c0       	rjmp	.+64     	; 0x19e <Ping_Play+0xe8>
 15e:	2f ef       	ldi	r18, 0xFF	; 255
 160:	89 ef       	ldi	r24, 0xF9	; 249
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	21 50       	subi	r18, 0x01	; 1
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <Ping_Play+0xae>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <Ping_Play+0xb8>
 16e:	00 00       	nop
		{
			_delay_ms(20);
			while(!DIO_ReadPin(PLAYER2_DOWN));
 170:	8d e1       	ldi	r24, 0x1D	; 29
 172:	0e 94 a2 04 	call	0x944	; 0x944 <DIO_ReadPin>
 176:	88 23       	and	r24, r24
 178:	d9 f3       	breq	.-10     	; 0x170 <Ping_Play+0xba>
			LCD_GoTo(ch_2,19);
 17a:	63 e1       	ldi	r22, 0x13	; 19
 17c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ch_2>
 180:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <LCD_GoTo>
			LCD_WriteChar(' ');
 184:	80 e2       	ldi	r24, 0x20	; 32
 186:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_WriteChar>
			ch_2++;
 18a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ch_2>
 18e:	8f 5f       	subi	r24, 0xFF	; 255
 190:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <ch_2>
			
			if(ch_2==4)
 194:	84 30       	cpi	r24, 0x04	; 4
 196:	19 f4       	brne	.+6      	; 0x19e <Ping_Play+0xe8>
			{
				ch_2=3;
 198:	83 e0       	ldi	r24, 0x03	; 3
 19a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <ch_2>
			}
		}
		
		if(!DIO_ReadPin(PLAYER2_UP))
 19e:	8b e1       	ldi	r24, 0x1B	; 27
 1a0:	0e 94 a2 04 	call	0x944	; 0x944 <DIO_ReadPin>
 1a4:	81 11       	cpse	r24, r1
 1a6:	20 c0       	rjmp	.+64     	; 0x1e8 <Ping_Play+0x132>
 1a8:	2f ef       	ldi	r18, 0xFF	; 255
 1aa:	89 ef       	ldi	r24, 0xF9	; 249
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	21 50       	subi	r18, 0x01	; 1
 1b0:	80 40       	sbci	r24, 0x00	; 0
 1b2:	90 40       	sbci	r25, 0x00	; 0
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <Ping_Play+0xf8>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <Ping_Play+0x102>
 1b8:	00 00       	nop
		{
			_delay_ms(20);
			while(!DIO_ReadPin(PLAYER2_UP));
 1ba:	8b e1       	ldi	r24, 0x1B	; 27
 1bc:	0e 94 a2 04 	call	0x944	; 0x944 <DIO_ReadPin>
 1c0:	88 23       	and	r24, r24
 1c2:	d9 f3       	breq	.-10     	; 0x1ba <Ping_Play+0x104>
			LCD_GoTo(ch_2,19);
 1c4:	63 e1       	ldi	r22, 0x13	; 19
 1c6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ch_2>
 1ca:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <LCD_GoTo>
			LCD_WriteChar(' ');
 1ce:	80 e2       	ldi	r24, 0x20	; 32
 1d0:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_WriteChar>
			ch_2--;
 1d4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ch_2>
 1d8:	81 50       	subi	r24, 0x01	; 1
 1da:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <ch_2>
			if(ch_2==0)
 1de:	81 11       	cpse	r24, r1
 1e0:	03 c0       	rjmp	.+6      	; 0x1e8 <Ping_Play+0x132>
			{
				ch_2=1;
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <ch_2>
			}
		}
		
		LCD_GoTo(j,i);
 1e8:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <i>
 1ec:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1f0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <LCD_GoTo>
		LCD_WriteChar('0');
 1f4:	80 e3       	ldi	r24, 0x30	; 48
 1f6:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_WriteChar>
 1fa:	2f ef       	ldi	r18, 0xFF	; 255
 1fc:	85 ea       	ldi	r24, 0xA5	; 165
 1fe:	9e e0       	ldi	r25, 0x0E	; 14
 200:	21 50       	subi	r18, 0x01	; 1
 202:	80 40       	sbci	r24, 0x00	; 0
 204:	90 40       	sbci	r25, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <Ping_Play+0x14a>
 208:	00 c0       	rjmp	.+0      	; 0x20a <Ping_Play+0x154>
 20a:	00 00       	nop
		_delay_ms(300);
		LCD_GoTo(j,i);
 20c:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <i>
 210:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 214:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <LCD_GoTo>
		LCD_WriteChar(' ');
 218:	80 e2       	ldi	r24, 0x20	; 32
 21a:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_WriteChar>
		i++;
 21e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
 222:	8f 5f       	subi	r24, 0xFF	; 255
 224:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <i>
		if (i==18)
 228:	82 31       	cpi	r24, 0x12	; 18
 22a:	09 f0       	breq	.+2      	; 0x22e <Ping_Play+0x178>
 22c:	fa c0       	rjmp	.+500    	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
		{
			if(j!=ch_2)
 22e:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 232:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ch_2>
 236:	98 17       	cp	r25, r24
 238:	09 f1       	breq	.+66     	; 0x27c <Ping_Play+0x1c6>
			{
				DIO_WritePin(PUZ,HIGH);
 23a:	61 e0       	ldi	r22, 0x01	; 1
 23c:	86 e1       	ldi	r24, 0x16	; 22
 23e:	0e 94 d5 04 	call	0x9aa	; 0x9aa <DIO_WritePin>
 242:	2f ef       	ldi	r18, 0xFF	; 255
 244:	85 ea       	ldi	r24, 0xA5	; 165
 246:	9e e0       	ldi	r25, 0x0E	; 14
 248:	21 50       	subi	r18, 0x01	; 1
 24a:	80 40       	sbci	r24, 0x00	; 0
 24c:	90 40       	sbci	r25, 0x00	; 0
 24e:	e1 f7       	brne	.-8      	; 0x248 <Ping_Play+0x192>
 250:	00 c0       	rjmp	.+0      	; 0x252 <Ping_Play+0x19c>
 252:	00 00       	nop
				_delay_ms(300);
				DIO_WritePin(PUZ,LOW);
 254:	60 e0       	ldi	r22, 0x00	; 0
 256:	86 e1       	ldi	r24, 0x16	; 22
 258:	0e 94 d5 04 	call	0x9aa	; 0x9aa <DIO_WritePin>
				score1++;
 25c:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <score1>
 260:	8f 5f       	subi	r24, 0xFF	; 255
 262:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <score1>
				LCD_GoTo(4,8);
 266:	68 e0       	ldi	r22, 0x08	; 8
 268:	84 e0       	ldi	r24, 0x04	; 4
 26a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <LCD_GoTo>
				LCD_WriteNumber(score1);
 26e:	60 91 a3 00 	lds	r22, 0x00A3	; 0x8000a3 <score1>
 272:	70 e0       	ldi	r23, 0x00	; 0
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 23 03 	call	0x646	; 0x646 <LCD_WriteNumber>
			}
			flag_direction=0;
 27c:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <flag_direction>
 280:	08 95       	ret

	}
	else
	{
		
		if(!DIO_ReadPin(BALL2_DOWN))
 282:	8d e1       	ldi	r24, 0x1D	; 29
 284:	0e 94 a2 04 	call	0x944	; 0x944 <DIO_ReadPin>
 288:	81 11       	cpse	r24, r1
 28a:	18 c0       	rjmp	.+48     	; 0x2bc <Ping_Play+0x206>
 28c:	2f ef       	ldi	r18, 0xFF	; 255
 28e:	89 ef       	ldi	r24, 0xF9	; 249
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	21 50       	subi	r18, 0x01	; 1
 294:	80 40       	sbci	r24, 0x00	; 0
 296:	90 40       	sbci	r25, 0x00	; 0
 298:	e1 f7       	brne	.-8      	; 0x292 <Ping_Play+0x1dc>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <Ping_Play+0x1e6>
 29c:	00 00       	nop
		{
			_delay_ms(20);
			while(!DIO_ReadPin(BALL2_DOWN));
 29e:	8d e1       	ldi	r24, 0x1D	; 29
 2a0:	0e 94 a2 04 	call	0x944	; 0x944 <DIO_ReadPin>
 2a4:	88 23       	and	r24, r24
 2a6:	d9 f3       	breq	.-10     	; 0x29e <Ping_Play+0x1e8>
			j++;
 2a8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2ac:	8f 5f       	subi	r24, 0xFF	; 255
 2ae:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			if(j==4)
 2b2:	84 30       	cpi	r24, 0x04	; 4
 2b4:	19 f4       	brne	.+6      	; 0x2bc <Ping_Play+0x206>
			{
				j=3;
 2b6:	83 e0       	ldi	r24, 0x03	; 3
 2b8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
		}
		if(!DIO_ReadPin(BALL2_UP))
 2bc:	8b e1       	ldi	r24, 0x1B	; 27
 2be:	0e 94 a2 04 	call	0x944	; 0x944 <DIO_ReadPin>
 2c2:	81 11       	cpse	r24, r1
 2c4:	18 c0       	rjmp	.+48     	; 0x2f6 <Ping_Play+0x240>
 2c6:	2f ef       	ldi	r18, 0xFF	; 255
 2c8:	89 ef       	ldi	r24, 0xF9	; 249
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	21 50       	subi	r18, 0x01	; 1
 2ce:	80 40       	sbci	r24, 0x00	; 0
 2d0:	90 40       	sbci	r25, 0x00	; 0
 2d2:	e1 f7       	brne	.-8      	; 0x2cc <Ping_Play+0x216>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <Ping_Play+0x220>
 2d6:	00 00       	nop
		{
			_delay_ms(20);
			while(!DIO_ReadPin(BALL2_UP));
 2d8:	8b e1       	ldi	r24, 0x1B	; 27
 2da:	0e 94 a2 04 	call	0x944	; 0x944 <DIO_ReadPin>
 2de:	88 23       	and	r24, r24
 2e0:	d9 f3       	breq	.-10     	; 0x2d8 <Ping_Play+0x222>
			j--;
 2e2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2e6:	81 50       	subi	r24, 0x01	; 1
 2e8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			if(j==0)
 2ec:	81 11       	cpse	r24, r1
 2ee:	03 c0       	rjmp	.+6      	; 0x2f6 <Ping_Play+0x240>
			{
				j=1;
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
		}
		
		if(!DIO_ReadPin(PLAYER1_DOWN))
 2f6:	8f e1       	ldi	r24, 0x1F	; 31
 2f8:	0e 94 a2 04 	call	0x944	; 0x944 <DIO_ReadPin>
 2fc:	81 11       	cpse	r24, r1
 2fe:	20 c0       	rjmp	.+64     	; 0x340 <Ping_Play+0x28a>
 300:	2f ef       	ldi	r18, 0xFF	; 255
 302:	89 ef       	ldi	r24, 0xF9	; 249
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	21 50       	subi	r18, 0x01	; 1
 308:	80 40       	sbci	r24, 0x00	; 0
 30a:	90 40       	sbci	r25, 0x00	; 0
 30c:	e1 f7       	brne	.-8      	; 0x306 <Ping_Play+0x250>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <Ping_Play+0x25a>
 310:	00 00       	nop
		{
			_delay_ms(20);
			while(!DIO_ReadPin(PLAYER1_DOWN));
 312:	8f e1       	ldi	r24, 0x1F	; 31
 314:	0e 94 a2 04 	call	0x944	; 0x944 <DIO_ReadPin>
 318:	88 23       	and	r24, r24
 31a:	d9 f3       	breq	.-10     	; 0x312 <Ping_Play+0x25c>
			LCD_GoTo(ch_1,0);
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <ch_1>
 322:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <LCD_GoTo>
			LCD_WriteChar(' ');
 326:	80 e2       	ldi	r24, 0x20	; 32
 328:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_WriteChar>
			ch_1++;
 32c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <ch_1>
 330:	8f 5f       	subi	r24, 0xFF	; 255
 332:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <ch_1>
			if(ch_1==4)
 336:	84 30       	cpi	r24, 0x04	; 4
 338:	19 f4       	brne	.+6      	; 0x340 <Ping_Play+0x28a>
			{
				ch_1=3;
 33a:	83 e0       	ldi	r24, 0x03	; 3
 33c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <ch_1>
			}
		}
		
		if(!DIO_ReadPin(PLAYER1_UP))
 340:	8e e1       	ldi	r24, 0x1E	; 30
 342:	0e 94 a2 04 	call	0x944	; 0x944 <DIO_ReadPin>
 346:	81 11       	cpse	r24, r1
 348:	20 c0       	rjmp	.+64     	; 0x38a <Ping_Play+0x2d4>
 34a:	2f ef       	ldi	r18, 0xFF	; 255
 34c:	89 ef       	ldi	r24, 0xF9	; 249
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	21 50       	subi	r18, 0x01	; 1
 352:	80 40       	sbci	r24, 0x00	; 0
 354:	90 40       	sbci	r25, 0x00	; 0
 356:	e1 f7       	brne	.-8      	; 0x350 <Ping_Play+0x29a>
 358:	00 c0       	rjmp	.+0      	; 0x35a <Ping_Play+0x2a4>
 35a:	00 00       	nop
		{
			_delay_ms(20);
			while(!DIO_ReadPin(PLAYER1_UP));
 35c:	8e e1       	ldi	r24, 0x1E	; 30
 35e:	0e 94 a2 04 	call	0x944	; 0x944 <DIO_ReadPin>
 362:	88 23       	and	r24, r24
 364:	d9 f3       	breq	.-10     	; 0x35c <Ping_Play+0x2a6>
			LCD_GoTo(ch_1,0);
 366:	60 e0       	ldi	r22, 0x00	; 0
 368:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <ch_1>
 36c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <LCD_GoTo>
			LCD_WriteChar(' ');
 370:	80 e2       	ldi	r24, 0x20	; 32
 372:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_WriteChar>
			ch_1--;
 376:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <ch_1>
 37a:	81 50       	subi	r24, 0x01	; 1
 37c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <ch_1>
			if(ch_1==0)
 380:	81 11       	cpse	r24, r1
 382:	03 c0       	rjmp	.+6      	; 0x38a <Ping_Play+0x2d4>
			{
				ch_1=1;
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <ch_1>
			}
		}
		
		LCD_GoTo(j,i);
 38a:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <i>
 38e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 392:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <LCD_GoTo>
		LCD_WriteChar('0');
 396:	80 e3       	ldi	r24, 0x30	; 48
 398:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_WriteChar>
 39c:	2f ef       	ldi	r18, 0xFF	; 255
 39e:	85 ea       	ldi	r24, 0xA5	; 165
 3a0:	9e e0       	ldi	r25, 0x0E	; 14
 3a2:	21 50       	subi	r18, 0x01	; 1
 3a4:	80 40       	sbci	r24, 0x00	; 0
 3a6:	90 40       	sbci	r25, 0x00	; 0
 3a8:	e1 f7       	brne	.-8      	; 0x3a2 <Ping_Play+0x2ec>
 3aa:	00 c0       	rjmp	.+0      	; 0x3ac <Ping_Play+0x2f6>
 3ac:	00 00       	nop
		_delay_ms(300);
		LCD_GoTo(j,i);
 3ae:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <i>
 3b2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3b6:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <LCD_GoTo>
		LCD_WriteChar(' ');
 3ba:	80 e2       	ldi	r24, 0x20	; 32
 3bc:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_WriteChar>
		i--;
 3c0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
 3c4:	81 50       	subi	r24, 0x01	; 1
 3c6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <i>
		if (i==1)
 3ca:	81 30       	cpi	r24, 0x01	; 1
 3cc:	51 f5       	brne	.+84     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
		{
			if(j!=ch_1)
 3ce:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3d2:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <ch_1>
 3d6:	98 17       	cp	r25, r24
 3d8:	09 f1       	breq	.+66     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
			{
				DIO_WritePin(PUZ,HIGH);
 3da:	61 e0       	ldi	r22, 0x01	; 1
 3dc:	86 e1       	ldi	r24, 0x16	; 22
 3de:	0e 94 d5 04 	call	0x9aa	; 0x9aa <DIO_WritePin>
 3e2:	2f ef       	ldi	r18, 0xFF	; 255
 3e4:	85 ea       	ldi	r24, 0xA5	; 165
 3e6:	9e e0       	ldi	r25, 0x0E	; 14
 3e8:	21 50       	subi	r18, 0x01	; 1
 3ea:	80 40       	sbci	r24, 0x00	; 0
 3ec:	90 40       	sbci	r25, 0x00	; 0
 3ee:	e1 f7       	brne	.-8      	; 0x3e8 <Ping_Play+0x332>
 3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <Ping_Play+0x33c>
 3f2:	00 00       	nop
				_delay_ms(300);
				DIO_WritePin(PUZ,LOW);
 3f4:	60 e0       	ldi	r22, 0x00	; 0
 3f6:	86 e1       	ldi	r24, 0x16	; 22
 3f8:	0e 94 d5 04 	call	0x9aa	; 0x9aa <DIO_WritePin>
				score2++;
 3fc:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__data_end>
 400:	8f 5f       	subi	r24, 0xFF	; 255
 402:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__data_end>
				LCD_GoTo(4,19);
 406:	63 e1       	ldi	r22, 0x13	; 19
 408:	84 e0       	ldi	r24, 0x04	; 4
 40a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <LCD_GoTo>
				LCD_WriteNumber(score2);
 40e:	60 91 a2 00 	lds	r22, 0x00A2	; 0x8000a2 <__data_end>
 412:	70 e0       	ldi	r23, 0x00	; 0
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0e 94 23 03 	call	0x646	; 0x646 <LCD_WriteNumber>
			}
			flag_direction=1;
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <flag_direction>
 422:	08 95       	ret

00000424 <WriteIns>:
	_delay_ms(1);
	WriteIns(0x06);
}
#else
static void WriteIns(uint8_t ins)
{
 424:	cf 93       	push	r28
 426:	c8 2f       	mov	r28, r24
	DIO_WritePin(RS,LOW);
 428:	60 e0       	ldi	r22, 0x00	; 0
 42a:	83 e0       	ldi	r24, 0x03	; 3
 42c:	0e 94 d5 04 	call	0x9aa	; 0x9aa <DIO_WritePin>
	DIO_WritePin(D7,READ_BIT(ins,7));
 430:	6c 2f       	mov	r22, r28
 432:	66 1f       	adc	r22, r22
 434:	66 27       	eor	r22, r22
 436:	66 1f       	adc	r22, r22
 438:	8c e0       	ldi	r24, 0x0C	; 12
 43a:	0e 94 d5 04 	call	0x9aa	; 0x9aa <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(ins,6));
 43e:	c6 fb       	bst	r28, 6
 440:	66 27       	eor	r22, r22
 442:	60 f9       	bld	r22, 0
 444:	8a e0       	ldi	r24, 0x0A	; 10
 446:	0e 94 d5 04 	call	0x9aa	; 0x9aa <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(ins,5));
 44a:	c5 fb       	bst	r28, 5
 44c:	66 27       	eor	r22, r22
 44e:	60 f9       	bld	r22, 0
 450:	89 e0       	ldi	r24, 0x09	; 9
 452:	0e 94 d5 04 	call	0x9aa	; 0x9aa <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(ins,4));
 456:	c4 fb       	bst	r28, 4
 458:	66 27       	eor	r22, r22
 45a:	60 f9       	bld	r22, 0
 45c:	88 e0       	ldi	r24, 0x08	; 8
 45e:	0e 94 d5 04 	call	0x9aa	; 0x9aa <DIO_WritePin>
	DIO_WritePin(EN,HIGH);
 462:	61 e0       	ldi	r22, 0x01	; 1
 464:	82 e0       	ldi	r24, 0x02	; 2
 466:	0e 94 d5 04 	call	0x9aa	; 0x9aa <DIO_WritePin>
 46a:	8f e9       	ldi	r24, 0x9F	; 159
 46c:	9f e0       	ldi	r25, 0x0F	; 15
 46e:	01 97       	sbiw	r24, 0x01	; 1
 470:	f1 f7       	brne	.-4      	; 0x46e <WriteIns+0x4a>
 472:	00 c0       	rjmp	.+0      	; 0x474 <WriteIns+0x50>
 474:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
 476:	60 e0       	ldi	r22, 0x00	; 0
 478:	82 e0       	ldi	r24, 0x02	; 2
 47a:	0e 94 d5 04 	call	0x9aa	; 0x9aa <DIO_WritePin>
 47e:	8f e9       	ldi	r24, 0x9F	; 159
 480:	9f e0       	ldi	r25, 0x0F	; 15
 482:	01 97       	sbiw	r24, 0x01	; 1
 484:	f1 f7       	brne	.-4      	; 0x482 <WriteIns+0x5e>
 486:	00 c0       	rjmp	.+0      	; 0x488 <WriteIns+0x64>
 488:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(D7,READ_BIT(ins,3));
 48a:	c3 fb       	bst	r28, 3
 48c:	66 27       	eor	r22, r22
 48e:	60 f9       	bld	r22, 0
 490:	8c e0       	ldi	r24, 0x0C	; 12
 492:	0e 94 d5 04 	call	0x9aa	; 0x9aa <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(ins,2));
 496:	c2 fb       	bst	r28, 2
 498:	66 27       	eor	r22, r22
 49a:	60 f9       	bld	r22, 0
 49c:	8a e0       	ldi	r24, 0x0A	; 10
 49e:	0e 94 d5 04 	call	0x9aa	; 0x9aa <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(ins,1));
 4a2:	c1 fb       	bst	r28, 1
 4a4:	66 27       	eor	r22, r22
 4a6:	60 f9       	bld	r22, 0
 4a8:	89 e0       	ldi	r24, 0x09	; 9
 4aa:	0e 94 d5 04 	call	0x9aa	; 0x9aa <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(ins,0));
 4ae:	6c 2f       	mov	r22, r28
 4b0:	61 70       	andi	r22, 0x01	; 1
 4b2:	88 e0       	ldi	r24, 0x08	; 8
 4b4:	0e 94 d5 04 	call	0x9aa	; 0x9aa <DIO_WritePin>
	DIO_WritePin(EN,HIGH);
 4b8:	61 e0       	ldi	r22, 0x01	; 1
 4ba:	82 e0       	ldi	r24, 0x02	; 2
 4bc:	0e 94 d5 04 	call	0x9aa	; 0x9aa <DIO_WritePin>
 4c0:	8f e9       	ldi	r24, 0x9F	; 159
 4c2:	9f e0       	ldi	r25, 0x0F	; 15
 4c4:	01 97       	sbiw	r24, 0x01	; 1
 4c6:	f1 f7       	brne	.-4      	; 0x4c4 <WriteIns+0xa0>
 4c8:	00 c0       	rjmp	.+0      	; 0x4ca <WriteIns+0xa6>
 4ca:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
 4cc:	60 e0       	ldi	r22, 0x00	; 0
 4ce:	82 e0       	ldi	r24, 0x02	; 2
 4d0:	0e 94 d5 04 	call	0x9aa	; 0x9aa <DIO_WritePin>
 4d4:	8f e9       	ldi	r24, 0x9F	; 159
 4d6:	9f e0       	ldi	r25, 0x0F	; 15
 4d8:	01 97       	sbiw	r24, 0x01	; 1
 4da:	f1 f7       	brne	.-4      	; 0x4d8 <WriteIns+0xb4>
 4dc:	00 c0       	rjmp	.+0      	; 0x4de <WriteIns+0xba>
 4de:	00 00       	nop
	_delay_ms(1);
}
 4e0:	cf 91       	pop	r28
 4e2:	08 95       	ret

000004e4 <WriteData>:
static void WriteData(uint8_t data)
{
 4e4:	cf 93       	push	r28
 4e6:	c8 2f       	mov	r28, r24
	DIO_WritePin(RS,HIGH);
 4e8:	61 e0       	ldi	r22, 0x01	; 1
 4ea:	83 e0       	ldi	r24, 0x03	; 3
 4ec:	0e 94 d5 04 	call	0x9aa	; 0x9aa <DIO_WritePin>
	DIO_WritePin(D7,READ_BIT(data,7));
 4f0:	6c 2f       	mov	r22, r28
 4f2:	66 1f       	adc	r22, r22
 4f4:	66 27       	eor	r22, r22
 4f6:	66 1f       	adc	r22, r22
 4f8:	8c e0       	ldi	r24, 0x0C	; 12
 4fa:	0e 94 d5 04 	call	0x9aa	; 0x9aa <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(data,6));
 4fe:	c6 fb       	bst	r28, 6
 500:	66 27       	eor	r22, r22
 502:	60 f9       	bld	r22, 0
 504:	8a e0       	ldi	r24, 0x0A	; 10
 506:	0e 94 d5 04 	call	0x9aa	; 0x9aa <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(data,5));
 50a:	c5 fb       	bst	r28, 5
 50c:	66 27       	eor	r22, r22
 50e:	60 f9       	bld	r22, 0
 510:	89 e0       	ldi	r24, 0x09	; 9
 512:	0e 94 d5 04 	call	0x9aa	; 0x9aa <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(data,4));
 516:	c4 fb       	bst	r28, 4
 518:	66 27       	eor	r22, r22
 51a:	60 f9       	bld	r22, 0
 51c:	88 e0       	ldi	r24, 0x08	; 8
 51e:	0e 94 d5 04 	call	0x9aa	; 0x9aa <DIO_WritePin>
	DIO_WritePin(EN,HIGH);
 522:	61 e0       	ldi	r22, 0x01	; 1
 524:	82 e0       	ldi	r24, 0x02	; 2
 526:	0e 94 d5 04 	call	0x9aa	; 0x9aa <DIO_WritePin>
 52a:	8f e9       	ldi	r24, 0x9F	; 159
 52c:	9f e0       	ldi	r25, 0x0F	; 15
 52e:	01 97       	sbiw	r24, 0x01	; 1
 530:	f1 f7       	brne	.-4      	; 0x52e <WriteData+0x4a>
 532:	00 c0       	rjmp	.+0      	; 0x534 <WriteData+0x50>
 534:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
 536:	60 e0       	ldi	r22, 0x00	; 0
 538:	82 e0       	ldi	r24, 0x02	; 2
 53a:	0e 94 d5 04 	call	0x9aa	; 0x9aa <DIO_WritePin>
 53e:	8f e9       	ldi	r24, 0x9F	; 159
 540:	9f e0       	ldi	r25, 0x0F	; 15
 542:	01 97       	sbiw	r24, 0x01	; 1
 544:	f1 f7       	brne	.-4      	; 0x542 <WriteData+0x5e>
 546:	00 c0       	rjmp	.+0      	; 0x548 <WriteData+0x64>
 548:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(D7,READ_BIT(data,3));
 54a:	c3 fb       	bst	r28, 3
 54c:	66 27       	eor	r22, r22
 54e:	60 f9       	bld	r22, 0
 550:	8c e0       	ldi	r24, 0x0C	; 12
 552:	0e 94 d5 04 	call	0x9aa	; 0x9aa <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(data,2));
 556:	c2 fb       	bst	r28, 2
 558:	66 27       	eor	r22, r22
 55a:	60 f9       	bld	r22, 0
 55c:	8a e0       	ldi	r24, 0x0A	; 10
 55e:	0e 94 d5 04 	call	0x9aa	; 0x9aa <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(data,1));
 562:	c1 fb       	bst	r28, 1
 564:	66 27       	eor	r22, r22
 566:	60 f9       	bld	r22, 0
 568:	89 e0       	ldi	r24, 0x09	; 9
 56a:	0e 94 d5 04 	call	0x9aa	; 0x9aa <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(data,0));
 56e:	6c 2f       	mov	r22, r28
 570:	61 70       	andi	r22, 0x01	; 1
 572:	88 e0       	ldi	r24, 0x08	; 8
 574:	0e 94 d5 04 	call	0x9aa	; 0x9aa <DIO_WritePin>
	DIO_WritePin(EN,HIGH);
 578:	61 e0       	ldi	r22, 0x01	; 1
 57a:	82 e0       	ldi	r24, 0x02	; 2
 57c:	0e 94 d5 04 	call	0x9aa	; 0x9aa <DIO_WritePin>
 580:	8f e9       	ldi	r24, 0x9F	; 159
 582:	9f e0       	ldi	r25, 0x0F	; 15
 584:	01 97       	sbiw	r24, 0x01	; 1
 586:	f1 f7       	brne	.-4      	; 0x584 <WriteData+0xa0>
 588:	00 c0       	rjmp	.+0      	; 0x58a <WriteData+0xa6>
 58a:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
 58c:	60 e0       	ldi	r22, 0x00	; 0
 58e:	82 e0       	ldi	r24, 0x02	; 2
 590:	0e 94 d5 04 	call	0x9aa	; 0x9aa <DIO_WritePin>
 594:	8f e9       	ldi	r24, 0x9F	; 159
 596:	9f e0       	ldi	r25, 0x0F	; 15
 598:	01 97       	sbiw	r24, 0x01	; 1
 59a:	f1 f7       	brne	.-4      	; 0x598 <WriteData+0xb4>
 59c:	00 c0       	rjmp	.+0      	; 0x59e <WriteData+0xba>
 59e:	00 00       	nop
	_delay_ms(1);
}
 5a0:	cf 91       	pop	r28
 5a2:	08 95       	ret

000005a4 <LCD_Init>:
 5a4:	2f e7       	ldi	r18, 0x7F	; 127
 5a6:	85 eb       	ldi	r24, 0xB5	; 181
 5a8:	91 e0       	ldi	r25, 0x01	; 1
 5aa:	21 50       	subi	r18, 0x01	; 1
 5ac:	80 40       	sbci	r24, 0x00	; 0
 5ae:	90 40       	sbci	r25, 0x00	; 0
 5b0:	e1 f7       	brne	.-8      	; 0x5aa <LCD_Init+0x6>
 5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <LCD_Init+0x10>
 5b4:	00 00       	nop
void LCD_Init(void)
{
	_delay_ms(35);
	WriteIns(0x02);// set function
 5b6:	82 e0       	ldi	r24, 0x02	; 2
 5b8:	0e 94 12 02 	call	0x424	; 0x424 <WriteIns>
	WriteIns(0x28);
 5bc:	88 e2       	ldi	r24, 0x28	; 40
 5be:	0e 94 12 02 	call	0x424	; 0x424 <WriteIns>
	WriteIns(0x0c);//0x0c  , 0x0e  cursor enable
 5c2:	8c e0       	ldi	r24, 0x0C	; 12
 5c4:	0e 94 12 02 	call	0x424	; 0x424 <WriteIns>
	WriteIns(0x01);//clear
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	0e 94 12 02 	call	0x424	; 0x424 <WriteIns>
 5ce:	8f e9       	ldi	r24, 0x9F	; 159
 5d0:	9f e0       	ldi	r25, 0x0F	; 15
 5d2:	01 97       	sbiw	r24, 0x01	; 1
 5d4:	f1 f7       	brne	.-4      	; 0x5d2 <LCD_Init+0x2e>
 5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <LCD_Init+0x34>
 5d8:	00 00       	nop
	_delay_ms(1);
	WriteIns(0x06);
 5da:	86 e0       	ldi	r24, 0x06	; 6
 5dc:	0e 94 12 02 	call	0x424	; 0x424 <WriteIns>
 5e0:	08 95       	ret

000005e2 <LCD_GoTo>:
}
#endif

void LCD_GoTo(uint8_t line,uint8_t cell)
{
	if (line ==1)
 5e2:	81 30       	cpi	r24, 0x01	; 1
 5e4:	29 f4       	brne	.+10     	; 0x5f0 <LCD_GoTo+0xe>
	{
		WriteIns(0x80+cell);
 5e6:	80 e8       	ldi	r24, 0x80	; 128
 5e8:	86 0f       	add	r24, r22
 5ea:	0e 94 12 02 	call	0x424	; 0x424 <WriteIns>
 5ee:	08 95       	ret

	}
	else if (line==2)
 5f0:	82 30       	cpi	r24, 0x02	; 2
 5f2:	29 f4       	brne	.+10     	; 0x5fe <LCD_GoTo+0x1c>
	{
		WriteIns(0xc0+cell);
 5f4:	80 ec       	ldi	r24, 0xC0	; 192
 5f6:	86 0f       	add	r24, r22
 5f8:	0e 94 12 02 	call	0x424	; 0x424 <WriteIns>
 5fc:	08 95       	ret
	}
	else if (line==3)
 5fe:	83 30       	cpi	r24, 0x03	; 3
 600:	29 f4       	brne	.+10     	; 0x60c <LCD_GoTo+0x2a>
	{
		WriteIns(0x94+cell);
 602:	84 e9       	ldi	r24, 0x94	; 148
 604:	86 0f       	add	r24, r22
 606:	0e 94 12 02 	call	0x424	; 0x424 <WriteIns>
 60a:	08 95       	ret
	}
	else if (line==4)
 60c:	84 30       	cpi	r24, 0x04	; 4
 60e:	21 f4       	brne	.+8      	; 0x618 <LCD_GoTo+0x36>
	{
		WriteIns(0xd4+cell);
 610:	84 ed       	ldi	r24, 0xD4	; 212
 612:	86 0f       	add	r24, r22
 614:	0e 94 12 02 	call	0x424	; 0x424 <WriteIns>
 618:	08 95       	ret

0000061a <LCD_WriteChar>:
	
}

void LCD_WriteChar(uint8_t ch)
{
	WriteData(ch);
 61a:	0e 94 72 02 	call	0x4e4	; 0x4e4 <WriteData>
 61e:	08 95       	ret

00000620 <LCD_WriteString>:
}

void LCD_WriteString(char* str)
{
 620:	0f 93       	push	r16
 622:	1f 93       	push	r17
 624:	cf 93       	push	r28
 626:	8c 01       	movw	r16, r24
	uint8_t i=0;
	for (i=0;str[i];i++)
 628:	c0 e0       	ldi	r28, 0x00	; 0
 62a:	03 c0       	rjmp	.+6      	; 0x632 <LCD_WriteString+0x12>
	{
		WriteData(str[i]);
 62c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <WriteData>
}

void LCD_WriteString(char* str)
{
	uint8_t i=0;
	for (i=0;str[i];i++)
 630:	cf 5f       	subi	r28, 0xFF	; 255
 632:	f8 01       	movw	r30, r16
 634:	ec 0f       	add	r30, r28
 636:	f1 1d       	adc	r31, r1
 638:	80 81       	ld	r24, Z
 63a:	81 11       	cpse	r24, r1
 63c:	f7 cf       	rjmp	.-18     	; 0x62c <LCD_WriteString+0xc>
	{
		WriteData(str[i]);
	}
}
 63e:	cf 91       	pop	r28
 640:	1f 91       	pop	r17
 642:	0f 91       	pop	r16
 644:	08 95       	ret

00000646 <LCD_WriteNumber>:


void LCD_WriteNumber(uint32_t num)
{
 646:	cf 92       	push	r12
 648:	df 92       	push	r13
 64a:	ef 92       	push	r14
 64c:	ff 92       	push	r15
 64e:	1f 93       	push	r17
 650:	cf 93       	push	r28
 652:	df 93       	push	r29
 654:	cd b7       	in	r28, 0x3d	; 61
 656:	de b7       	in	r29, 0x3e	; 62
 658:	2a 97       	sbiw	r28, 0x0a	; 10
 65a:	0f b6       	in	r0, 0x3f	; 63
 65c:	f8 94       	cli
 65e:	de bf       	out	0x3e, r29	; 62
 660:	0f be       	out	0x3f, r0	; 63
 662:	cd bf       	out	0x3d, r28	; 61
 664:	6b 01       	movw	r12, r22
 666:	7c 01       	movw	r14, r24
	uint8_t str[10],i;
	
	
	if (num==0)
 668:	67 2b       	or	r22, r23
 66a:	68 2b       	or	r22, r24
 66c:	69 2b       	or	r22, r25
 66e:	19 f4       	brne	.+6      	; 0x676 <LCD_WriteNumber+0x30>
	{
		LCD_WriteChar('0');
 670:	80 e3       	ldi	r24, 0x30	; 48
 672:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_WriteChar>
	}
}


void LCD_WriteNumber(uint32_t num)
{
 676:	10 e0       	ldi	r17, 0x00	; 0
 678:	15 c0       	rjmp	.+42     	; 0x6a4 <LCD_WriteNumber+0x5e>
		num = num*-1;
	}
	
	for (i=0;num>0;i++)
	{
		str[i] = ((num%10)+'0');
 67a:	c7 01       	movw	r24, r14
 67c:	b6 01       	movw	r22, r12
 67e:	2a e0       	ldi	r18, 0x0A	; 10
 680:	30 e0       	ldi	r19, 0x00	; 0
 682:	40 e0       	ldi	r20, 0x00	; 0
 684:	50 e0       	ldi	r21, 0x00	; 0
 686:	0e 94 58 05 	call	0xab0	; 0xab0 <__udivmodsi4>
 68a:	e1 e0       	ldi	r30, 0x01	; 1
 68c:	f0 e0       	ldi	r31, 0x00	; 0
 68e:	ec 0f       	add	r30, r28
 690:	fd 1f       	adc	r31, r29
 692:	e1 0f       	add	r30, r17
 694:	f1 1d       	adc	r31, r1
 696:	60 5d       	subi	r22, 0xD0	; 208
 698:	60 83       	st	Z, r22
		num = num/10;
 69a:	c2 2e       	mov	r12, r18
 69c:	d3 2e       	mov	r13, r19
 69e:	e4 2e       	mov	r14, r20
 6a0:	f5 2e       	mov	r15, r21
	{
		LCD_WriteChar('-');
		num = num*-1;
	}
	
	for (i=0;num>0;i++)
 6a2:	1f 5f       	subi	r17, 0xFF	; 255
 6a4:	c1 14       	cp	r12, r1
 6a6:	d1 04       	cpc	r13, r1
 6a8:	e1 04       	cpc	r14, r1
 6aa:	f1 04       	cpc	r15, r1
 6ac:	31 f7       	brne	.-52     	; 0x67a <LCD_WriteNumber+0x34>
	{
		str[i] = ((num%10)+'0');
		num = num/10;
	}
	for (i=i-1;i!=255;i--)
 6ae:	11 50       	subi	r17, 0x01	; 1
 6b0:	0a c0       	rjmp	.+20     	; 0x6c6 <LCD_WriteNumber+0x80>
	{
		LCD_WriteChar(str[i]);
 6b2:	e1 e0       	ldi	r30, 0x01	; 1
 6b4:	f0 e0       	ldi	r31, 0x00	; 0
 6b6:	ec 0f       	add	r30, r28
 6b8:	fd 1f       	adc	r31, r29
 6ba:	e1 0f       	add	r30, r17
 6bc:	f1 1d       	adc	r31, r1
 6be:	80 81       	ld	r24, Z
 6c0:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_WriteChar>
	for (i=0;num>0;i++)
	{
		str[i] = ((num%10)+'0');
		num = num/10;
	}
	for (i=i-1;i!=255;i--)
 6c4:	11 50       	subi	r17, 0x01	; 1
 6c6:	1f 3f       	cpi	r17, 0xFF	; 255
 6c8:	a1 f7       	brne	.-24     	; 0x6b2 <LCD_WriteNumber+0x6c>
	{
		LCD_WriteChar(str[i]);
	}
	
}
 6ca:	2a 96       	adiw	r28, 0x0a	; 10
 6cc:	0f b6       	in	r0, 0x3f	; 63
 6ce:	f8 94       	cli
 6d0:	de bf       	out	0x3e, r29	; 62
 6d2:	0f be       	out	0x3f, r0	; 63
 6d4:	cd bf       	out	0x3d, r28	; 61
 6d6:	df 91       	pop	r29
 6d8:	cf 91       	pop	r28
 6da:	1f 91       	pop	r17
 6dc:	ff 90       	pop	r15
 6de:	ef 90       	pop	r14
 6e0:	df 90       	pop	r13
 6e2:	cf 90       	pop	r12
 6e4:	08 95       	ret

000006e6 <LCD_CustomerChar>:


void LCD_CustomerChar(uint8_t address , uint8_t*character)
{
 6e6:	0f 93       	push	r16
 6e8:	1f 93       	push	r17
 6ea:	cf 93       	push	r28
 6ec:	8b 01       	movw	r16, r22
	
	WriteIns(0x40+(address*8));
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	08 96       	adiw	r24, 0x08	; 8
 6f2:	88 0f       	add	r24, r24
 6f4:	88 0f       	add	r24, r24
 6f6:	88 0f       	add	r24, r24
 6f8:	0e 94 12 02 	call	0x424	; 0x424 <WriteIns>
	
	for(uint8_t i=0;i<8;i++)
 6fc:	c0 e0       	ldi	r28, 0x00	; 0
 6fe:	07 c0       	rjmp	.+14     	; 0x70e <LCD_CustomerChar+0x28>
	{
		WriteData(character[i]);
 700:	f8 01       	movw	r30, r16
 702:	ec 0f       	add	r30, r28
 704:	f1 1d       	adc	r31, r1
 706:	80 81       	ld	r24, Z
 708:	0e 94 72 02 	call	0x4e4	; 0x4e4 <WriteData>
void LCD_CustomerChar(uint8_t address , uint8_t*character)
{
	
	WriteIns(0x40+(address*8));
	
	for(uint8_t i=0;i<8;i++)
 70c:	cf 5f       	subi	r28, 0xFF	; 255
 70e:	c8 30       	cpi	r28, 0x08	; 8
 710:	b8 f3       	brcs	.-18     	; 0x700 <LCD_CustomerChar+0x1a>
	{
		WriteData(character[i]);
	}
	WriteIns(0x80);
 712:	80 e8       	ldi	r24, 0x80	; 128
 714:	0e 94 12 02 	call	0x424	; 0x424 <WriteIns>
}
 718:	cf 91       	pop	r28
 71a:	1f 91       	pop	r17
 71c:	0f 91       	pop	r16
 71e:	08 95       	ret

00000720 <main>:
#include "PING.h"


int main(void)
{
    Ping_Init();
 720:	0e 94 49 00 	call	0x92	; 0x92 <Ping_Init>
    while (1) 
    {
		 Ping_Play();
 724:	0e 94 5b 00 	call	0xb6	; 0xb6 <Ping_Play>
 728:	fd cf       	rjmp	.-6      	; 0x724 <main+0x4>

0000072a <DIO_InitPin>:
	}
}

void DIO_InitPin(DIO_PinType pin ,DIO_PinStatus status)
{
	uint8_t pin_num = pin%8;
 72a:	98 2f       	mov	r25, r24
 72c:	97 70       	andi	r25, 0x07	; 7
	DIO_PortType port =pin/8;
 72e:	86 95       	lsr	r24
 730:	86 95       	lsr	r24
 732:	86 95       	lsr	r24
	switch(status)
 734:	61 30       	cpi	r22, 0x01	; 1
 736:	09 f4       	brne	.+2      	; 0x73a <DIO_InitPin+0x10>
 738:	55 c0       	rjmp	.+170    	; 0x7e4 <DIO_InitPin+0xba>
 73a:	20 f0       	brcs	.+8      	; 0x744 <DIO_InitPin+0x1a>
 73c:	62 30       	cpi	r22, 0x02	; 2
 73e:	09 f4       	brne	.+2      	; 0x742 <DIO_InitPin+0x18>
 740:	a1 c0       	rjmp	.+322    	; 0x884 <__stack+0x25>
 742:	08 95       	ret
	{
		case OUTPUT:
		switch(port)
 744:	81 30       	cpi	r24, 0x01	; 1
 746:	c1 f0       	breq	.+48     	; 0x778 <DIO_InitPin+0x4e>
 748:	28 f0       	brcs	.+10     	; 0x754 <DIO_InitPin+0x2a>
 74a:	82 30       	cpi	r24, 0x02	; 2
 74c:	39 f1       	breq	.+78     	; 0x79c <DIO_InitPin+0x72>
 74e:	83 30       	cpi	r24, 0x03	; 3
 750:	b9 f1       	breq	.+110    	; 0x7c0 <DIO_InitPin+0x96>
 752:	08 95       	ret
		{
			case PA:
			SET_BIT(DDRA,pin_num);
 754:	4a b3       	in	r20, 0x1a	; 26
 756:	21 e0       	ldi	r18, 0x01	; 1
 758:	30 e0       	ldi	r19, 0x00	; 0
 75a:	b9 01       	movw	r22, r18
 75c:	02 c0       	rjmp	.+4      	; 0x762 <DIO_InitPin+0x38>
 75e:	66 0f       	add	r22, r22
 760:	77 1f       	adc	r23, r23
 762:	9a 95       	dec	r25
 764:	e2 f7       	brpl	.-8      	; 0x75e <DIO_InitPin+0x34>
 766:	cb 01       	movw	r24, r22
 768:	94 2f       	mov	r25, r20
 76a:	98 2b       	or	r25, r24
 76c:	9a bb       	out	0x1a, r25	; 26
			CLR_BIT(PORTA,pin_num);
 76e:	9b b3       	in	r25, 0x1b	; 27
 770:	80 95       	com	r24
 772:	89 23       	and	r24, r25
 774:	8b bb       	out	0x1b, r24	; 27
			break;
 776:	08 95       	ret
			case PB:
			SET_BIT(DDRB,pin_num);
 778:	47 b3       	in	r20, 0x17	; 23
 77a:	21 e0       	ldi	r18, 0x01	; 1
 77c:	30 e0       	ldi	r19, 0x00	; 0
 77e:	b9 01       	movw	r22, r18
 780:	02 c0       	rjmp	.+4      	; 0x786 <DIO_InitPin+0x5c>
 782:	66 0f       	add	r22, r22
 784:	77 1f       	adc	r23, r23
 786:	9a 95       	dec	r25
 788:	e2 f7       	brpl	.-8      	; 0x782 <DIO_InitPin+0x58>
 78a:	cb 01       	movw	r24, r22
 78c:	94 2f       	mov	r25, r20
 78e:	98 2b       	or	r25, r24
 790:	97 bb       	out	0x17, r25	; 23
			CLR_BIT(PORTB,pin_num);
 792:	98 b3       	in	r25, 0x18	; 24
 794:	80 95       	com	r24
 796:	89 23       	and	r24, r25
 798:	88 bb       	out	0x18, r24	; 24
			break;
 79a:	08 95       	ret
			case PC:
			SET_BIT(DDRC,pin_num);
 79c:	44 b3       	in	r20, 0x14	; 20
 79e:	21 e0       	ldi	r18, 0x01	; 1
 7a0:	30 e0       	ldi	r19, 0x00	; 0
 7a2:	b9 01       	movw	r22, r18
 7a4:	02 c0       	rjmp	.+4      	; 0x7aa <DIO_InitPin+0x80>
 7a6:	66 0f       	add	r22, r22
 7a8:	77 1f       	adc	r23, r23
 7aa:	9a 95       	dec	r25
 7ac:	e2 f7       	brpl	.-8      	; 0x7a6 <DIO_InitPin+0x7c>
 7ae:	cb 01       	movw	r24, r22
 7b0:	94 2f       	mov	r25, r20
 7b2:	98 2b       	or	r25, r24
 7b4:	94 bb       	out	0x14, r25	; 20
			CLR_BIT(PORTC,pin_num);
 7b6:	95 b3       	in	r25, 0x15	; 21
 7b8:	80 95       	com	r24
 7ba:	89 23       	and	r24, r25
 7bc:	85 bb       	out	0x15, r24	; 21
			break;
 7be:	08 95       	ret
			case PD:
			SET_BIT(DDRD,pin_num);
 7c0:	41 b3       	in	r20, 0x11	; 17
 7c2:	21 e0       	ldi	r18, 0x01	; 1
 7c4:	30 e0       	ldi	r19, 0x00	; 0
 7c6:	b9 01       	movw	r22, r18
 7c8:	02 c0       	rjmp	.+4      	; 0x7ce <DIO_InitPin+0xa4>
 7ca:	66 0f       	add	r22, r22
 7cc:	77 1f       	adc	r23, r23
 7ce:	9a 95       	dec	r25
 7d0:	e2 f7       	brpl	.-8      	; 0x7ca <DIO_InitPin+0xa0>
 7d2:	cb 01       	movw	r24, r22
 7d4:	94 2f       	mov	r25, r20
 7d6:	98 2b       	or	r25, r24
 7d8:	91 bb       	out	0x11, r25	; 17
			CLR_BIT(PORTD,pin_num);
 7da:	92 b3       	in	r25, 0x12	; 18
 7dc:	80 95       	com	r24
 7de:	89 23       	and	r24, r25
 7e0:	82 bb       	out	0x12, r24	; 18
			break;
 7e2:	08 95       	ret
			
		}
		break;
		case INFREE:
		switch(port)
 7e4:	81 30       	cpi	r24, 0x01	; 1
 7e6:	c1 f0       	breq	.+48     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 7e8:	28 f0       	brcs	.+10     	; 0x7f4 <DIO_InitPin+0xca>
 7ea:	82 30       	cpi	r24, 0x02	; 2
 7ec:	39 f1       	breq	.+78     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 7ee:	83 30       	cpi	r24, 0x03	; 3
 7f0:	b9 f1       	breq	.+110    	; 0x860 <__stack+0x1>
 7f2:	08 95       	ret
		{
			case PA:
			CLR_BIT(DDRA,pin_num);
 7f4:	4a b3       	in	r20, 0x1a	; 26
 7f6:	21 e0       	ldi	r18, 0x01	; 1
 7f8:	30 e0       	ldi	r19, 0x00	; 0
 7fa:	b9 01       	movw	r22, r18
 7fc:	02 c0       	rjmp	.+4      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7fe:	66 0f       	add	r22, r22
 800:	77 1f       	adc	r23, r23
 802:	9a 95       	dec	r25
 804:	e2 f7       	brpl	.-8      	; 0x7fe <DIO_InitPin+0xd4>
 806:	cb 01       	movw	r24, r22
 808:	80 95       	com	r24
 80a:	94 2f       	mov	r25, r20
 80c:	98 23       	and	r25, r24
 80e:	9a bb       	out	0x1a, r25	; 26
			CLR_BIT(PORTA,pin_num);
 810:	9b b3       	in	r25, 0x1b	; 27
 812:	89 23       	and	r24, r25
 814:	8b bb       	out	0x1b, r24	; 27
			break;
 816:	08 95       	ret
			case PB:
			CLR_BIT(DDRB,pin_num);
 818:	47 b3       	in	r20, 0x17	; 23
 81a:	21 e0       	ldi	r18, 0x01	; 1
 81c:	30 e0       	ldi	r19, 0x00	; 0
 81e:	b9 01       	movw	r22, r18
 820:	02 c0       	rjmp	.+4      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 822:	66 0f       	add	r22, r22
 824:	77 1f       	adc	r23, r23
 826:	9a 95       	dec	r25
 828:	e2 f7       	brpl	.-8      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 82a:	cb 01       	movw	r24, r22
 82c:	80 95       	com	r24
 82e:	94 2f       	mov	r25, r20
 830:	98 23       	and	r25, r24
 832:	97 bb       	out	0x17, r25	; 23
			CLR_BIT(PORTB,pin_num);
 834:	98 b3       	in	r25, 0x18	; 24
 836:	89 23       	and	r24, r25
 838:	88 bb       	out	0x18, r24	; 24
			break;
 83a:	08 95       	ret
			case PC:
			CLR_BIT(DDRC,pin_num);
 83c:	44 b3       	in	r20, 0x14	; 20
 83e:	21 e0       	ldi	r18, 0x01	; 1
 840:	30 e0       	ldi	r19, 0x00	; 0
 842:	b9 01       	movw	r22, r18
 844:	02 c0       	rjmp	.+4      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 846:	66 0f       	add	r22, r22
 848:	77 1f       	adc	r23, r23
 84a:	9a 95       	dec	r25
 84c:	e2 f7       	brpl	.-8      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 84e:	cb 01       	movw	r24, r22
 850:	80 95       	com	r24
 852:	94 2f       	mov	r25, r20
 854:	98 23       	and	r25, r24
 856:	94 bb       	out	0x14, r25	; 20
			CLR_BIT(PORTC,pin_num);
 858:	95 b3       	in	r25, 0x15	; 21
 85a:	89 23       	and	r24, r25
 85c:	85 bb       	out	0x15, r24	; 21
			break;
 85e:	08 95       	ret
			case PD:
			CLR_BIT(DDRD,pin_num);
 860:	41 b3       	in	r20, 0x11	; 17
 862:	21 e0       	ldi	r18, 0x01	; 1
 864:	30 e0       	ldi	r19, 0x00	; 0
 866:	b9 01       	movw	r22, r18
 868:	02 c0       	rjmp	.+4      	; 0x86e <__stack+0xf>
 86a:	66 0f       	add	r22, r22
 86c:	77 1f       	adc	r23, r23
 86e:	9a 95       	dec	r25
 870:	e2 f7       	brpl	.-8      	; 0x86a <__stack+0xb>
 872:	cb 01       	movw	r24, r22
 874:	80 95       	com	r24
 876:	94 2f       	mov	r25, r20
 878:	98 23       	and	r25, r24
 87a:	91 bb       	out	0x11, r25	; 17
			CLR_BIT(PORTD,pin_num);
 87c:	92 b3       	in	r25, 0x12	; 18
 87e:	89 23       	and	r24, r25
 880:	82 bb       	out	0x12, r24	; 18
			break;
 882:	08 95       	ret
			
		}
		break;
		case INPULL:
		switch(port)
 884:	81 30       	cpi	r24, 0x01	; 1
 886:	c1 f0       	breq	.+48     	; 0x8b8 <__stack+0x59>
 888:	28 f0       	brcs	.+10     	; 0x894 <__stack+0x35>
 88a:	82 30       	cpi	r24, 0x02	; 2
 88c:	39 f1       	breq	.+78     	; 0x8dc <__stack+0x7d>
 88e:	83 30       	cpi	r24, 0x03	; 3
 890:	b9 f1       	breq	.+110    	; 0x900 <__stack+0xa1>
 892:	08 95       	ret
		{
			case PA:
			CLR_BIT(DDRA,pin_num);
 894:	4a b3       	in	r20, 0x1a	; 26
 896:	21 e0       	ldi	r18, 0x01	; 1
 898:	30 e0       	ldi	r19, 0x00	; 0
 89a:	b9 01       	movw	r22, r18
 89c:	02 c0       	rjmp	.+4      	; 0x8a2 <__stack+0x43>
 89e:	66 0f       	add	r22, r22
 8a0:	77 1f       	adc	r23, r23
 8a2:	9a 95       	dec	r25
 8a4:	e2 f7       	brpl	.-8      	; 0x89e <__stack+0x3f>
 8a6:	cb 01       	movw	r24, r22
 8a8:	96 2f       	mov	r25, r22
 8aa:	90 95       	com	r25
 8ac:	94 23       	and	r25, r20
 8ae:	9a bb       	out	0x1a, r25	; 26
			SET_BIT(PORTA,pin_num);
 8b0:	9b b3       	in	r25, 0x1b	; 27
 8b2:	89 2b       	or	r24, r25
 8b4:	8b bb       	out	0x1b, r24	; 27
			break;
 8b6:	08 95       	ret
			case PB:
			CLR_BIT(DDRB,pin_num);
 8b8:	47 b3       	in	r20, 0x17	; 23
 8ba:	21 e0       	ldi	r18, 0x01	; 1
 8bc:	30 e0       	ldi	r19, 0x00	; 0
 8be:	b9 01       	movw	r22, r18
 8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <__stack+0x67>
 8c2:	66 0f       	add	r22, r22
 8c4:	77 1f       	adc	r23, r23
 8c6:	9a 95       	dec	r25
 8c8:	e2 f7       	brpl	.-8      	; 0x8c2 <__stack+0x63>
 8ca:	cb 01       	movw	r24, r22
 8cc:	96 2f       	mov	r25, r22
 8ce:	90 95       	com	r25
 8d0:	94 23       	and	r25, r20
 8d2:	97 bb       	out	0x17, r25	; 23
			SET_BIT(PORTB,pin_num);
 8d4:	98 b3       	in	r25, 0x18	; 24
 8d6:	89 2b       	or	r24, r25
 8d8:	88 bb       	out	0x18, r24	; 24
			break;
 8da:	08 95       	ret
			case PC:
			CLR_BIT(DDRC,pin_num);
 8dc:	44 b3       	in	r20, 0x14	; 20
 8de:	21 e0       	ldi	r18, 0x01	; 1
 8e0:	30 e0       	ldi	r19, 0x00	; 0
 8e2:	b9 01       	movw	r22, r18
 8e4:	02 c0       	rjmp	.+4      	; 0x8ea <__stack+0x8b>
 8e6:	66 0f       	add	r22, r22
 8e8:	77 1f       	adc	r23, r23
 8ea:	9a 95       	dec	r25
 8ec:	e2 f7       	brpl	.-8      	; 0x8e6 <__stack+0x87>
 8ee:	cb 01       	movw	r24, r22
 8f0:	96 2f       	mov	r25, r22
 8f2:	90 95       	com	r25
 8f4:	94 23       	and	r25, r20
 8f6:	94 bb       	out	0x14, r25	; 20
			SET_BIT(PORTC,pin_num);
 8f8:	95 b3       	in	r25, 0x15	; 21
 8fa:	89 2b       	or	r24, r25
 8fc:	85 bb       	out	0x15, r24	; 21
			break;
 8fe:	08 95       	ret
			case PD:
			CLR_BIT(DDRD,pin_num);
 900:	41 b3       	in	r20, 0x11	; 17
 902:	21 e0       	ldi	r18, 0x01	; 1
 904:	30 e0       	ldi	r19, 0x00	; 0
 906:	b9 01       	movw	r22, r18
 908:	02 c0       	rjmp	.+4      	; 0x90e <__stack+0xaf>
 90a:	66 0f       	add	r22, r22
 90c:	77 1f       	adc	r23, r23
 90e:	9a 95       	dec	r25
 910:	e2 f7       	brpl	.-8      	; 0x90a <__stack+0xab>
 912:	cb 01       	movw	r24, r22
 914:	96 2f       	mov	r25, r22
 916:	90 95       	com	r25
 918:	94 23       	and	r25, r20
 91a:	91 bb       	out	0x11, r25	; 17
			SET_BIT(PORTD,pin_num);
 91c:	92 b3       	in	r25, 0x12	; 18
 91e:	89 2b       	or	r24, r25
 920:	82 bb       	out	0x12, r24	; 18
 922:	08 95       	ret

00000924 <DIO_Init>:
	INPULL,		 /* Port D Pin 6 /   ICP*/
	INPULL		 /* Port D Pin 7 */
};

void DIO_Init(void)
{
 924:	cf 93       	push	r28
	DIO_PinType i;
	for (i=PINA0;i<TOTAL_PINS;i++)
 926:	c0 e0       	ldi	r28, 0x00	; 0
 928:	09 c0       	rjmp	.+18     	; 0x93c <DIO_Init+0x18>
	{
		DIO_InitPin(i,DIO_PinsStatusArr[i]);
 92a:	ec 2f       	mov	r30, r28
 92c:	f0 e0       	ldi	r31, 0x00	; 0
 92e:	ee 57       	subi	r30, 0x7E	; 126
 930:	ff 4f       	sbci	r31, 0xFF	; 255
 932:	60 81       	ld	r22, Z
 934:	8c 2f       	mov	r24, r28
 936:	0e 94 95 03 	call	0x72a	; 0x72a <DIO_InitPin>
};

void DIO_Init(void)
{
	DIO_PinType i;
	for (i=PINA0;i<TOTAL_PINS;i++)
 93a:	cf 5f       	subi	r28, 0xFF	; 255
 93c:	c0 32       	cpi	r28, 0x20	; 32
 93e:	a8 f3       	brcs	.-22     	; 0x92a <DIO_Init+0x6>
	{
		DIO_InitPin(i,DIO_PinsStatusArr[i]);
	}
}
 940:	cf 91       	pop	r28
 942:	08 95       	ret

00000944 <DIO_ReadPin>:
	}
}
DIO_VoltageType DIO_ReadPin (DIO_PinType pin)
{
	DIO_VoltageType volt=LOW;
	uint8_t pin_num =pin%8;
 944:	28 2f       	mov	r18, r24
 946:	27 70       	andi	r18, 0x07	; 7
	DIO_PortType port =pin/8;
 948:	86 95       	lsr	r24
 94a:	86 95       	lsr	r24
 94c:	86 95       	lsr	r24
	switch(port)
 94e:	81 30       	cpi	r24, 0x01	; 1
 950:	79 f0       	breq	.+30     	; 0x970 <DIO_ReadPin+0x2c>
 952:	28 f0       	brcs	.+10     	; 0x95e <DIO_ReadPin+0x1a>
 954:	82 30       	cpi	r24, 0x02	; 2
 956:	a9 f0       	breq	.+42     	; 0x982 <DIO_ReadPin+0x3e>
 958:	83 30       	cpi	r24, 0x03	; 3
 95a:	e1 f0       	breq	.+56     	; 0x994 <DIO_ReadPin+0x50>
 95c:	24 c0       	rjmp	.+72     	; 0x9a6 <DIO_ReadPin+0x62>
	{
		case PA:
		volt=READ_BIT(PINA,pin_num);
 95e:	89 b3       	in	r24, 0x19	; 25
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	02 c0       	rjmp	.+4      	; 0x968 <DIO_ReadPin+0x24>
 964:	95 95       	asr	r25
 966:	87 95       	ror	r24
 968:	2a 95       	dec	r18
 96a:	e2 f7       	brpl	.-8      	; 0x964 <DIO_ReadPin+0x20>
 96c:	81 70       	andi	r24, 0x01	; 1
		break;
 96e:	08 95       	ret
		case PB:
		volt=READ_BIT(PINB,pin_num);
 970:	86 b3       	in	r24, 0x16	; 22
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	02 c0       	rjmp	.+4      	; 0x97a <DIO_ReadPin+0x36>
 976:	95 95       	asr	r25
 978:	87 95       	ror	r24
 97a:	2a 95       	dec	r18
 97c:	e2 f7       	brpl	.-8      	; 0x976 <DIO_ReadPin+0x32>
 97e:	81 70       	andi	r24, 0x01	; 1
		break;
 980:	08 95       	ret
		case PC:
		volt=READ_BIT(PINC,pin_num);
 982:	83 b3       	in	r24, 0x13	; 19
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	02 c0       	rjmp	.+4      	; 0x98c <DIO_ReadPin+0x48>
 988:	95 95       	asr	r25
 98a:	87 95       	ror	r24
 98c:	2a 95       	dec	r18
 98e:	e2 f7       	brpl	.-8      	; 0x988 <DIO_ReadPin+0x44>
 990:	81 70       	andi	r24, 0x01	; 1
		break;
 992:	08 95       	ret
		case PD:
		volt=READ_BIT(PIND,pin_num);
 994:	80 b3       	in	r24, 0x10	; 16
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	02 c0       	rjmp	.+4      	; 0x99e <DIO_ReadPin+0x5a>
 99a:	95 95       	asr	r25
 99c:	87 95       	ror	r24
 99e:	2a 95       	dec	r18
 9a0:	e2 f7       	brpl	.-8      	; 0x99a <DIO_ReadPin+0x56>
 9a2:	81 70       	andi	r24, 0x01	; 1
		break;
 9a4:	08 95       	ret
		
	}
}
DIO_VoltageType DIO_ReadPin (DIO_PinType pin)
{
	DIO_VoltageType volt=LOW;
 9a6:	80 e0       	ldi	r24, 0x00	; 0
		volt=READ_BIT(PIND,pin_num);
		break;
		
	}
	return volt;
}
 9a8:	08 95       	ret

000009aa <DIO_WritePin>:
void DIO_WritePin (DIO_PinType pin,DIO_VoltageType volt)
{
	uint8_t pin_num =pin%8;
 9aa:	98 2f       	mov	r25, r24
 9ac:	97 70       	andi	r25, 0x07	; 7
	DIO_PortType port =pin/8;
 9ae:	86 95       	lsr	r24
 9b0:	86 95       	lsr	r24
 9b2:	86 95       	lsr	r24
	if (volt==HIGH)
 9b4:	61 30       	cpi	r22, 0x01	; 1
 9b6:	e1 f5       	brne	.+120    	; 0xa30 <DIO_WritePin+0x86>
	{
		switch(port)
 9b8:	81 30       	cpi	r24, 0x01	; 1
 9ba:	99 f0       	breq	.+38     	; 0x9e2 <DIO_WritePin+0x38>
 9bc:	28 f0       	brcs	.+10     	; 0x9c8 <DIO_WritePin+0x1e>
 9be:	82 30       	cpi	r24, 0x02	; 2
 9c0:	e9 f0       	breq	.+58     	; 0x9fc <DIO_WritePin+0x52>
 9c2:	83 30       	cpi	r24, 0x03	; 3
 9c4:	41 f1       	breq	.+80     	; 0xa16 <DIO_WritePin+0x6c>
 9c6:	08 95       	ret
		{
			case PA:
			SET_BIT(PORTA,pin_num);
 9c8:	4b b3       	in	r20, 0x1b	; 27
 9ca:	21 e0       	ldi	r18, 0x01	; 1
 9cc:	30 e0       	ldi	r19, 0x00	; 0
 9ce:	b9 01       	movw	r22, r18
 9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <DIO_WritePin+0x2c>
 9d2:	66 0f       	add	r22, r22
 9d4:	77 1f       	adc	r23, r23
 9d6:	9a 95       	dec	r25
 9d8:	e2 f7       	brpl	.-8      	; 0x9d2 <DIO_WritePin+0x28>
 9da:	cb 01       	movw	r24, r22
 9dc:	84 2b       	or	r24, r20
 9de:	8b bb       	out	0x1b, r24	; 27
			break;
 9e0:	08 95       	ret
			case PB:
			SET_BIT(PORTB,pin_num);
 9e2:	48 b3       	in	r20, 0x18	; 24
 9e4:	21 e0       	ldi	r18, 0x01	; 1
 9e6:	30 e0       	ldi	r19, 0x00	; 0
 9e8:	b9 01       	movw	r22, r18
 9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <DIO_WritePin+0x46>
 9ec:	66 0f       	add	r22, r22
 9ee:	77 1f       	adc	r23, r23
 9f0:	9a 95       	dec	r25
 9f2:	e2 f7       	brpl	.-8      	; 0x9ec <DIO_WritePin+0x42>
 9f4:	cb 01       	movw	r24, r22
 9f6:	84 2b       	or	r24, r20
 9f8:	88 bb       	out	0x18, r24	; 24
			break;
 9fa:	08 95       	ret
			case PC:
			SET_BIT(PORTC,pin_num);
 9fc:	45 b3       	in	r20, 0x15	; 21
 9fe:	21 e0       	ldi	r18, 0x01	; 1
 a00:	30 e0       	ldi	r19, 0x00	; 0
 a02:	b9 01       	movw	r22, r18
 a04:	02 c0       	rjmp	.+4      	; 0xa0a <DIO_WritePin+0x60>
 a06:	66 0f       	add	r22, r22
 a08:	77 1f       	adc	r23, r23
 a0a:	9a 95       	dec	r25
 a0c:	e2 f7       	brpl	.-8      	; 0xa06 <DIO_WritePin+0x5c>
 a0e:	cb 01       	movw	r24, r22
 a10:	84 2b       	or	r24, r20
 a12:	85 bb       	out	0x15, r24	; 21
			break;
 a14:	08 95       	ret
			case PD:
			SET_BIT(PORTD,pin_num);
 a16:	42 b3       	in	r20, 0x12	; 18
 a18:	21 e0       	ldi	r18, 0x01	; 1
 a1a:	30 e0       	ldi	r19, 0x00	; 0
 a1c:	b9 01       	movw	r22, r18
 a1e:	02 c0       	rjmp	.+4      	; 0xa24 <DIO_WritePin+0x7a>
 a20:	66 0f       	add	r22, r22
 a22:	77 1f       	adc	r23, r23
 a24:	9a 95       	dec	r25
 a26:	e2 f7       	brpl	.-8      	; 0xa20 <DIO_WritePin+0x76>
 a28:	cb 01       	movw	r24, r22
 a2a:	84 2b       	or	r24, r20
 a2c:	82 bb       	out	0x12, r24	; 18
			break;
 a2e:	08 95       	ret
			
		}
	}
	else
	{
		switch(port)
 a30:	81 30       	cpi	r24, 0x01	; 1
 a32:	a1 f0       	breq	.+40     	; 0xa5c <DIO_WritePin+0xb2>
 a34:	28 f0       	brcs	.+10     	; 0xa40 <DIO_WritePin+0x96>
 a36:	82 30       	cpi	r24, 0x02	; 2
 a38:	f9 f0       	breq	.+62     	; 0xa78 <DIO_WritePin+0xce>
 a3a:	83 30       	cpi	r24, 0x03	; 3
 a3c:	59 f1       	breq	.+86     	; 0xa94 <DIO_WritePin+0xea>
 a3e:	08 95       	ret
		{
			case PA:
			CLR_BIT(PORTA,pin_num);
 a40:	4b b3       	in	r20, 0x1b	; 27
 a42:	21 e0       	ldi	r18, 0x01	; 1
 a44:	30 e0       	ldi	r19, 0x00	; 0
 a46:	b9 01       	movw	r22, r18
 a48:	02 c0       	rjmp	.+4      	; 0xa4e <DIO_WritePin+0xa4>
 a4a:	66 0f       	add	r22, r22
 a4c:	77 1f       	adc	r23, r23
 a4e:	9a 95       	dec	r25
 a50:	e2 f7       	brpl	.-8      	; 0xa4a <DIO_WritePin+0xa0>
 a52:	cb 01       	movw	r24, r22
 a54:	80 95       	com	r24
 a56:	84 23       	and	r24, r20
 a58:	8b bb       	out	0x1b, r24	; 27
			break;
 a5a:	08 95       	ret
			case PB:
			CLR_BIT(PORTB,pin_num);
 a5c:	48 b3       	in	r20, 0x18	; 24
 a5e:	21 e0       	ldi	r18, 0x01	; 1
 a60:	30 e0       	ldi	r19, 0x00	; 0
 a62:	b9 01       	movw	r22, r18
 a64:	02 c0       	rjmp	.+4      	; 0xa6a <DIO_WritePin+0xc0>
 a66:	66 0f       	add	r22, r22
 a68:	77 1f       	adc	r23, r23
 a6a:	9a 95       	dec	r25
 a6c:	e2 f7       	brpl	.-8      	; 0xa66 <DIO_WritePin+0xbc>
 a6e:	cb 01       	movw	r24, r22
 a70:	80 95       	com	r24
 a72:	84 23       	and	r24, r20
 a74:	88 bb       	out	0x18, r24	; 24
			break;
 a76:	08 95       	ret
			case PC:
			CLR_BIT(PORTC,pin_num);
 a78:	45 b3       	in	r20, 0x15	; 21
 a7a:	21 e0       	ldi	r18, 0x01	; 1
 a7c:	30 e0       	ldi	r19, 0x00	; 0
 a7e:	b9 01       	movw	r22, r18
 a80:	02 c0       	rjmp	.+4      	; 0xa86 <DIO_WritePin+0xdc>
 a82:	66 0f       	add	r22, r22
 a84:	77 1f       	adc	r23, r23
 a86:	9a 95       	dec	r25
 a88:	e2 f7       	brpl	.-8      	; 0xa82 <DIO_WritePin+0xd8>
 a8a:	cb 01       	movw	r24, r22
 a8c:	80 95       	com	r24
 a8e:	84 23       	and	r24, r20
 a90:	85 bb       	out	0x15, r24	; 21
			break;
 a92:	08 95       	ret
			case PD:
			CLR_BIT(PORTD,pin_num);
 a94:	42 b3       	in	r20, 0x12	; 18
 a96:	21 e0       	ldi	r18, 0x01	; 1
 a98:	30 e0       	ldi	r19, 0x00	; 0
 a9a:	b9 01       	movw	r22, r18
 a9c:	02 c0       	rjmp	.+4      	; 0xaa2 <DIO_WritePin+0xf8>
 a9e:	66 0f       	add	r22, r22
 aa0:	77 1f       	adc	r23, r23
 aa2:	9a 95       	dec	r25
 aa4:	e2 f7       	brpl	.-8      	; 0xa9e <DIO_WritePin+0xf4>
 aa6:	cb 01       	movw	r24, r22
 aa8:	80 95       	com	r24
 aaa:	84 23       	and	r24, r20
 aac:	82 bb       	out	0x12, r24	; 18
 aae:	08 95       	ret

00000ab0 <__udivmodsi4>:
 ab0:	a1 e2       	ldi	r26, 0x21	; 33
 ab2:	1a 2e       	mov	r1, r26
 ab4:	aa 1b       	sub	r26, r26
 ab6:	bb 1b       	sub	r27, r27
 ab8:	fd 01       	movw	r30, r26
 aba:	0d c0       	rjmp	.+26     	; 0xad6 <__udivmodsi4_ep>

00000abc <__udivmodsi4_loop>:
 abc:	aa 1f       	adc	r26, r26
 abe:	bb 1f       	adc	r27, r27
 ac0:	ee 1f       	adc	r30, r30
 ac2:	ff 1f       	adc	r31, r31
 ac4:	a2 17       	cp	r26, r18
 ac6:	b3 07       	cpc	r27, r19
 ac8:	e4 07       	cpc	r30, r20
 aca:	f5 07       	cpc	r31, r21
 acc:	20 f0       	brcs	.+8      	; 0xad6 <__udivmodsi4_ep>
 ace:	a2 1b       	sub	r26, r18
 ad0:	b3 0b       	sbc	r27, r19
 ad2:	e4 0b       	sbc	r30, r20
 ad4:	f5 0b       	sbc	r31, r21

00000ad6 <__udivmodsi4_ep>:
 ad6:	66 1f       	adc	r22, r22
 ad8:	77 1f       	adc	r23, r23
 ada:	88 1f       	adc	r24, r24
 adc:	99 1f       	adc	r25, r25
 ade:	1a 94       	dec	r1
 ae0:	69 f7       	brne	.-38     	; 0xabc <__udivmodsi4_loop>
 ae2:	60 95       	com	r22
 ae4:	70 95       	com	r23
 ae6:	80 95       	com	r24
 ae8:	90 95       	com	r25
 aea:	9b 01       	movw	r18, r22
 aec:	ac 01       	movw	r20, r24
 aee:	bd 01       	movw	r22, r26
 af0:	cf 01       	movw	r24, r30
 af2:	08 95       	ret

00000af4 <_exit>:
 af4:	f8 94       	cli

00000af6 <__stop_program>:
 af6:	ff cf       	rjmp	.-2      	; 0xaf6 <__stop_program>
