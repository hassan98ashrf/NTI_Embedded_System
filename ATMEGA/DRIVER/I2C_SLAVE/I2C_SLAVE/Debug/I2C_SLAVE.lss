
I2C_SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000684  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d4  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e9  00000000  00000000  00000e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001118  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002dd  00000000  00000000  00001180  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000069  00000000  00000000  0000145d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000014c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>
#include "I2C.h"

int main(void)
{
	DDRA = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	I2C_Set_Address(0b11010000);
  70:	80 ed       	ldi	r24, 0xD0	; 208
  72:	0e 94 40 00 	call	0x80	; 0x80 <I2C_Set_Address>
	
	
	while (1)
	{
		PORTA = I2C_Read(1);
  76:	81 e0       	ldi	r24, 0x01	; 1
  78:	0e 94 42 00 	call	0x84	; 0x84 <I2C_Read>
  7c:	8b bb       	out	0x1b, r24	; 27
  7e:	fb cf       	rjmp	.-10     	; 0x76 <main+0xa>

00000080 <I2C_Set_Address>:
#include "I2C.h"


void I2C_Set_Address(unsigned char addr){
	TWAR = addr;
  80:	82 b9       	out	0x02, r24	; 2
  82:	08 95       	ret

00000084 <I2C_Read>:
}
unsigned char I2C_Read(unsigned char ack){
  84:	cf 93       	push	r28
  86:	df 93       	push	r29
  88:	1f 92       	push	r1
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
	
	volatile unsigned char x = 0;
  8e:	19 82       	std	Y+1, r1	; 0x01
	
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
  90:	84 ec       	ldi	r24, 0xC4	; 196
  92:	86 bf       	out	0x36, r24	; 54
	
	while(!(TWCR & (1<<TWINT)));
  94:	06 b6       	in	r0, 0x36	; 54
  96:	07 fe       	sbrs	r0, 7
  98:	fd cf       	rjmp	.-6      	; 0x94 <I2C_Read+0x10>
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <I2C_Read+0x1c>
	while(TWSR != 0x60)x=TWSR;
  9c:	81 b1       	in	r24, 0x01	; 1
  9e:	89 83       	std	Y+1, r24	; 0x01
  a0:	81 b1       	in	r24, 0x01	; 1
  a2:	80 36       	cpi	r24, 0x60	; 96
  a4:	d9 f7       	brne	.-10     	; 0x9c <I2C_Read+0x18>
	
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
  a6:	84 ec       	ldi	r24, 0xC4	; 196
  a8:	86 bf       	out	0x36, r24	; 54
	
	while(!(TWCR & (1<<TWINT)));
  aa:	06 b6       	in	r0, 0x36	; 54
  ac:	07 fe       	sbrs	r0, 7
  ae:	fd cf       	rjmp	.-6      	; 0xaa <I2C_Read+0x26>
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <I2C_Read+0x32>
	while(TWSR != 0x80)x=TWSR;
  b2:	81 b1       	in	r24, 0x01	; 1
  b4:	89 83       	std	Y+1, r24	; 0x01
  b6:	81 b1       	in	r24, 0x01	; 1
  b8:	80 38       	cpi	r24, 0x80	; 128
  ba:	d9 f7       	brne	.-10     	; 0xb2 <I2C_Read+0x2e>
	return TWDR;
  bc:	83 b1       	in	r24, 0x03	; 3
	
  be:	0f 90       	pop	r0
  c0:	df 91       	pop	r29
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>
