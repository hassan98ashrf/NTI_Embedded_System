
GPIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000746  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010e  00800060  00000746  000007da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  0080016e  0080016e  000008e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000918  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002033  00000000  00000000  00000aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000985  00000000  00000000  00002ad7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011f4  00000000  00000000  0000345c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f8  00000000  00000000  00004650  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006eb  00000000  00000000  00004948  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015c0  00000000  00000000  00005033  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000065f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 01 03 	jmp	0x602	; 0x602 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e4       	ldi	r30, 0x46	; 70
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 37       	cpi	r26, 0x75	; 117
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9e 01 	call	0x33c	; 0x33c <main>
  8a:	0c 94 a1 03 	jmp	0x742	; 0x742 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <WriteIns>:
	for (i=i-1;i!=255;i--)
	{
		LCD_WriteChar(str[i]);
	}
	
}
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	63 e0       	ldi	r22, 0x03	; 3
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	0e 94 28 03 	call	0x650	; 0x650 <digitalWrite>
  a0:	4c 2f       	mov	r20, r28
  a2:	44 1f       	adc	r20, r20
  a4:	44 27       	eor	r20, r20
  a6:	44 1f       	adc	r20, r20
  a8:	6c e0       	ldi	r22, 0x0C	; 12
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	0e 94 28 03 	call	0x650	; 0x650 <digitalWrite>
  b0:	c6 fb       	bst	r28, 6
  b2:	44 27       	eor	r20, r20
  b4:	40 f9       	bld	r20, 0
  b6:	6a e0       	ldi	r22, 0x0A	; 10
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	0e 94 28 03 	call	0x650	; 0x650 <digitalWrite>
  be:	c5 fb       	bst	r28, 5
  c0:	44 27       	eor	r20, r20
  c2:	40 f9       	bld	r20, 0
  c4:	69 e0       	ldi	r22, 0x09	; 9
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	0e 94 28 03 	call	0x650	; 0x650 <digitalWrite>
  cc:	c4 fb       	bst	r28, 4
  ce:	44 27       	eor	r20, r20
  d0:	40 f9       	bld	r20, 0
  d2:	68 e0       	ldi	r22, 0x08	; 8
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	0e 94 28 03 	call	0x650	; 0x650 <digitalWrite>
  da:	41 e0       	ldi	r20, 0x01	; 1
  dc:	62 e0       	ldi	r22, 0x02	; 2
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	0e 94 28 03 	call	0x650	; 0x650 <digitalWrite>
  e4:	8f e9       	ldi	r24, 0x9F	; 159
  e6:	9f e0       	ldi	r25, 0x0F	; 15
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <WriteIns+0x56>
  ec:	00 c0       	rjmp	.+0      	; 0xee <WriteIns+0x5c>
  ee:	00 00       	nop
  f0:	40 e0       	ldi	r20, 0x00	; 0
  f2:	62 e0       	ldi	r22, 0x02	; 2
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	0e 94 28 03 	call	0x650	; 0x650 <digitalWrite>
  fa:	8f e9       	ldi	r24, 0x9F	; 159
  fc:	9f e0       	ldi	r25, 0x0F	; 15
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <WriteIns+0x6c>
 102:	00 c0       	rjmp	.+0      	; 0x104 <WriteIns+0x72>
 104:	00 00       	nop
 106:	c3 fb       	bst	r28, 3
 108:	44 27       	eor	r20, r20
 10a:	40 f9       	bld	r20, 0
 10c:	6c e0       	ldi	r22, 0x0C	; 12
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	0e 94 28 03 	call	0x650	; 0x650 <digitalWrite>
 114:	c2 fb       	bst	r28, 2
 116:	44 27       	eor	r20, r20
 118:	40 f9       	bld	r20, 0
 11a:	6a e0       	ldi	r22, 0x0A	; 10
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	0e 94 28 03 	call	0x650	; 0x650 <digitalWrite>
 122:	c1 fb       	bst	r28, 1
 124:	44 27       	eor	r20, r20
 126:	40 f9       	bld	r20, 0
 128:	69 e0       	ldi	r22, 0x09	; 9
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	0e 94 28 03 	call	0x650	; 0x650 <digitalWrite>
 130:	4c 2f       	mov	r20, r28
 132:	41 70       	andi	r20, 0x01	; 1
 134:	68 e0       	ldi	r22, 0x08	; 8
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	0e 94 28 03 	call	0x650	; 0x650 <digitalWrite>
 13c:	41 e0       	ldi	r20, 0x01	; 1
 13e:	62 e0       	ldi	r22, 0x02	; 2
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	0e 94 28 03 	call	0x650	; 0x650 <digitalWrite>
 146:	8f e9       	ldi	r24, 0x9F	; 159
 148:	9f e0       	ldi	r25, 0x0F	; 15
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <WriteIns+0xb8>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <WriteIns+0xbe>
 150:	00 00       	nop
 152:	40 e0       	ldi	r20, 0x00	; 0
 154:	62 e0       	ldi	r22, 0x02	; 2
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	0e 94 28 03 	call	0x650	; 0x650 <digitalWrite>
 15c:	8f e9       	ldi	r24, 0x9F	; 159
 15e:	9f e0       	ldi	r25, 0x0F	; 15
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <WriteIns+0xce>
 164:	00 c0       	rjmp	.+0      	; 0x166 <WriteIns+0xd4>
 166:	00 00       	nop
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <WriteData>:
 16c:	cf 93       	push	r28
 16e:	c8 2f       	mov	r28, r24
 170:	41 e0       	ldi	r20, 0x01	; 1
 172:	63 e0       	ldi	r22, 0x03	; 3
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	0e 94 28 03 	call	0x650	; 0x650 <digitalWrite>
 17a:	4c 2f       	mov	r20, r28
 17c:	44 1f       	adc	r20, r20
 17e:	44 27       	eor	r20, r20
 180:	44 1f       	adc	r20, r20
 182:	6c e0       	ldi	r22, 0x0C	; 12
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	0e 94 28 03 	call	0x650	; 0x650 <digitalWrite>
 18a:	c6 fb       	bst	r28, 6
 18c:	44 27       	eor	r20, r20
 18e:	40 f9       	bld	r20, 0
 190:	6a e0       	ldi	r22, 0x0A	; 10
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	0e 94 28 03 	call	0x650	; 0x650 <digitalWrite>
 198:	c5 fb       	bst	r28, 5
 19a:	44 27       	eor	r20, r20
 19c:	40 f9       	bld	r20, 0
 19e:	69 e0       	ldi	r22, 0x09	; 9
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	0e 94 28 03 	call	0x650	; 0x650 <digitalWrite>
 1a6:	c4 fb       	bst	r28, 4
 1a8:	44 27       	eor	r20, r20
 1aa:	40 f9       	bld	r20, 0
 1ac:	68 e0       	ldi	r22, 0x08	; 8
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	0e 94 28 03 	call	0x650	; 0x650 <digitalWrite>
 1b4:	41 e0       	ldi	r20, 0x01	; 1
 1b6:	62 e0       	ldi	r22, 0x02	; 2
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	0e 94 28 03 	call	0x650	; 0x650 <digitalWrite>
 1be:	8f e9       	ldi	r24, 0x9F	; 159
 1c0:	9f e0       	ldi	r25, 0x0F	; 15
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <WriteData+0x56>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <WriteData+0x5c>
 1c8:	00 00       	nop
 1ca:	40 e0       	ldi	r20, 0x00	; 0
 1cc:	62 e0       	ldi	r22, 0x02	; 2
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	0e 94 28 03 	call	0x650	; 0x650 <digitalWrite>
 1d4:	8f e9       	ldi	r24, 0x9F	; 159
 1d6:	9f e0       	ldi	r25, 0x0F	; 15
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <WriteData+0x6c>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <WriteData+0x72>
 1de:	00 00       	nop
 1e0:	c3 fb       	bst	r28, 3
 1e2:	44 27       	eor	r20, r20
 1e4:	40 f9       	bld	r20, 0
 1e6:	6c e0       	ldi	r22, 0x0C	; 12
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	0e 94 28 03 	call	0x650	; 0x650 <digitalWrite>
 1ee:	c2 fb       	bst	r28, 2
 1f0:	44 27       	eor	r20, r20
 1f2:	40 f9       	bld	r20, 0
 1f4:	6a e0       	ldi	r22, 0x0A	; 10
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	0e 94 28 03 	call	0x650	; 0x650 <digitalWrite>
 1fc:	c1 fb       	bst	r28, 1
 1fe:	44 27       	eor	r20, r20
 200:	40 f9       	bld	r20, 0
 202:	69 e0       	ldi	r22, 0x09	; 9
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	0e 94 28 03 	call	0x650	; 0x650 <digitalWrite>
 20a:	4c 2f       	mov	r20, r28
 20c:	41 70       	andi	r20, 0x01	; 1
 20e:	68 e0       	ldi	r22, 0x08	; 8
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	0e 94 28 03 	call	0x650	; 0x650 <digitalWrite>
 216:	41 e0       	ldi	r20, 0x01	; 1
 218:	62 e0       	ldi	r22, 0x02	; 2
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	0e 94 28 03 	call	0x650	; 0x650 <digitalWrite>
 220:	8f e9       	ldi	r24, 0x9F	; 159
 222:	9f e0       	ldi	r25, 0x0F	; 15
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <WriteData+0xb8>
 228:	00 c0       	rjmp	.+0      	; 0x22a <WriteData+0xbe>
 22a:	00 00       	nop
 22c:	40 e0       	ldi	r20, 0x00	; 0
 22e:	62 e0       	ldi	r22, 0x02	; 2
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	0e 94 28 03 	call	0x650	; 0x650 <digitalWrite>
 236:	8f e9       	ldi	r24, 0x9F	; 159
 238:	9f e0       	ldi	r25, 0x0F	; 15
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <WriteData+0xce>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <WriteData+0xd4>
 240:	00 00       	nop
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <LCD_Init>:
 246:	2f e7       	ldi	r18, 0x7F	; 127
 248:	85 eb       	ldi	r24, 0xB5	; 181
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	21 50       	subi	r18, 0x01	; 1
 24e:	80 40       	sbci	r24, 0x00	; 0
 250:	90 40       	sbci	r25, 0x00	; 0
 252:	e1 f7       	brne	.-8      	; 0x24c <LCD_Init+0x6>
 254:	00 c0       	rjmp	.+0      	; 0x256 <LCD_Init+0x10>
 256:	00 00       	nop
 258:	82 e0       	ldi	r24, 0x02	; 2
 25a:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
 25e:	88 e2       	ldi	r24, 0x28	; 40
 260:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
 264:	8c e0       	ldi	r24, 0x0C	; 12
 266:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
 270:	8f e9       	ldi	r24, 0x9F	; 159
 272:	9f e0       	ldi	r25, 0x0F	; 15
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <LCD_Init+0x2e>
 278:	00 c0       	rjmp	.+0      	; 0x27a <LCD_Init+0x34>
 27a:	00 00       	nop
 27c:	86 e0       	ldi	r24, 0x06	; 6
 27e:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
 282:	08 95       	ret

00000284 <LCD_GoTo>:
 284:	81 30       	cpi	r24, 0x01	; 1
 286:	29 f4       	brne	.+10     	; 0x292 <LCD_GoTo+0xe>
 288:	80 e8       	ldi	r24, 0x80	; 128
 28a:	86 0f       	add	r24, r22
 28c:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
 290:	08 95       	ret
 292:	82 30       	cpi	r24, 0x02	; 2
 294:	29 f4       	brne	.+10     	; 0x2a0 <LCD_GoTo+0x1c>
 296:	80 ec       	ldi	r24, 0xC0	; 192
 298:	86 0f       	add	r24, r22
 29a:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
 29e:	08 95       	ret
 2a0:	83 30       	cpi	r24, 0x03	; 3
 2a2:	29 f4       	brne	.+10     	; 0x2ae <LCD_GoTo+0x2a>
 2a4:	84 e9       	ldi	r24, 0x94	; 148
 2a6:	86 0f       	add	r24, r22
 2a8:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
 2ac:	08 95       	ret
 2ae:	84 30       	cpi	r24, 0x04	; 4
 2b0:	21 f4       	brne	.+8      	; 0x2ba <LCD_GoTo+0x36>
 2b2:	84 ed       	ldi	r24, 0xD4	; 212
 2b4:	86 0f       	add	r24, r22
 2b6:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
 2ba:	08 95       	ret

000002bc <LCD_WriteChar>:
 2bc:	0e 94 b6 00 	call	0x16c	; 0x16c <WriteData>
 2c0:	08 95       	ret

000002c2 <LCD_WriteString>:
 2c2:	0f 93       	push	r16
 2c4:	1f 93       	push	r17
 2c6:	cf 93       	push	r28
 2c8:	8c 01       	movw	r16, r24
 2ca:	c0 e0       	ldi	r28, 0x00	; 0
 2cc:	03 c0       	rjmp	.+6      	; 0x2d4 <LCD_WriteString+0x12>
 2ce:	0e 94 b6 00 	call	0x16c	; 0x16c <WriteData>
 2d2:	cf 5f       	subi	r28, 0xFF	; 255
 2d4:	f8 01       	movw	r30, r16
 2d6:	ec 0f       	add	r30, r28
 2d8:	f1 1d       	adc	r31, r1
 2da:	80 81       	ld	r24, Z
 2dc:	81 11       	cpse	r24, r1
 2de:	f7 cf       	rjmp	.-18     	; 0x2ce <LCD_WriteString+0xc>
 2e0:	cf 91       	pop	r28
 2e2:	1f 91       	pop	r17
 2e4:	0f 91       	pop	r16
 2e6:	08 95       	ret

000002e8 <LCD_CustomerChar>:


void LCD_CustomerChar(uint8_t address , uint8_t*character)
{
 2e8:	0f 93       	push	r16
 2ea:	1f 93       	push	r17
 2ec:	cf 93       	push	r28
 2ee:	8b 01       	movw	r16, r22
	
	WriteIns(0x40+(address*8));
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	08 96       	adiw	r24, 0x08	; 8
 2f4:	88 0f       	add	r24, r24
 2f6:	88 0f       	add	r24, r24
 2f8:	88 0f       	add	r24, r24
 2fa:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
	
	for(uint8_t i=0;i<8;i++)
 2fe:	c0 e0       	ldi	r28, 0x00	; 0
 300:	07 c0       	rjmp	.+14     	; 0x310 <LCD_CustomerChar+0x28>
	{
		WriteData(character[i]);
 302:	f8 01       	movw	r30, r16
 304:	ec 0f       	add	r30, r28
 306:	f1 1d       	adc	r31, r1
 308:	80 81       	ld	r24, Z
 30a:	0e 94 b6 00 	call	0x16c	; 0x16c <WriteData>
void LCD_CustomerChar(uint8_t address , uint8_t*character)
{
	
	WriteIns(0x40+(address*8));
	
	for(uint8_t i=0;i<8;i++)
 30e:	cf 5f       	subi	r28, 0xFF	; 255
 310:	c8 30       	cpi	r28, 0x08	; 8
 312:	b8 f3       	brcs	.-18     	; 0x302 <LCD_CustomerChar+0x1a>
	{
		WriteData(character[i]);
	}
	WriteIns(0x80);
 314:	80 e8       	ldi	r24, 0x80	; 128
 316:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
}
 31a:	cf 91       	pop	r28
 31c:	1f 91       	pop	r17
 31e:	0f 91       	pop	r16
 320:	08 95       	ret

00000322 <LCD_Clear>:

void LCD_Clear()
{
	WriteIns(0x01);
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 328:	8f e3       	ldi	r24, 0x3F	; 63
 32a:	9f e1       	ldi	r25, 0x1F	; 31
 32c:	01 97       	sbiw	r24, 0x01	; 1
 32e:	f1 f7       	brne	.-4      	; 0x32c <LCD_Clear+0xa>
 330:	00 c0       	rjmp	.+0      	; 0x332 <LCD_Clear+0x10>
 332:	00 00       	nop
	_delay_ms(2);
	WriteIns(0x80);
 334:	80 e8       	ldi	r24, 0x80	; 128
 336:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
 33a:	08 95       	ret

0000033c <main>:
	0b00001
};

int main(void)
{
	LCD_Init();
 33c:	0e 94 23 01 	call	0x246	; 0x246 <LCD_Init>
	LCD_CustomerChar(1,customChar);
 340:	60 e8       	ldi	r22, 0x80	; 128
 342:	70 e0       	ldi	r23, 0x00	; 0
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_CustomerChar>
	LCD_CustomerChar(2,customChar2);
 34a:	68 e7       	ldi	r22, 0x78	; 120
 34c:	70 e0       	ldi	r23, 0x00	; 0
 34e:	82 e0       	ldi	r24, 0x02	; 2
 350:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_CustomerChar>
	LCD_CustomerChar(3,customChar3);
 354:	60 e7       	ldi	r22, 0x70	; 112
 356:	70 e0       	ldi	r23, 0x00	; 0
 358:	83 e0       	ldi	r24, 0x03	; 3
 35a:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_CustomerChar>
	LCD_CustomerChar(4,customCharT1);
 35e:	68 e6       	ldi	r22, 0x68	; 104
 360:	70 e0       	ldi	r23, 0x00	; 0
 362:	84 e0       	ldi	r24, 0x04	; 4
 364:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_CustomerChar>
	LCD_CustomerChar(5,customCharT2);
 368:	60 e6       	ldi	r22, 0x60	; 96
 36a:	70 e0       	ldi	r23, 0x00	; 0
 36c:	85 e0       	ldi	r24, 0x05	; 5
 36e:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_CustomerChar>
	LCD_GoTo(1,9);
 372:	69 e0       	ldi	r22, 0x09	; 9
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	0e 94 42 01 	call	0x284	; 0x284 <LCD_GoTo>
	LCD_WriteChar(1);
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_WriteChar>
	LCD_GoTo(3,0);
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	83 e0       	ldi	r24, 0x03	; 3
 384:	0e 94 42 01 	call	0x284	; 0x284 <LCD_GoTo>
	LCD_WriteString("Engineer's story:(");
 388:	88 e8       	ldi	r24, 0x88	; 136
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_WriteString>
 390:	2f ef       	ldi	r18, 0xFF	; 255
 392:	87 ea       	ldi	r24, 0xA7	; 167
 394:	91 e6       	ldi	r25, 0x61	; 97
 396:	21 50       	subi	r18, 0x01	; 1
 398:	80 40       	sbci	r24, 0x00	; 0
 39a:	90 40       	sbci	r25, 0x00	; 0
 39c:	e1 f7       	brne	.-8      	; 0x396 <main+0x5a>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <main+0x64>
 3a0:	00 00       	nop
	_delay_ms(2000);
	LCD_Clear();
 3a2:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Clear>
	
	LCD_GoTo(1,9);
 3a6:	69 e0       	ldi	r22, 0x09	; 9
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	0e 94 42 01 	call	0x284	; 0x284 <LCD_GoTo>
	LCD_WriteChar(1);
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_WriteChar>
	for(int i=0 ;i<20;i++){
 3b4:	c0 e0       	ldi	r28, 0x00	; 0
 3b6:	d0 e0       	ldi	r29, 0x00	; 0
 3b8:	08 c0       	rjmp	.+16     	; 0x3ca <main+0x8e>
		LCD_GoTo(2,i);
 3ba:	6c 2f       	mov	r22, r28
 3bc:	82 e0       	ldi	r24, 0x02	; 2
 3be:	0e 94 42 01 	call	0x284	; 0x284 <LCD_GoTo>
		LCD_WriteChar(2);
 3c2:	82 e0       	ldi	r24, 0x02	; 2
 3c4:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_WriteChar>
	_delay_ms(2000);
	LCD_Clear();
	
	LCD_GoTo(1,9);
	LCD_WriteChar(1);
	for(int i=0 ;i<20;i++){
 3c8:	21 96       	adiw	r28, 0x01	; 1
 3ca:	c4 31       	cpi	r28, 0x14	; 20
 3cc:	d1 05       	cpc	r29, r1
 3ce:	ac f3       	brlt	.-22     	; 0x3ba <main+0x7e>
		LCD_GoTo(2,i);
		LCD_WriteChar(2);
	}
	LCD_GoTo(3,0);
 3d0:	60 e0       	ldi	r22, 0x00	; 0
 3d2:	83 e0       	ldi	r24, 0x03	; 3
 3d4:	0e 94 42 01 	call	0x284	; 0x284 <LCD_GoTo>
	LCD_WriteString("Waiting for the bus");
 3d8:	8b e9       	ldi	r24, 0x9B	; 155
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_WriteString>
	LCD_GoTo(4,0);
 3e0:	60 e0       	ldi	r22, 0x00	; 0
 3e2:	84 e0       	ldi	r24, 0x04	; 4
 3e4:	0e 94 42 01 	call	0x284	; 0x284 <LCD_GoTo>
	LCD_WriteString("every morning ");
 3e8:	8f ea       	ldi	r24, 0xAF	; 175
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_WriteString>
 3f0:	2f ef       	ldi	r18, 0xFF	; 255
 3f2:	87 ea       	ldi	r24, 0xA7	; 167
 3f4:	91 e6       	ldi	r25, 0x61	; 97
 3f6:	21 50       	subi	r18, 0x01	; 1
 3f8:	80 40       	sbci	r24, 0x00	; 0
 3fa:	90 40       	sbci	r25, 0x00	; 0
 3fc:	e1 f7       	brne	.-8      	; 0x3f6 <main+0xba>
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <__EEPROM_REGION_LENGTH__>
 400:	00 00       	nop
	_delay_ms(2000);
	LCD_Clear();
 402:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Clear>
	
	LCD_GoTo(1,0);
 406:	60 e0       	ldi	r22, 0x00	; 0
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	0e 94 42 01 	call	0x284	; 0x284 <LCD_GoTo>
	LCD_WriteString("After many attempts");
 40e:	8e eb       	ldi	r24, 0xBE	; 190
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_WriteString>
	LCD_GoTo(2,0);
 416:	60 e0       	ldi	r22, 0x00	; 0
 418:	82 e0       	ldi	r24, 0x02	; 2
 41a:	0e 94 42 01 	call	0x284	; 0x284 <LCD_GoTo>
	LCD_WriteString("to reach this dream");
 41e:	82 ed       	ldi	r24, 0xD2	; 210
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_WriteString>
	LCD_GoTo(3,0);
 426:	60 e0       	ldi	r22, 0x00	; 0
 428:	83 e0       	ldi	r24, 0x03	; 3
 42a:	0e 94 42 01 	call	0x284	; 0x284 <LCD_GoTo>
	LCD_WriteString("COURSES!!!");
 42e:	86 ee       	ldi	r24, 0xE6	; 230
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_WriteString>
	LCD_GoTo(4,8);
 436:	68 e0       	ldi	r22, 0x08	; 8
 438:	84 e0       	ldi	r24, 0x04	; 4
 43a:	0e 94 42 01 	call	0x284	; 0x284 <LCD_GoTo>
	LCD_WriteChar(4);
 43e:	84 e0       	ldi	r24, 0x04	; 4
 440:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_WriteChar>
	LCD_GoTo(4,9);
 444:	69 e0       	ldi	r22, 0x09	; 9
 446:	84 e0       	ldi	r24, 0x04	; 4
 448:	0e 94 42 01 	call	0x284	; 0x284 <LCD_GoTo>
	LCD_WriteChar(5);
 44c:	85 e0       	ldi	r24, 0x05	; 5
 44e:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_WriteChar>
	LCD_GoTo(4,12);
 452:	6c e0       	ldi	r22, 0x0C	; 12
 454:	84 e0       	ldi	r24, 0x04	; 4
 456:	0e 94 42 01 	call	0x284	; 0x284 <LCD_GoTo>
	LCD_WriteChar(1);
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_WriteChar>
 460:	2f ef       	ldi	r18, 0xFF	; 255
 462:	87 ea       	ldi	r24, 0xA7	; 167
 464:	91 e6       	ldi	r25, 0x61	; 97
 466:	21 50       	subi	r18, 0x01	; 1
 468:	80 40       	sbci	r24, 0x00	; 0
 46a:	90 40       	sbci	r25, 0x00	; 0
 46c:	e1 f7       	brne	.-8      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 470:	00 00       	nop
	_delay_ms(2000);
	LCD_Clear();
 472:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Clear>
	
	LCD_GoTo(3,0);
 476:	60 e0       	ldi	r22, 0x00	; 0
 478:	83 e0       	ldi	r24, 0x03	; 3
 47a:	0e 94 42 01 	call	0x284	; 0x284 <LCD_GoTo>
	LCD_WriteString("Close ones helped me");
 47e:	81 ef       	ldi	r24, 0xF1	; 241
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_WriteString>
	LCD_GoTo(4,0);
 486:	60 e0       	ldi	r22, 0x00	; 0
 488:	84 e0       	ldi	r24, 0x04	; 4
 48a:	0e 94 42 01 	call	0x284	; 0x284 <LCD_GoTo>
	LCD_WriteString("to reach this way");
 48e:	86 e0       	ldi	r24, 0x06	; 6
 490:	91 e0       	ldi	r25, 0x01	; 1
 492:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_WriteString>
	LCD_GoTo(1,9);
 496:	69 e0       	ldi	r22, 0x09	; 9
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	0e 94 42 01 	call	0x284	; 0x284 <LCD_GoTo>
	LCD_WriteChar(1);
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_WriteChar>
	for(int i=8;i>5;i--){
 4a4:	c8 e0       	ldi	r28, 0x08	; 8
 4a6:	d0 e0       	ldi	r29, 0x00	; 0
 4a8:	08 c0       	rjmp	.+16     	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
		LCD_GoTo(1,i);
 4aa:	6c 2f       	mov	r22, r28
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	0e 94 42 01 	call	0x284	; 0x284 <LCD_GoTo>
		LCD_WriteChar(1);
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_WriteChar>
	LCD_WriteString("Close ones helped me");
	LCD_GoTo(4,0);
	LCD_WriteString("to reach this way");
	LCD_GoTo(1,9);
	LCD_WriteChar(1);
	for(int i=8;i>5;i--){
 4b8:	21 97       	sbiw	r28, 0x01	; 1
 4ba:	c6 30       	cpi	r28, 0x06	; 6
 4bc:	d1 05       	cpc	r29, r1
 4be:	ac f7       	brge	.-22     	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
 4c0:	ca e0       	ldi	r28, 0x0A	; 10
 4c2:	d0 e0       	ldi	r29, 0x00	; 0
 4c4:	08 c0       	rjmp	.+16     	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
		LCD_GoTo(1,i);
		LCD_WriteChar(1);
	}
	for(int i=10;i<13;i++){
		LCD_GoTo(1,i);
 4c6:	6c 2f       	mov	r22, r28
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	0e 94 42 01 	call	0x284	; 0x284 <LCD_GoTo>
		LCD_WriteChar(1);
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_WriteChar>
	LCD_WriteChar(1);
	for(int i=8;i>5;i--){
		LCD_GoTo(1,i);
		LCD_WriteChar(1);
	}
	for(int i=10;i<13;i++){
 4d4:	21 96       	adiw	r28, 0x01	; 1
 4d6:	cd 30       	cpi	r28, 0x0D	; 13
 4d8:	d1 05       	cpc	r29, r1
 4da:	ac f3       	brlt	.-22     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 4dc:	c0 e0       	ldi	r28, 0x00	; 0
 4de:	d0 e0       	ldi	r29, 0x00	; 0
 4e0:	08 c0       	rjmp	.+16     	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
		LCD_GoTo(1,i);
		LCD_WriteChar(1);
	}
	for(int i=0 ;i<20;i++){
		LCD_GoTo(2,i);
 4e2:	6c 2f       	mov	r22, r28
 4e4:	82 e0       	ldi	r24, 0x02	; 2
 4e6:	0e 94 42 01 	call	0x284	; 0x284 <LCD_GoTo>
		LCD_WriteChar(2);
 4ea:	82 e0       	ldi	r24, 0x02	; 2
 4ec:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_WriteChar>
	}
	for(int i=10;i<13;i++){
		LCD_GoTo(1,i);
		LCD_WriteChar(1);
	}
	for(int i=0 ;i<20;i++){
 4f0:	21 96       	adiw	r28, 0x01	; 1
 4f2:	c4 31       	cpi	r28, 0x14	; 20
 4f4:	d1 05       	cpc	r29, r1
 4f6:	ac f3       	brlt	.-22     	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
 4f8:	2f ef       	ldi	r18, 0xFF	; 255
 4fa:	87 ea       	ldi	r24, 0xA7	; 167
 4fc:	91 e6       	ldi	r25, 0x61	; 97
 4fe:	21 50       	subi	r18, 0x01	; 1
 500:	80 40       	sbci	r24, 0x00	; 0
 502:	90 40       	sbci	r25, 0x00	; 0
 504:	e1 f7       	brne	.-8      	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
 506:	00 c0       	rjmp	.+0      	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
 508:	00 00       	nop
		LCD_GoTo(2,i);
		LCD_WriteChar(2);
	}
	_delay_ms(2000);
	LCD_Clear();
 50a:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Clear>
	
	LCD_GoTo(1,5);
 50e:	65 e0       	ldi	r22, 0x05	; 5
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	0e 94 42 01 	call	0x284	; 0x284 <LCD_GoTo>
	LCD_WriteChar(1);
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_WriteChar>
	LCD_GoTo(1,10);
 51c:	6a e0       	ldi	r22, 0x0A	; 10
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	0e 94 42 01 	call	0x284	; 0x284 <LCD_GoTo>
	LCD_WriteChar(3);
 524:	83 e0       	ldi	r24, 0x03	; 3
 526:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_WriteChar>
	LCD_GoTo(1,15);
 52a:	6f e0       	ldi	r22, 0x0F	; 15
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	0e 94 42 01 	call	0x284	; 0x284 <LCD_GoTo>
	LCD_WriteChar(3);
 532:	83 e0       	ldi	r24, 0x03	; 3
 534:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_WriteChar>
	for(int i=0 ;i<20;i++){
 538:	c0 e0       	ldi	r28, 0x00	; 0
 53a:	d0 e0       	ldi	r29, 0x00	; 0
 53c:	08 c0       	rjmp	.+16     	; 0x54e <__EEPROM_REGION_LENGTH__+0x14e>
		LCD_GoTo(2,i);
 53e:	6c 2f       	mov	r22, r28
 540:	82 e0       	ldi	r24, 0x02	; 2
 542:	0e 94 42 01 	call	0x284	; 0x284 <LCD_GoTo>
		LCD_WriteChar(2);
 546:	82 e0       	ldi	r24, 0x02	; 2
 548:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_WriteChar>
	LCD_WriteChar(1);
	LCD_GoTo(1,10);
	LCD_WriteChar(3);
	LCD_GoTo(1,15);
	LCD_WriteChar(3);
	for(int i=0 ;i<20;i++){
 54c:	21 96       	adiw	r28, 0x01	; 1
 54e:	c4 31       	cpi	r28, 0x14	; 20
 550:	d1 05       	cpc	r29, r1
 552:	ac f3       	brlt	.-22     	; 0x53e <__EEPROM_REGION_LENGTH__+0x13e>
		LCD_GoTo(2,i);
		LCD_WriteChar(2);
	}
	
	LCD_GoTo(3,0);
 554:	60 e0       	ldi	r22, 0x00	; 0
 556:	83 e0       	ldi	r24, 0x03	; 3
 558:	0e 94 42 01 	call	0x284	; 0x284 <LCD_GoTo>
	LCD_WriteString("However,I have :(");
 55c:	88 e1       	ldi	r24, 0x18	; 24
 55e:	91 e0       	ldi	r25, 0x01	; 1
 560:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_WriteString>
	LCD_GoTo(4,0);
 564:	60 e0       	ldi	r22, 0x00	; 0
 566:	84 e0       	ldi	r24, 0x04	; 4
 568:	0e 94 42 01 	call	0x284	; 0x284 <LCD_GoTo>
	LCD_WriteString("sacrificed a lot ");
 56c:	8a e2       	ldi	r24, 0x2A	; 42
 56e:	91 e0       	ldi	r25, 0x01	; 1
 570:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_WriteString>
 574:	2f ef       	ldi	r18, 0xFF	; 255
 576:	87 ea       	ldi	r24, 0xA7	; 167
 578:	91 e6       	ldi	r25, 0x61	; 97
 57a:	21 50       	subi	r18, 0x01	; 1
 57c:	80 40       	sbci	r24, 0x00	; 0
 57e:	90 40       	sbci	r25, 0x00	; 0
 580:	e1 f7       	brne	.-8      	; 0x57a <__EEPROM_REGION_LENGTH__+0x17a>
 582:	00 c0       	rjmp	.+0      	; 0x584 <__EEPROM_REGION_LENGTH__+0x184>
 584:	00 00       	nop
	_delay_ms(2000);
	LCD_Clear();
 586:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Clear>
	
	
	LCD_GoTo(2,0);
 58a:	60 e0       	ldi	r22, 0x00	; 0
 58c:	82 e0       	ldi	r24, 0x02	; 2
 58e:	0e 94 42 01 	call	0x284	; 0x284 <LCD_GoTo>
	LCD_WriteString("In the end,  ");
 592:	8c e3       	ldi	r24, 0x3C	; 60
 594:	91 e0       	ldi	r25, 0x01	; 1
 596:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_WriteString>
	LCD_WriteChar(3);
 59a:	83 e0       	ldi	r24, 0x03	; 3
 59c:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_WriteChar>
	LCD_GoTo(3,0);
 5a0:	60 e0       	ldi	r22, 0x00	; 0
 5a2:	83 e0       	ldi	r24, 0x03	; 3
 5a4:	0e 94 42 01 	call	0x284	; 0x284 <LCD_GoTo>
	LCD_WriteString("the hero wins");
 5a8:	8a e4       	ldi	r24, 0x4A	; 74
 5aa:	91 e0       	ldi	r25, 0x01	; 1
 5ac:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_WriteString>
 5b0:	2f ef       	ldi	r18, 0xFF	; 255
 5b2:	87 ea       	ldi	r24, 0xA7	; 167
 5b4:	91 e6       	ldi	r25, 0x61	; 97
 5b6:	21 50       	subi	r18, 0x01	; 1
 5b8:	80 40       	sbci	r24, 0x00	; 0
 5ba:	90 40       	sbci	r25, 0x00	; 0
 5bc:	e1 f7       	brne	.-8      	; 0x5b6 <__EEPROM_REGION_LENGTH__+0x1b6>
 5be:	00 c0       	rjmp	.+0      	; 0x5c0 <__EEPROM_REGION_LENGTH__+0x1c0>
 5c0:	00 00       	nop
	_delay_ms(2000);
	LCD_Clear();
 5c2:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Clear>
	
	LCD_GoTo(1,9);
 5c6:	69 e0       	ldi	r22, 0x09	; 9
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	0e 94 42 01 	call	0x284	; 0x284 <LCD_GoTo>
	LCD_WriteChar(1);
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_WriteChar>
	for(int i=0 ;i<20;i++){
 5d4:	c0 e0       	ldi	r28, 0x00	; 0
 5d6:	d0 e0       	ldi	r29, 0x00	; 0
 5d8:	08 c0       	rjmp	.+16     	; 0x5ea <__EEPROM_REGION_LENGTH__+0x1ea>
		LCD_GoTo(2,i);
 5da:	6c 2f       	mov	r22, r28
 5dc:	82 e0       	ldi	r24, 0x02	; 2
 5de:	0e 94 42 01 	call	0x284	; 0x284 <LCD_GoTo>
		LCD_WriteChar(2);
 5e2:	82 e0       	ldi	r24, 0x02	; 2
 5e4:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_WriteChar>
	_delay_ms(2000);
	LCD_Clear();
	
	LCD_GoTo(1,9);
	LCD_WriteChar(1);
	for(int i=0 ;i<20;i++){
 5e8:	21 96       	adiw	r28, 0x01	; 1
 5ea:	c4 31       	cpi	r28, 0x14	; 20
 5ec:	d1 05       	cpc	r29, r1
 5ee:	ac f3       	brlt	.-22     	; 0x5da <__EEPROM_REGION_LENGTH__+0x1da>
		LCD_GoTo(2,i);
		LCD_WriteChar(2);
	}
	LCD_GoTo(3,0);
 5f0:	60 e0       	ldi	r22, 0x00	; 0
 5f2:	83 e0       	ldi	r24, 0x03	; 3
 5f4:	0e 94 42 01 	call	0x284	; 0x284 <LCD_GoTo>
	LCD_WriteString("But he remains alone");
 5f8:	88 e5       	ldi	r24, 0x58	; 88
 5fa:	91 e0       	ldi	r25, 0x01	; 1
 5fc:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_WriteString>
 600:	ff cf       	rjmp	.-2      	; 0x600 <__EEPROM_REGION_LENGTH__+0x200>

00000602 <__vector_16>:
	//Clear ADIF flag
	Reset_Bit(ADCSRA, 4);
}

ISR(ADC_vect)
{
 602:	1f 92       	push	r1
 604:	0f 92       	push	r0
 606:	0f b6       	in	r0, 0x3f	; 63
 608:	0f 92       	push	r0
 60a:	11 24       	eor	r1, r1
 60c:	2f 93       	push	r18
 60e:	3f 93       	push	r19
 610:	4f 93       	push	r20
 612:	5f 93       	push	r21
 614:	6f 93       	push	r22
 616:	7f 93       	push	r23
 618:	8f 93       	push	r24
 61a:	9f 93       	push	r25
 61c:	af 93       	push	r26
 61e:	bf 93       	push	r27
 620:	ef 93       	push	r30
 622:	ff 93       	push	r31
	Global_ADC_Config.P_CallBack();
 624:	e0 91 73 01 	lds	r30, 0x0173	; 0x800173 <__data_end+0x5>
 628:	f0 91 74 01 	lds	r31, 0x0174	; 0x800174 <__data_end+0x6>
 62c:	09 95       	icall
 62e:	ff 91       	pop	r31
 630:	ef 91       	pop	r30
 632:	bf 91       	pop	r27
 634:	af 91       	pop	r26
 636:	9f 91       	pop	r25
 638:	8f 91       	pop	r24
 63a:	7f 91       	pop	r23
 63c:	6f 91       	pop	r22
 63e:	5f 91       	pop	r21
 640:	4f 91       	pop	r20
 642:	3f 91       	pop	r19
 644:	2f 91       	pop	r18
 646:	0f 90       	pop	r0
 648:	0f be       	out	0x3f, r0	; 63
 64a:	0f 90       	pop	r0
 64c:	1f 90       	pop	r1
 64e:	18 95       	reti

00000650 <digitalWrite>:
 * Retval            -None.
 * Note              -None.
 */
void digitalWrite(PORTS PORT , DIO_PinType PIN , uint8_t value)
{
	switch(PORT)
 650:	81 30       	cpi	r24, 0x01	; 1
 652:	19 f1       	breq	.+70     	; 0x69a <digitalWrite+0x4a>
 654:	30 f0       	brcs	.+12     	; 0x662 <digitalWrite+0x12>
 656:	82 30       	cpi	r24, 0x02	; 2
 658:	e1 f1       	breq	.+120    	; 0x6d2 <digitalWrite+0x82>
 65a:	83 30       	cpi	r24, 0x03	; 3
 65c:	09 f4       	brne	.+2      	; 0x660 <digitalWrite+0x10>
 65e:	55 c0       	rjmp	.+170    	; 0x70a <digitalWrite+0xba>
 660:	08 95       	ret
	{
		case PORT_A :
		switch(value)
 662:	44 23       	and	r20, r20
 664:	19 f0       	breq	.+6      	; 0x66c <digitalWrite+0x1c>
 666:	41 30       	cpi	r20, 0x01	; 1
 668:	69 f0       	breq	.+26     	; 0x684 <digitalWrite+0x34>
 66a:	08 95       	ret
		{
			case LOW:
			Reset_Bit(PORTA,PIN);
 66c:	2b b3       	in	r18, 0x1b	; 27
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	02 c0       	rjmp	.+4      	; 0x678 <digitalWrite+0x28>
 674:	88 0f       	add	r24, r24
 676:	99 1f       	adc	r25, r25
 678:	6a 95       	dec	r22
 67a:	e2 f7       	brpl	.-8      	; 0x674 <digitalWrite+0x24>
 67c:	80 95       	com	r24
 67e:	82 23       	and	r24, r18
 680:	8b bb       	out	0x1b, r24	; 27
			break;
 682:	08 95       	ret
			
			case HIGH:
			Set_Bit(PORTA,PIN);
 684:	2b b3       	in	r18, 0x1b	; 27
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	02 c0       	rjmp	.+4      	; 0x690 <digitalWrite+0x40>
 68c:	88 0f       	add	r24, r24
 68e:	99 1f       	adc	r25, r25
 690:	6a 95       	dec	r22
 692:	e2 f7       	brpl	.-8      	; 0x68c <digitalWrite+0x3c>
 694:	82 2b       	or	r24, r18
 696:	8b bb       	out	0x1b, r24	; 27
			break;
 698:	08 95       	ret
			
		}
		break;
		
		case PORT_B :
		switch(value)
 69a:	44 23       	and	r20, r20
 69c:	19 f0       	breq	.+6      	; 0x6a4 <digitalWrite+0x54>
 69e:	41 30       	cpi	r20, 0x01	; 1
 6a0:	69 f0       	breq	.+26     	; 0x6bc <digitalWrite+0x6c>
 6a2:	08 95       	ret
		{
			case LOW:
			Reset_Bit(PORTB,PIN);
 6a4:	28 b3       	in	r18, 0x18	; 24
 6a6:	81 e0       	ldi	r24, 0x01	; 1
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <digitalWrite+0x60>
 6ac:	88 0f       	add	r24, r24
 6ae:	99 1f       	adc	r25, r25
 6b0:	6a 95       	dec	r22
 6b2:	e2 f7       	brpl	.-8      	; 0x6ac <digitalWrite+0x5c>
 6b4:	80 95       	com	r24
 6b6:	82 23       	and	r24, r18
 6b8:	88 bb       	out	0x18, r24	; 24
			break;
 6ba:	08 95       	ret
			
			case HIGH:
			Set_Bit(PORTB,PIN);
 6bc:	28 b3       	in	r18, 0x18	; 24
 6be:	81 e0       	ldi	r24, 0x01	; 1
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <digitalWrite+0x78>
 6c4:	88 0f       	add	r24, r24
 6c6:	99 1f       	adc	r25, r25
 6c8:	6a 95       	dec	r22
 6ca:	e2 f7       	brpl	.-8      	; 0x6c4 <digitalWrite+0x74>
 6cc:	82 2b       	or	r24, r18
 6ce:	88 bb       	out	0x18, r24	; 24
			break;
 6d0:	08 95       	ret
		}
		break;
		
		
		case PORT_C :
		switch(value)
 6d2:	44 23       	and	r20, r20
 6d4:	19 f0       	breq	.+6      	; 0x6dc <digitalWrite+0x8c>
 6d6:	41 30       	cpi	r20, 0x01	; 1
 6d8:	69 f0       	breq	.+26     	; 0x6f4 <digitalWrite+0xa4>
 6da:	08 95       	ret
		{
			case LOW:
			Reset_Bit(PORTC,PIN);
 6dc:	25 b3       	in	r18, 0x15	; 21
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <digitalWrite+0x98>
 6e4:	88 0f       	add	r24, r24
 6e6:	99 1f       	adc	r25, r25
 6e8:	6a 95       	dec	r22
 6ea:	e2 f7       	brpl	.-8      	; 0x6e4 <digitalWrite+0x94>
 6ec:	80 95       	com	r24
 6ee:	82 23       	and	r24, r18
 6f0:	85 bb       	out	0x15, r24	; 21
			break;
 6f2:	08 95       	ret
			
			case HIGH:
			Set_Bit(PORTC,PIN);
 6f4:	25 b3       	in	r18, 0x15	; 21
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	02 c0       	rjmp	.+4      	; 0x700 <digitalWrite+0xb0>
 6fc:	88 0f       	add	r24, r24
 6fe:	99 1f       	adc	r25, r25
 700:	6a 95       	dec	r22
 702:	e2 f7       	brpl	.-8      	; 0x6fc <digitalWrite+0xac>
 704:	82 2b       	or	r24, r18
 706:	85 bb       	out	0x15, r24	; 21
			break;
 708:	08 95       	ret
			
		}
		break;
		
		case PORT_D :
		switch(value)
 70a:	44 23       	and	r20, r20
 70c:	19 f0       	breq	.+6      	; 0x714 <digitalWrite+0xc4>
 70e:	41 30       	cpi	r20, 0x01	; 1
 710:	69 f0       	breq	.+26     	; 0x72c <digitalWrite+0xdc>
 712:	08 95       	ret
		{
			case LOW:
			Reset_Bit(PORTD,PIN);
 714:	22 b3       	in	r18, 0x12	; 18
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	02 c0       	rjmp	.+4      	; 0x720 <digitalWrite+0xd0>
 71c:	88 0f       	add	r24, r24
 71e:	99 1f       	adc	r25, r25
 720:	6a 95       	dec	r22
 722:	e2 f7       	brpl	.-8      	; 0x71c <digitalWrite+0xcc>
 724:	80 95       	com	r24
 726:	82 23       	and	r24, r18
 728:	82 bb       	out	0x12, r24	; 18
			break;
 72a:	08 95       	ret
			
			case HIGH:
			Set_Bit(PORTD,PIN);
 72c:	22 b3       	in	r18, 0x12	; 18
 72e:	81 e0       	ldi	r24, 0x01	; 1
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	02 c0       	rjmp	.+4      	; 0x738 <digitalWrite+0xe8>
 734:	88 0f       	add	r24, r24
 736:	99 1f       	adc	r25, r25
 738:	6a 95       	dec	r22
 73a:	e2 f7       	brpl	.-8      	; 0x734 <digitalWrite+0xe4>
 73c:	82 2b       	or	r24, r18
 73e:	82 bb       	out	0x12, r24	; 18
 740:	08 95       	ret

00000742 <_exit>:
 742:	f8 94       	cli

00000744 <__stop_program>:
 744:	ff cf       	rjmp	.-2      	; 0x744 <__stop_program>
