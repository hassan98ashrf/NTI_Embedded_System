
EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  000006ae  00000722  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000774  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000140  00000000  00000000  000007b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001949  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a43  00000000  00000000  00002239  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000cda  00000000  00000000  00002c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000270  00000000  00000000  00003958  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005e8  00000000  00000000  00003bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000fa9  00000000  00000000  000041b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  00005159  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ea       	ldi	r30, 0xAE	; 174
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <main>
  7a:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <EEPROM_Init>:



void EEPROM_Init(void)
{
	TWI_INIT();
  82:	0e 94 16 03 	call	0x62c	; 0x62c <TWI_INIT>
  86:	08 95       	ret

00000088 <EEPROM_SaveData>:
}

/* this will write the data to address 0*/
void EEPROM_SaveData(uint8_t pageNum, uint8_t byte_address, uint8_t data)
{
  88:	1f 93       	push	r17
  8a:	cf 93       	push	r28
  8c:	df 93       	push	r29
  8e:	c8 2f       	mov	r28, r24
  90:	16 2f       	mov	r17, r22
  92:	d4 2f       	mov	r29, r20
	TWI_INIT();
  94:	0e 94 16 03 	call	0x62c	; 0x62c <TWI_INIT>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	2f ef       	ldi	r18, 0xFF	; 255
  9a:	89 e6       	ldi	r24, 0x69	; 105
  9c:	98 e1       	ldi	r25, 0x18	; 24
  9e:	21 50       	subi	r18, 0x01	; 1
  a0:	80 40       	sbci	r24, 0x00	; 0
  a2:	90 40       	sbci	r25, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <EEPROM_SaveData+0x16>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <EEPROM_SaveData+0x20>
  a8:	00 00       	nop
	_delay_ms(500);
	TWI_WriteStartCond(); // transmit start condition // 0x00a0
  aa:	0e 94 1a 03 	call	0x634	; 0x634 <TWI_WriteStartCond>
	uint8_t var = (DEVICE_ADDRESS | pageNum) & 0xFE;
  ae:	8c 2f       	mov	r24, r28
  b0:	8e 7f       	andi	r24, 0xFE	; 254
	// transmit device address and Write
	TWI_WriteSlaveAdd_With_Op(var,I2C_WRITE);
  b2:	60 e0       	ldi	r22, 0x00	; 0
  b4:	80 65       	ori	r24, 0x50	; 80
  b6:	0e 94 3b 03 	call	0x676	; 0x676 <TWI_WriteSlaveAdd_With_Op>
	TWI_WriteData(byte_address); // transmit word address
  ba:	81 2f       	mov	r24, r17
  bc:	0e 94 2d 03 	call	0x65a	; 0x65a <TWI_WriteData>
	
	TWI_WriteData(data); // transmit data
  c0:	8d 2f       	mov	r24, r29
  c2:	0e 94 2d 03 	call	0x65a	; 0x65a <TWI_WriteData>
	TWI_WriteStopCond(); // transmit stop condition
  c6:	0e 94 2a 03 	call	0x654	; 0x654 <TWI_WriteStopCond>
  ca:	2f ef       	ldi	r18, 0xFF	; 255
  cc:	83 ec       	ldi	r24, 0xC3	; 195
  ce:	99 e0       	ldi	r25, 0x09	; 9
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <EEPROM_SaveData+0x48>
  d8:	00 c0       	rjmp	.+0      	; 0xda <EEPROM_SaveData+0x52>
  da:	00 00       	nop
	_delay_ms(200);
}
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	1f 91       	pop	r17
  e2:	08 95       	ret

000000e4 <EEPROM_ReadData>:


uint8_t EEPROM_ReadData(uint8_t pageNumber, uint8_t byte_address)
{
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	c8 2f       	mov	r28, r24
  ea:	d6 2f       	mov	r29, r22
	uint8_t data = 0;
	TWI_INIT();
  ec:	0e 94 16 03 	call	0x62c	; 0x62c <TWI_INIT>
	TWI_WriteStartCond(); // transmit start condition
  f0:	0e 94 1a 03 	call	0x634	; 0x634 <TWI_WriteStartCond>
	uint8_t var = (DEVICE_ADDRESS | pageNumber) & 0xFE;
  f4:	ce 7f       	andi	r28, 0xFE	; 254
  f6:	c0 65       	ori	r28, 0x50	; 80
	TWI_WriteSlaveAdd_With_Op(var,I2C_WRITE);// transmit device address and Write
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	8c 2f       	mov	r24, r28
  fc:	0e 94 3b 03 	call	0x676	; 0x676 <TWI_WriteSlaveAdd_With_Op>
	TWI_WriteData(byte_address); // transmit word address
 100:	8d 2f       	mov	r24, r29
 102:	0e 94 2d 03 	call	0x65a	; 0x65a <TWI_WriteData>
	TWI_INIT();
 106:	0e 94 16 03 	call	0x62c	; 0x62c <TWI_INIT>
	TWI_WriteRepStartCond(); // transmit repeated start condition
 10a:	0e 94 20 03 	call	0x640	; 0x640 <TWI_WriteRepStartCond>
	TWI_WriteSlaveAdd_With_Op(var,I2C_READ); // transmit device address and read
 10e:	61 e0       	ldi	r22, 0x01	; 1
 110:	8c 2f       	mov	r24, r28
 112:	0e 94 3b 03 	call	0x676	; 0x676 <TWI_WriteSlaveAdd_With_Op>
	data=TWI_ReadData_Write_NACK();
 116:	0e 94 34 03 	call	0x668	; 0x668 <TWI_ReadData_Write_NACK>
 11a:	c8 2f       	mov	r28, r24


	TWI_WriteStopCond();
 11c:	0e 94 2a 03 	call	0x654	; 0x654 <TWI_WriteStopCond>
	return data;
 120:	8c 2f       	mov	r24, r28
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	08 95       	ret

00000128 <Send_FallingEdge>:


static void Send_FallingEdge(void)
{
	// EN =1, delay 2ms , EN=0, delay 2ms, exit
	DIO_SetPinValue(EN_PORT,EN_PIN,HIGH);
 128:	41 e0       	ldi	r20, 0x01	; 1
 12a:	62 e0       	ldi	r22, 0x02	; 2
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	0e 94 9f 02 	call	0x53e	; 0x53e <DIO_SetPinValue>
 132:	8f e9       	ldi	r24, 0x9F	; 159
 134:	9f e0       	ldi	r25, 0x0F	; 15
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <Send_FallingEdge+0xe>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <Send_FallingEdge+0x14>
 13c:	00 00       	nop
	_delay_ms(2);
	DIO_SetPinValue(EN_PORT,EN_PIN,LOW);
 13e:	40 e0       	ldi	r20, 0x00	; 0
 140:	62 e0       	ldi	r22, 0x02	; 2
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	0e 94 9f 02 	call	0x53e	; 0x53e <DIO_SetPinValue>
 148:	8f e9       	ldi	r24, 0x9F	; 159
 14a:	9f e0       	ldi	r25, 0x0F	; 15
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <Send_FallingEdge+0x24>
 150:	00 c0       	rjmp	.+0      	; 0x152 <Send_FallingEdge+0x2a>
 152:	00 00       	nop
 154:	08 95       	ret

00000156 <LCD_vWriteCommand>:
	
}


void LCD_vWriteCommand(uint8_t cmd)
{
 156:	cf 93       	push	r28
 158:	c8 2f       	mov	r28, r24
	DIO_SetPinValue(DIO_PORTB,Pin4,READ_BIT(cmd,7));
 15a:	48 2f       	mov	r20, r24
 15c:	44 1f       	adc	r20, r20
 15e:	44 27       	eor	r20, r20
 160:	44 1f       	adc	r20, r20
 162:	64 e0       	ldi	r22, 0x04	; 4
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	0e 94 9f 02 	call	0x53e	; 0x53e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,Pin2,READ_BIT(cmd,6));
 16a:	c6 fb       	bst	r28, 6
 16c:	44 27       	eor	r20, r20
 16e:	40 f9       	bld	r20, 0
 170:	62 e0       	ldi	r22, 0x02	; 2
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	0e 94 9f 02 	call	0x53e	; 0x53e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,Pin1,READ_BIT(cmd,5));
 178:	c5 fb       	bst	r28, 5
 17a:	44 27       	eor	r20, r20
 17c:	40 f9       	bld	r20, 0
 17e:	61 e0       	ldi	r22, 0x01	; 1
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	0e 94 9f 02 	call	0x53e	; 0x53e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,Pin0,READ_BIT(cmd,4));
 186:	c4 fb       	bst	r28, 4
 188:	44 27       	eor	r20, r20
 18a:	40 f9       	bld	r20, 0
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	0e 94 9f 02 	call	0x53e	; 0x53e <DIO_SetPinValue>
	DIO_SetPinValue(RS_PORT,RS_PIN,LOW);
 194:	40 e0       	ldi	r20, 0x00	; 0
 196:	63 e0       	ldi	r22, 0x03	; 3
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	0e 94 9f 02 	call	0x53e	; 0x53e <DIO_SetPinValue>
	Send_FallingEdge();
 19e:	0e 94 94 00 	call	0x128	; 0x128 <Send_FallingEdge>
 1a2:	8f ec       	ldi	r24, 0xCF	; 207
 1a4:	97 e0       	ldi	r25, 0x07	; 7
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <LCD_vWriteCommand+0x50>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <LCD_vWriteCommand+0x56>
 1ac:	00 00       	nop
	_delay_ms(1);
	
	DIO_SetPinValue(DIO_PORTB,Pin4,READ_BIT(cmd,3));
 1ae:	c3 fb       	bst	r28, 3
 1b0:	44 27       	eor	r20, r20
 1b2:	40 f9       	bld	r20, 0
 1b4:	64 e0       	ldi	r22, 0x04	; 4
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	0e 94 9f 02 	call	0x53e	; 0x53e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,Pin2,READ_BIT(cmd,2));
 1bc:	c2 fb       	bst	r28, 2
 1be:	44 27       	eor	r20, r20
 1c0:	40 f9       	bld	r20, 0
 1c2:	62 e0       	ldi	r22, 0x02	; 2
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	0e 94 9f 02 	call	0x53e	; 0x53e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,Pin1,READ_BIT(cmd,1));
 1ca:	c1 fb       	bst	r28, 1
 1cc:	44 27       	eor	r20, r20
 1ce:	40 f9       	bld	r20, 0
 1d0:	61 e0       	ldi	r22, 0x01	; 1
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	0e 94 9f 02 	call	0x53e	; 0x53e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,Pin0,READ_BIT(cmd,0));
 1d8:	4c 2f       	mov	r20, r28
 1da:	41 70       	andi	r20, 0x01	; 1
 1dc:	60 e0       	ldi	r22, 0x00	; 0
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	0e 94 9f 02 	call	0x53e	; 0x53e <DIO_SetPinValue>
	DIO_SetPinValue(RS_PORT,RS_PIN,LOW);
 1e4:	40 e0       	ldi	r20, 0x00	; 0
 1e6:	63 e0       	ldi	r22, 0x03	; 3
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	0e 94 9f 02 	call	0x53e	; 0x53e <DIO_SetPinValue>
	Send_FallingEdge();
 1ee:	0e 94 94 00 	call	0x128	; 0x128 <Send_FallingEdge>
 1f2:	8f ec       	ldi	r24, 0xCF	; 207
 1f4:	97 e0       	ldi	r25, 0x07	; 7
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <LCD_vWriteCommand+0xa0>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <LCD_vWriteCommand+0xa6>
 1fc:	00 00       	nop
	_delay_ms(1);
}
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <LCD_vInit>:
 202:	2f ef       	ldi	r18, 0xFF	; 255
 204:	89 ef       	ldi	r24, 0xF9	; 249
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	21 50       	subi	r18, 0x01	; 1
 20a:	80 40       	sbci	r24, 0x00	; 0
 20c:	90 40       	sbci	r25, 0x00	; 0
 20e:	e1 f7       	brne	.-8      	; 0x208 <LCD_vInit+0x6>
 210:	00 c0       	rjmp	.+0      	; 0x212 <LCD_vInit+0x10>
 212:	00 00       	nop

static void Send_FallingEdge(void);
void LCD_vInit(void)
{
	_delay_ms(40);
	DIO_SetPinDir(DIO_PORTB,Pin0,OUTPUT);
 214:	43 e0       	ldi	r20, 0x03	; 3
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	0e 94 28 02 	call	0x450	; 0x450 <DIO_SetPinDir>
	DIO_SetPinDir(DIO_PORTB,Pin1,OUTPUT);
 21e:	43 e0       	ldi	r20, 0x03	; 3
 220:	61 e0       	ldi	r22, 0x01	; 1
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	0e 94 28 02 	call	0x450	; 0x450 <DIO_SetPinDir>
	DIO_SetPinDir(DIO_PORTB,Pin2,OUTPUT);
 228:	43 e0       	ldi	r20, 0x03	; 3
 22a:	62 e0       	ldi	r22, 0x02	; 2
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	0e 94 28 02 	call	0x450	; 0x450 <DIO_SetPinDir>
	DIO_SetPinDir(DIO_PORTB,Pin4,OUTPUT);
 232:	43 e0       	ldi	r20, 0x03	; 3
 234:	64 e0       	ldi	r22, 0x04	; 4
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	0e 94 28 02 	call	0x450	; 0x450 <DIO_SetPinDir>

	DIO_SetPinDir(RS_PORT,RS_PIN,OUTPUT);
 23c:	43 e0       	ldi	r20, 0x03	; 3
 23e:	63 e0       	ldi	r22, 0x03	; 3
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	0e 94 28 02 	call	0x450	; 0x450 <DIO_SetPinDir>
	DIO_SetPinDir(EN_PORT,EN_PIN,OUTPUT);
 246:	43 e0       	ldi	r20, 0x03	; 3
 248:	62 e0       	ldi	r22, 0x02	; 2
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	0e 94 28 02 	call	0x450	; 0x450 <DIO_SetPinDir>
	DIO_SetPinDir(RW_PORT,RW_PIN,OUTPUT);
 250:	43 e0       	ldi	r20, 0x03	; 3
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	0e 94 28 02 	call	0x450	; 0x450 <DIO_SetPinDir>

	// always RW=0 low as it is on the kit, I will be always reading for now
	DIO_SetPinValue(RW_PORT,RW_PIN,LOW); 
 25a:	40 e0       	ldi	r20, 0x00	; 0
 25c:	60 e0       	ldi	r22, 0x00	; 0
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	0e 94 9f 02 	call	0x53e	; 0x53e <DIO_SetPinValue>
	// LCD_vWriteCommand(0x01);
	// _delay_ms(10);
	// LCD_vWriteCommand(0x06);
	// _delay_ms(1);
	
	LCD_vWriteCommand(FuncitonSet1); // 0x33 ==> 28
 264:	83 e3       	ldi	r24, 0x33	; 51
 266:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_vWriteCommand>
 26a:	8f e1       	ldi	r24, 0x1F	; 31
 26c:	9e e4       	ldi	r25, 0x4E	; 78
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <LCD_vInit+0x6c>
 272:	00 c0       	rjmp	.+0      	; 0x274 <LCD_vInit+0x72>
 274:	00 00       	nop
	_delay_ms(10);
	LCD_vWriteCommand(FuncitonSet2); // 0x32
 276:	82 e3       	ldi	r24, 0x32	; 50
 278:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_vWriteCommand>
 27c:	8f ec       	ldi	r24, 0xCF	; 207
 27e:	97 e0       	ldi	r25, 0x07	; 7
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <LCD_vInit+0x7e>
 284:	00 c0       	rjmp	.+0      	; 0x286 <LCD_vInit+0x84>
 286:	00 00       	nop
	_delay_ms(1);
	LCD_vWriteCommand(LCD_4_Bit_Mode_2_Line_5_8_Dots); // 0x28
 288:	88 e2       	ldi	r24, 0x28	; 40
 28a:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_vWriteCommand>
 28e:	8f ec       	ldi	r24, 0xCF	; 207
 290:	97 e0       	ldi	r25, 0x07	; 7
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <LCD_vInit+0x90>
 296:	00 c0       	rjmp	.+0      	; 0x298 <LCD_vInit+0x96>
 298:	00 00       	nop
	_delay_ms(1);
	LCD_vWriteCommand(Display_Cursor_ON_Blink_OFF);  // 0x0E
 29a:	8e e0       	ldi	r24, 0x0E	; 14
 29c:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_vWriteCommand>
 2a0:	8f ec       	ldi	r24, 0xCF	; 207
 2a2:	97 e0       	ldi	r25, 0x07	; 7
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <LCD_vInit+0xa2>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <LCD_vInit+0xa8>
 2aa:	00 00       	nop
	_delay_ms(1);
	LCD_vWriteCommand(Clear_Display_Screen); //0x01
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_vWriteCommand>
 2b2:	8f e1       	ldi	r24, 0x1F	; 31
 2b4:	9e e4       	ldi	r25, 0x4E	; 78
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <LCD_vInit+0xb4>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <LCD_vInit+0xba>
 2bc:	00 00       	nop
	_delay_ms(10);
	LCD_vWriteCommand(Shift_Cursor_Right_Per_Read_Write); //0x06
 2be:	86 e0       	ldi	r24, 0x06	; 6
 2c0:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_vWriteCommand>
 2c4:	8f ec       	ldi	r24, 0xCF	; 207
 2c6:	97 e0       	ldi	r25, 0x07	; 7
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <LCD_vInit+0xc6>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <LCD_vInit+0xcc>
 2ce:	00 00       	nop
 2d0:	08 95       	ret

000002d2 <LCD_vWriteData>:
	Send_FallingEdge();
	_delay_ms(1);
}

void LCD_vWriteData(uint8_t data)
{
 2d2:	cf 93       	push	r28
 2d4:	c8 2f       	mov	r28, r24
	// DIO_SetPinValue(DIO_PORTA,Pin7,READ_BIT(data,7));
	// DIO_SetPinValue(DIO_PORTA,Pin6,READ_BIT(data,6));
	// DIO_SetPinValue(DIO_PORTA,Pin5,READ_BIT(data,5));
	// DIO_SetPinValue(DIO_PORTA,Pin4,READ_BIT(data,4));
	DIO_SetPinValue(DIO_PORTB,Pin4,READ_BIT(data,7));
 2d6:	48 2f       	mov	r20, r24
 2d8:	44 1f       	adc	r20, r20
 2da:	44 27       	eor	r20, r20
 2dc:	44 1f       	adc	r20, r20
 2de:	64 e0       	ldi	r22, 0x04	; 4
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	0e 94 9f 02 	call	0x53e	; 0x53e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,Pin2,READ_BIT(data,6));
 2e6:	c6 fb       	bst	r28, 6
 2e8:	44 27       	eor	r20, r20
 2ea:	40 f9       	bld	r20, 0
 2ec:	62 e0       	ldi	r22, 0x02	; 2
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	0e 94 9f 02 	call	0x53e	; 0x53e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,Pin1,READ_BIT(data,5));
 2f4:	c5 fb       	bst	r28, 5
 2f6:	44 27       	eor	r20, r20
 2f8:	40 f9       	bld	r20, 0
 2fa:	61 e0       	ldi	r22, 0x01	; 1
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	0e 94 9f 02 	call	0x53e	; 0x53e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,Pin0,READ_BIT(data,4));
 302:	c4 fb       	bst	r28, 4
 304:	44 27       	eor	r20, r20
 306:	40 f9       	bld	r20, 0
 308:	60 e0       	ldi	r22, 0x00	; 0
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	0e 94 9f 02 	call	0x53e	; 0x53e <DIO_SetPinValue>

	DIO_SetPinValue(RS_PORT,RS_PIN,HIGH);
 310:	41 e0       	ldi	r20, 0x01	; 1
 312:	63 e0       	ldi	r22, 0x03	; 3
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	0e 94 9f 02 	call	0x53e	; 0x53e <DIO_SetPinValue>
	Send_FallingEdge();
 31a:	0e 94 94 00 	call	0x128	; 0x128 <Send_FallingEdge>
 31e:	8f ec       	ldi	r24, 0xCF	; 207
 320:	97 e0       	ldi	r25, 0x07	; 7
 322:	01 97       	sbiw	r24, 0x01	; 1
 324:	f1 f7       	brne	.-4      	; 0x322 <LCD_vWriteData+0x50>
 326:	00 c0       	rjmp	.+0      	; 0x328 <LCD_vWriteData+0x56>
 328:	00 00       	nop

	// DIO_SetPinValue(DIO_PORTA,Pin7,READ_BIT(data,3));
	// DIO_SetPinValue(DIO_PORTA,Pin6,READ_BIT(data,2));
	// DIO_SetPinValue(DIO_PORTA,Pin5,READ_BIT(data,1));
	// DIO_SetPinValue(DIO_PORTA,Pin4,READ_BIT(data,0));
	DIO_SetPinValue(DIO_PORTB,Pin4,READ_BIT(data,3));
 32a:	c3 fb       	bst	r28, 3
 32c:	44 27       	eor	r20, r20
 32e:	40 f9       	bld	r20, 0
 330:	64 e0       	ldi	r22, 0x04	; 4
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	0e 94 9f 02 	call	0x53e	; 0x53e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,Pin2,READ_BIT(data,2));
 338:	c2 fb       	bst	r28, 2
 33a:	44 27       	eor	r20, r20
 33c:	40 f9       	bld	r20, 0
 33e:	62 e0       	ldi	r22, 0x02	; 2
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	0e 94 9f 02 	call	0x53e	; 0x53e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,Pin1,READ_BIT(data,1));
 346:	c1 fb       	bst	r28, 1
 348:	44 27       	eor	r20, r20
 34a:	40 f9       	bld	r20, 0
 34c:	61 e0       	ldi	r22, 0x01	; 1
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	0e 94 9f 02 	call	0x53e	; 0x53e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,Pin0,READ_BIT(data,0));
 354:	4c 2f       	mov	r20, r28
 356:	41 70       	andi	r20, 0x01	; 1
 358:	60 e0       	ldi	r22, 0x00	; 0
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	0e 94 9f 02 	call	0x53e	; 0x53e <DIO_SetPinValue>
	DIO_SetPinValue(RS_PORT,RS_PIN,HIGH);
 360:	41 e0       	ldi	r20, 0x01	; 1
 362:	63 e0       	ldi	r22, 0x03	; 3
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	0e 94 9f 02 	call	0x53e	; 0x53e <DIO_SetPinValue>
	Send_FallingEdge();
 36a:	0e 94 94 00 	call	0x128	; 0x128 <Send_FallingEdge>
 36e:	8f ec       	ldi	r24, 0xCF	; 207
 370:	97 e0       	ldi	r25, 0x07	; 7
 372:	01 97       	sbiw	r24, 0x01	; 1
 374:	f1 f7       	brne	.-4      	; 0x372 <LCD_vWriteData+0xa0>
 376:	00 c0       	rjmp	.+0      	; 0x378 <LCD_vWriteData+0xa6>
 378:	00 00       	nop
	_delay_ms(1);
}
 37a:	cf 91       	pop	r28
 37c:	08 95       	ret

0000037e <LCD_vWriteString>:
	_delay_ms(2);
}


void LCD_vWriteString(char * Str)
{
 37e:	0f 93       	push	r16
 380:	1f 93       	push	r17
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	8c 01       	movw	r16, r24
	int i=0;
 388:	c0 e0       	ldi	r28, 0x00	; 0
 38a:	d0 e0       	ldi	r29, 0x00	; 0
	while (Str[i] != '\0')
 38c:	0c c0       	rjmp	.+24     	; 0x3a6 <LCD_vWriteString+0x28>
	{
		LCD_vWriteData(Str[i]);
 38e:	0e 94 69 01 	call	0x2d2	; 0x2d2 <LCD_vWriteData>
		i++;
 392:	21 96       	adiw	r28, 0x01	; 1
 394:	2f ef       	ldi	r18, 0xFF	; 255
 396:	80 e7       	ldi	r24, 0x70	; 112
 398:	92 e0       	ldi	r25, 0x02	; 2
 39a:	21 50       	subi	r18, 0x01	; 1
 39c:	80 40       	sbci	r24, 0x00	; 0
 39e:	90 40       	sbci	r25, 0x00	; 0
 3a0:	e1 f7       	brne	.-8      	; 0x39a <LCD_vWriteString+0x1c>
 3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <LCD_vWriteString+0x26>
 3a4:	00 00       	nop


void LCD_vWriteString(char * Str)
{
	int i=0;
	while (Str[i] != '\0')
 3a6:	f8 01       	movw	r30, r16
 3a8:	ec 0f       	add	r30, r28
 3aa:	fd 1f       	adc	r31, r29
 3ac:	80 81       	ld	r24, Z
 3ae:	81 11       	cpse	r24, r1
 3b0:	ee cf       	rjmp	.-36     	; 0x38e <LCD_vWriteString+0x10>
		LCD_vWriteData(Str[i]);
		i++;
		_delay_ms(100);
	}
	
}
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	1f 91       	pop	r17
 3b8:	0f 91       	pop	r16
 3ba:	08 95       	ret

000003bc <LCD_vClearScreen>:
	_delay_ms(1);
}

void LCD_vClearScreen()
{
	LCD_vWriteCommand(Clear_Display_Screen);
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_vWriteCommand>
 3c2:	08 95       	ret

000003c4 <main>:



 int main(void)
 {
	 LCD_vInit();
 3c4:	0e 94 01 01 	call	0x202	; 0x202 <LCD_vInit>
	 LCD_vWriteString("Welcome!");
 3c8:	80 e6       	ldi	r24, 0x60	; 96
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_vWriteString>
	 uint8_t X;
	 
	 EEPROM_Init();
 3d0:	0e 94 41 00 	call	0x82	; 0x82 <EEPROM_Init>
	
	 EEPROM_SaveData(0x00,0x00,'5');
 3d4:	45 e3       	ldi	r20, 0x35	; 53
 3d6:	60 e0       	ldi	r22, 0x00	; 0
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	0e 94 44 00 	call	0x88	; 0x88 <EEPROM_SaveData>
 3de:	2f ef       	ldi	r18, 0xFF	; 255
 3e0:	81 ee       	ldi	r24, 0xE1	; 225
 3e2:	94 e0       	ldi	r25, 0x04	; 4
 3e4:	21 50       	subi	r18, 0x01	; 1
 3e6:	80 40       	sbci	r24, 0x00	; 0
 3e8:	90 40       	sbci	r25, 0x00	; 0
 3ea:	e1 f7       	brne	.-8      	; 0x3e4 <main+0x20>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <main+0x2a>
 3ee:	00 00       	nop
	 _delay_ms(100);
	 
	 
	LCD_vClearScreen();
 3f0:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_vClearScreen>
	LCD_vWriteString("clear lcd");
 3f4:	89 e6       	ldi	r24, 0x69	; 105
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_vWriteString>
 3fc:	2f ef       	ldi	r18, 0xFF	; 255
 3fe:	83 ed       	ldi	r24, 0xD3	; 211
 400:	90 e3       	ldi	r25, 0x30	; 48
 402:	21 50       	subi	r18, 0x01	; 1
 404:	80 40       	sbci	r24, 0x00	; 0
 406:	90 40       	sbci	r25, 0x00	; 0
 408:	e1 f7       	brne	.-8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 40c:	00 00       	nop
	 
	 _delay_ms(1000);
	 LCD_vClearScreen();
 40e:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_vClearScreen>
 412:	2f ef       	ldi	r18, 0xFF	; 255
 414:	83 ed       	ldi	r24, 0xD3	; 211
 416:	90 e3       	ldi	r25, 0x30	; 48
 418:	21 50       	subi	r18, 0x01	; 1
 41a:	80 40       	sbci	r24, 0x00	; 0
 41c:	90 40       	sbci	r25, 0x00	; 0
 41e:	e1 f7       	brne	.-8      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 420:	00 c0       	rjmp	.+0      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 422:	00 00       	nop
	 _delay_ms(1000);
	 

	 X= EEPROM_ReadData(0x00,0x00);
 424:	60 e0       	ldi	r22, 0x00	; 0
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	0e 94 72 00 	call	0xe4	; 0xe4 <EEPROM_ReadData>
 42c:	c8 2f       	mov	r28, r24
 42e:	2f ef       	ldi	r18, 0xFF	; 255
 430:	83 ed       	ldi	r24, 0xD3	; 211
 432:	90 e3       	ldi	r25, 0x30	; 48
 434:	21 50       	subi	r18, 0x01	; 1
 436:	80 40       	sbci	r24, 0x00	; 0
 438:	90 40       	sbci	r25, 0x00	; 0
 43a:	e1 f7       	brne	.-8      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 43c:	00 c0       	rjmp	.+0      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 43e:	00 00       	nop
	 _delay_ms(1000);

	 LCD_vWriteString("EEPROM Read= ");
 440:	83 e7       	ldi	r24, 0x73	; 115
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_vWriteString>
	 LCD_vWriteData(X);
 448:	8c 2f       	mov	r24, r28
 44a:	0e 94 69 01 	call	0x2d2	; 0x2d2 <LCD_vWriteData>
 44e:	ff cf       	rjmp	.-2      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>

00000450 <DIO_SetPinDir>:



void DIO_SetPinDir(PORT_TYPE Copy_u8Port, PIN_TYPE Copy_u8Pin, MODE_TYPE Copy_u8Mode)
{
	switch (Copy_u8Port)
 450:	81 30       	cpi	r24, 0x01	; 1
 452:	19 f1       	breq	.+70     	; 0x49a <DIO_SetPinDir+0x4a>
 454:	30 f0       	brcs	.+12     	; 0x462 <DIO_SetPinDir+0x12>
 456:	82 30       	cpi	r24, 0x02	; 2
 458:	e1 f1       	breq	.+120    	; 0x4d2 <DIO_SetPinDir+0x82>
 45a:	83 30       	cpi	r24, 0x03	; 3
 45c:	09 f4       	brne	.+2      	; 0x460 <DIO_SetPinDir+0x10>
 45e:	54 c0       	rjmp	.+168    	; 0x508 <DIO_SetPinDir+0xb8>
 460:	08 95       	ret
	{
		case DIO_PORTA:
		if(Copy_u8Mode == INPUT)
 462:	42 30       	cpi	r20, 0x02	; 2
 464:	61 f4       	brne	.+24     	; 0x47e <DIO_SetPinDir+0x2e>
		{
			DDRA &=~(1U << Copy_u8Pin);
 466:	2a b3       	in	r18, 0x1a	; 26
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	02 c0       	rjmp	.+4      	; 0x472 <DIO_SetPinDir+0x22>
 46e:	88 0f       	add	r24, r24
 470:	99 1f       	adc	r25, r25
 472:	6a 95       	dec	r22
 474:	e2 f7       	brpl	.-8      	; 0x46e <DIO_SetPinDir+0x1e>
 476:	80 95       	com	r24
 478:	82 23       	and	r24, r18
 47a:	8a bb       	out	0x1a, r24	; 26
 47c:	08 95       	ret
		}
		else if (Copy_u8Mode == OUTPUT)
 47e:	43 30       	cpi	r20, 0x03	; 3
 480:	09 f0       	breq	.+2      	; 0x484 <DIO_SetPinDir+0x34>
 482:	5c c0       	rjmp	.+184    	; 0x53c <DIO_SetPinDir+0xec>
		{
			DDRA |=(1<<Copy_u8Pin);
 484:	2a b3       	in	r18, 0x1a	; 26
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	02 c0       	rjmp	.+4      	; 0x490 <DIO_SetPinDir+0x40>
 48c:	88 0f       	add	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	6a 95       	dec	r22
 492:	e2 f7       	brpl	.-8      	; 0x48c <DIO_SetPinDir+0x3c>
 494:	82 2b       	or	r24, r18
 496:	8a bb       	out	0x1a, r24	; 26
 498:	08 95       	ret
		}
		else { /*MISRA*/}
		break;
		case DIO_PORTB:
		if(Copy_u8Mode == INPUT)
 49a:	42 30       	cpi	r20, 0x02	; 2
 49c:	61 f4       	brne	.+24     	; 0x4b6 <DIO_SetPinDir+0x66>
		{
			DDRB &=~(1U << Copy_u8Pin);
 49e:	27 b3       	in	r18, 0x17	; 23
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <DIO_SetPinDir+0x5a>
 4a6:	88 0f       	add	r24, r24
 4a8:	99 1f       	adc	r25, r25
 4aa:	6a 95       	dec	r22
 4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <DIO_SetPinDir+0x56>
 4ae:	80 95       	com	r24
 4b0:	82 23       	and	r24, r18
 4b2:	87 bb       	out	0x17, r24	; 23
 4b4:	08 95       	ret
		}
		else if (Copy_u8Mode == OUTPUT)
 4b6:	43 30       	cpi	r20, 0x03	; 3
 4b8:	09 f0       	breq	.+2      	; 0x4bc <DIO_SetPinDir+0x6c>
 4ba:	40 c0       	rjmp	.+128    	; 0x53c <DIO_SetPinDir+0xec>
		{
			DDRB |=(1<<Copy_u8Pin);
 4bc:	27 b3       	in	r18, 0x17	; 23
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <DIO_SetPinDir+0x78>
 4c4:	88 0f       	add	r24, r24
 4c6:	99 1f       	adc	r25, r25
 4c8:	6a 95       	dec	r22
 4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <DIO_SetPinDir+0x74>
 4cc:	82 2b       	or	r24, r18
 4ce:	87 bb       	out	0x17, r24	; 23
 4d0:	08 95       	ret
		}
		else { /*MISRA*/}
		
		break;
		case DIO_PORTC:
		if(Copy_u8Mode == INPUT)
 4d2:	42 30       	cpi	r20, 0x02	; 2
 4d4:	61 f4       	brne	.+24     	; 0x4ee <DIO_SetPinDir+0x9e>
		{
			DDRC &=~(1U << Copy_u8Pin);
 4d6:	24 b3       	in	r18, 0x14	; 20
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <DIO_SetPinDir+0x92>
 4de:	88 0f       	add	r24, r24
 4e0:	99 1f       	adc	r25, r25
 4e2:	6a 95       	dec	r22
 4e4:	e2 f7       	brpl	.-8      	; 0x4de <DIO_SetPinDir+0x8e>
 4e6:	80 95       	com	r24
 4e8:	82 23       	and	r24, r18
 4ea:	84 bb       	out	0x14, r24	; 20
 4ec:	08 95       	ret
		}
		else if (Copy_u8Mode == OUTPUT)
 4ee:	43 30       	cpi	r20, 0x03	; 3
 4f0:	29 f5       	brne	.+74     	; 0x53c <DIO_SetPinDir+0xec>
		{
			DDRC |=(1<<Copy_u8Pin);
 4f2:	24 b3       	in	r18, 0x14	; 20
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <DIO_SetPinDir+0xae>
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	6a 95       	dec	r22
 500:	e2 f7       	brpl	.-8      	; 0x4fa <DIO_SetPinDir+0xaa>
 502:	82 2b       	or	r24, r18
 504:	84 bb       	out	0x14, r24	; 20
 506:	08 95       	ret
		}
		else { /*MISRA*/}
		break;
		case DIO_PORTD:
		if(Copy_u8Mode == INPUT)
 508:	42 30       	cpi	r20, 0x02	; 2
 50a:	61 f4       	brne	.+24     	; 0x524 <DIO_SetPinDir+0xd4>
		{
			DDRD &=~(1U << Copy_u8Pin);
 50c:	21 b3       	in	r18, 0x11	; 17
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	02 c0       	rjmp	.+4      	; 0x518 <DIO_SetPinDir+0xc8>
 514:	88 0f       	add	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	6a 95       	dec	r22
 51a:	e2 f7       	brpl	.-8      	; 0x514 <DIO_SetPinDir+0xc4>
 51c:	80 95       	com	r24
 51e:	82 23       	and	r24, r18
 520:	81 bb       	out	0x11, r24	; 17
 522:	08 95       	ret
		}
		else if (Copy_u8Mode == OUTPUT)
 524:	43 30       	cpi	r20, 0x03	; 3
 526:	51 f4       	brne	.+20     	; 0x53c <DIO_SetPinDir+0xec>
		{
			DDRD |=(1<<Copy_u8Pin);
 528:	21 b3       	in	r18, 0x11	; 17
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	02 c0       	rjmp	.+4      	; 0x534 <DIO_SetPinDir+0xe4>
 530:	88 0f       	add	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	6a 95       	dec	r22
 536:	e2 f7       	brpl	.-8      	; 0x530 <DIO_SetPinDir+0xe0>
 538:	82 2b       	or	r24, r18
 53a:	81 bb       	out	0x11, r24	; 17
 53c:	08 95       	ret

0000053e <DIO_SetPinValue>:
		break;
	}
}
void DIO_SetPinValue(PORT_TYPE Copy_u8Port, PIN_TYPE Copy_u8Pin, MODE_TYPE Copy_u8Mode)
{
	switch (Copy_u8Port)
 53e:	81 30       	cpi	r24, 0x01	; 1
 540:	19 f1       	breq	.+70     	; 0x588 <DIO_SetPinValue+0x4a>
 542:	30 f0       	brcs	.+12     	; 0x550 <DIO_SetPinValue+0x12>
 544:	82 30       	cpi	r24, 0x02	; 2
 546:	e1 f1       	breq	.+120    	; 0x5c0 <DIO_SetPinValue+0x82>
 548:	83 30       	cpi	r24, 0x03	; 3
 54a:	09 f4       	brne	.+2      	; 0x54e <DIO_SetPinValue+0x10>
 54c:	54 c0       	rjmp	.+168    	; 0x5f6 <DIO_SetPinValue+0xb8>
 54e:	08 95       	ret
	{
		case DIO_PORTA:
		if(Copy_u8Mode == LOW)
 550:	41 11       	cpse	r20, r1
 552:	0c c0       	rjmp	.+24     	; 0x56c <DIO_SetPinValue+0x2e>
		{
			PORTA &=~(1U << Copy_u8Pin);
 554:	2b b3       	in	r18, 0x1b	; 27
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	02 c0       	rjmp	.+4      	; 0x560 <DIO_SetPinValue+0x22>
 55c:	88 0f       	add	r24, r24
 55e:	99 1f       	adc	r25, r25
 560:	6a 95       	dec	r22
 562:	e2 f7       	brpl	.-8      	; 0x55c <DIO_SetPinValue+0x1e>
 564:	80 95       	com	r24
 566:	82 23       	and	r24, r18
 568:	8b bb       	out	0x1b, r24	; 27
 56a:	08 95       	ret
		}
		else if (Copy_u8Mode == HIGH)
 56c:	41 30       	cpi	r20, 0x01	; 1
 56e:	09 f0       	breq	.+2      	; 0x572 <DIO_SetPinValue+0x34>
 570:	5c c0       	rjmp	.+184    	; 0x62a <DIO_SetPinValue+0xec>
		{
			PORTA |=(1<<Copy_u8Pin);
 572:	2b b3       	in	r18, 0x1b	; 27
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	02 c0       	rjmp	.+4      	; 0x57e <DIO_SetPinValue+0x40>
 57a:	88 0f       	add	r24, r24
 57c:	99 1f       	adc	r25, r25
 57e:	6a 95       	dec	r22
 580:	e2 f7       	brpl	.-8      	; 0x57a <DIO_SetPinValue+0x3c>
 582:	82 2b       	or	r24, r18
 584:	8b bb       	out	0x1b, r24	; 27
 586:	08 95       	ret
		}
		else { /*MISRA*/}
		break;
		case DIO_PORTB:
		if(Copy_u8Mode == LOW)
 588:	41 11       	cpse	r20, r1
 58a:	0c c0       	rjmp	.+24     	; 0x5a4 <DIO_SetPinValue+0x66>
		{
			PORTB &=~(1U << Copy_u8Pin);
 58c:	28 b3       	in	r18, 0x18	; 24
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	02 c0       	rjmp	.+4      	; 0x598 <DIO_SetPinValue+0x5a>
 594:	88 0f       	add	r24, r24
 596:	99 1f       	adc	r25, r25
 598:	6a 95       	dec	r22
 59a:	e2 f7       	brpl	.-8      	; 0x594 <DIO_SetPinValue+0x56>
 59c:	80 95       	com	r24
 59e:	82 23       	and	r24, r18
 5a0:	88 bb       	out	0x18, r24	; 24
 5a2:	08 95       	ret
		}
		else if (Copy_u8Mode == HIGH)
 5a4:	41 30       	cpi	r20, 0x01	; 1
 5a6:	09 f0       	breq	.+2      	; 0x5aa <DIO_SetPinValue+0x6c>
 5a8:	40 c0       	rjmp	.+128    	; 0x62a <DIO_SetPinValue+0xec>
		{
			PORTB |=(1<<Copy_u8Pin);
 5aa:	28 b3       	in	r18, 0x18	; 24
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <DIO_SetPinValue+0x78>
 5b2:	88 0f       	add	r24, r24
 5b4:	99 1f       	adc	r25, r25
 5b6:	6a 95       	dec	r22
 5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <DIO_SetPinValue+0x74>
 5ba:	82 2b       	or	r24, r18
 5bc:	88 bb       	out	0x18, r24	; 24
 5be:	08 95       	ret
		}
		else { /*MISRA*/}
		break;
		case DIO_PORTC:
		if(Copy_u8Mode == LOW)
 5c0:	41 11       	cpse	r20, r1
 5c2:	0c c0       	rjmp	.+24     	; 0x5dc <DIO_SetPinValue+0x9e>
		{
			PORTC &=~(1U << Copy_u8Pin);
 5c4:	25 b3       	in	r18, 0x15	; 21
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <DIO_SetPinValue+0x92>
 5cc:	88 0f       	add	r24, r24
 5ce:	99 1f       	adc	r25, r25
 5d0:	6a 95       	dec	r22
 5d2:	e2 f7       	brpl	.-8      	; 0x5cc <DIO_SetPinValue+0x8e>
 5d4:	80 95       	com	r24
 5d6:	82 23       	and	r24, r18
 5d8:	85 bb       	out	0x15, r24	; 21
 5da:	08 95       	ret
		}
		else if (Copy_u8Mode == HIGH)
 5dc:	41 30       	cpi	r20, 0x01	; 1
 5de:	29 f5       	brne	.+74     	; 0x62a <DIO_SetPinValue+0xec>
		{
			PORTC |=(1<<Copy_u8Pin);
 5e0:	25 b3       	in	r18, 0x15	; 21
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <DIO_SetPinValue+0xae>
 5e8:	88 0f       	add	r24, r24
 5ea:	99 1f       	adc	r25, r25
 5ec:	6a 95       	dec	r22
 5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <DIO_SetPinValue+0xaa>
 5f0:	82 2b       	or	r24, r18
 5f2:	85 bb       	out	0x15, r24	; 21
 5f4:	08 95       	ret
		}
		else { /*MISRA*/}
		break;
		case DIO_PORTD:
		if(Copy_u8Mode == LOW)
 5f6:	41 11       	cpse	r20, r1
 5f8:	0c c0       	rjmp	.+24     	; 0x612 <DIO_SetPinValue+0xd4>
		{
			PORTD &=~(1U << Copy_u8Pin);
 5fa:	22 b3       	in	r18, 0x12	; 18
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	02 c0       	rjmp	.+4      	; 0x606 <DIO_SetPinValue+0xc8>
 602:	88 0f       	add	r24, r24
 604:	99 1f       	adc	r25, r25
 606:	6a 95       	dec	r22
 608:	e2 f7       	brpl	.-8      	; 0x602 <DIO_SetPinValue+0xc4>
 60a:	80 95       	com	r24
 60c:	82 23       	and	r24, r18
 60e:	82 bb       	out	0x12, r24	; 18
 610:	08 95       	ret
		}
		else if (Copy_u8Mode == HIGH)
 612:	41 30       	cpi	r20, 0x01	; 1
 614:	51 f4       	brne	.+20     	; 0x62a <DIO_SetPinValue+0xec>
		{
			PORTD |=(1<<Copy_u8Pin);
 616:	22 b3       	in	r18, 0x12	; 18
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	02 c0       	rjmp	.+4      	; 0x622 <DIO_SetPinValue+0xe4>
 61e:	88 0f       	add	r24, r24
 620:	99 1f       	adc	r25, r25
 622:	6a 95       	dec	r22
 624:	e2 f7       	brpl	.-8      	; 0x61e <DIO_SetPinValue+0xe0>
 626:	82 2b       	or	r24, r18
 628:	82 bb       	out	0x12, r24	; 18
 62a:	08 95       	ret

0000062c <TWI_INIT>:
	TWCR=(1<<TWINT)|(1<<TWEN) |(1<<TWEA);
	while(READ_BIT(TWCR,TWINT)==0);
	// data byte has been received and Not ACK has been returned
	while ((TWSR & 0XF8) !=0x50 );
	return TWDR ;
}
 62c:	10 b8       	out	0x00, r1	; 0
 62e:	82 e0       	ldi	r24, 0x02	; 2
 630:	81 b9       	out	0x01, r24	; 1
 632:	08 95       	ret

00000634 <TWI_WriteStartCond>:
 634:	84 ea       	ldi	r24, 0xA4	; 164
 636:	86 bf       	out	0x36, r24	; 54
 638:	06 b6       	in	r0, 0x36	; 54
 63a:	07 fe       	sbrs	r0, 7
 63c:	fd cf       	rjmp	.-6      	; 0x638 <TWI_WriteStartCond+0x4>
 63e:	08 95       	ret

00000640 <TWI_WriteRepStartCond>:
 640:	84 ea       	ldi	r24, 0xA4	; 164
 642:	86 bf       	out	0x36, r24	; 54
 644:	06 b6       	in	r0, 0x36	; 54
 646:	07 fe       	sbrs	r0, 7
 648:	fd cf       	rjmp	.-6      	; 0x644 <TWI_WriteRepStartCond+0x4>
 64a:	81 b1       	in	r24, 0x01	; 1
 64c:	88 7f       	andi	r24, 0xF8	; 248
 64e:	80 31       	cpi	r24, 0x10	; 16
 650:	e1 f7       	brne	.-8      	; 0x64a <TWI_WriteRepStartCond+0xa>
 652:	08 95       	ret

00000654 <TWI_WriteStopCond>:
 654:	84 e9       	ldi	r24, 0x94	; 148
 656:	86 bf       	out	0x36, r24	; 54
 658:	08 95       	ret

0000065a <TWI_WriteData>:
 65a:	83 b9       	out	0x03, r24	; 3
 65c:	84 e8       	ldi	r24, 0x84	; 132
 65e:	86 bf       	out	0x36, r24	; 54
 660:	06 b6       	in	r0, 0x36	; 54
 662:	07 fe       	sbrs	r0, 7
 664:	fd cf       	rjmp	.-6      	; 0x660 <TWI_WriteData+0x6>
 666:	08 95       	ret

00000668 <TWI_ReadData_Write_NACK>:
 668:	84 e8       	ldi	r24, 0x84	; 132
 66a:	86 bf       	out	0x36, r24	; 54
 66c:	06 b6       	in	r0, 0x36	; 54
 66e:	07 fe       	sbrs	r0, 7
 670:	fd cf       	rjmp	.-6      	; 0x66c <TWI_ReadData_Write_NACK+0x4>
 672:	83 b1       	in	r24, 0x03	; 3
 674:	08 95       	ret

00000676 <TWI_WriteSlaveAdd_With_Op>:


void TWI_WriteSlaveAdd_With_Op(uint8_t SLA_Add, uint8_t Operation)
{

	TWDR=SLA_Add<<1;
 676:	88 0f       	add	r24, r24
 678:	83 b9       	out	0x03, r24	; 3
	if(Operation == I2C_READ)
 67a:	61 30       	cpi	r22, 0x01	; 1
 67c:	19 f4       	brne	.+6      	; 0x684 <TWI_WriteSlaveAdd_With_Op+0xe>
	{
		/* Copy data in TWI data register */
		TWDR |= 0x01;
 67e:	83 b1       	in	r24, 0x03	; 3
 680:	81 60       	ori	r24, 0x01	; 1
 682:	83 b9       	out	0x03, r24	; 3
	}
	TWCR=(1<<TWINT)|(1<<TWEN);
 684:	84 e8       	ldi	r24, 0x84	; 132
 686:	86 bf       	out	0x36, r24	; 54
	while(READ_BIT(TWCR,TWINT)==0); //wait to finish
 688:	06 b6       	in	r0, 0x36	; 54
 68a:	07 fe       	sbrs	r0, 7
 68c:	fd cf       	rjmp	.-6      	; 0x688 <TWI_WriteSlaveAdd_With_Op+0x12>
	if(Operation == I2C_WRITE)
 68e:	61 11       	cpse	r22, r1
 690:	05 c0       	rjmp	.+10     	; 0x69c <TWI_WriteSlaveAdd_With_Op+0x26>
	{
		// SLA+write has been transmitted and ACK has been received
		while ((TWSR & 0XF8) != 0x18);
 692:	81 b1       	in	r24, 0x01	; 1
 694:	88 7f       	andi	r24, 0xF8	; 248
 696:	88 31       	cpi	r24, 0x18	; 24
 698:	e1 f7       	brne	.-8      	; 0x692 <TWI_WriteSlaveAdd_With_Op+0x1c>
 69a:	08 95       	ret
	}
	else if(Operation == I2C_READ)
 69c:	61 30       	cpi	r22, 0x01	; 1
 69e:	21 f4       	brne	.+8      	; 0x6a8 <TWI_WriteSlaveAdd_With_Op+0x32>
	{
		// SLA+read has been transmitted and ACK has been received
		while ((TWSR & 0XF8) != 0x40);
 6a0:	81 b1       	in	r24, 0x01	; 1
 6a2:	88 7f       	andi	r24, 0xF8	; 248
 6a4:	80 34       	cpi	r24, 0x40	; 64
 6a6:	e1 f7       	brne	.-8      	; 0x6a0 <TWI_WriteSlaveAdd_With_Op+0x2a>
 6a8:	08 95       	ret

000006aa <_exit>:
 6aa:	f8 94       	cli

000006ac <__stop_program>:
 6ac:	ff cf       	rjmp	.-2      	; 0x6ac <__stop_program>
