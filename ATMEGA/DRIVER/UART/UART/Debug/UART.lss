
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000322  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000322  00000396  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003a6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b64  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000755  00000000  00000000  00001018  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006d6  00000000  00000000  0000176d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000011c  00000000  00000000  00001e44  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000421  00000000  00000000  00001f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003c2  00000000  00000000  00002381  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002743  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e2       	ldi	r30, 0x22	; 34
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7f 01 	call	0x2fe	; 0x2fe <main>
  8a:	0c 94 8f 01 	jmp	0x31e	; 0x31e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <KEYPAD_INIT>:
unsigned int keypad_C[] = { 4, 5, 6, 7};

void KEYPAD_INIT()
{
	KEYPAD_DataDir &= ~((1 << R0) | (1 << R1) | (1 << R2) | (1 << R3));
	KEYPAD_DataDir |=  ((1 << C0) | (1 << C1) | (1 << C2) | (1 << C3));
  92:	80 ef       	ldi	r24, 0xF0	; 240
  94:	84 bb       	out	0x14, r24	; 20
	
	KEYPAD_PORT |= 0xFF;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	85 bb       	out	0x15, r24	; 21
  9a:	08 95       	ret

0000009c <KEYPAD_GET_KEY>:

char KEYPAD_GET_KEY()
{
	unsigned int i , j;
	
	for (i = 0 ; i < 4 ; i++)
  9c:	60 e0       	ldi	r22, 0x00	; 0
  9e:	70 e0       	ldi	r23, 0x00	; 0
  a0:	71 c0       	rjmp	.+226    	; 0x184 <KEYPAD_GET_KEY+0xe8>
	{
		KEYPAD_PORT |=  ((1 << C0) | (1 << C1) | (1 << C2) | (1 << C3));
  a2:	85 b3       	in	r24, 0x15	; 21
  a4:	80 6f       	ori	r24, 0xF0	; 240
  a6:	85 bb       	out	0x15, r24	; 21
		KEYPAD_PORT &=  ~(1 << keypad_C[i]);
  a8:	fb 01       	movw	r30, r22
  aa:	ee 0f       	add	r30, r30
  ac:	ff 1f       	adc	r31, r31
  ae:	e0 5a       	subi	r30, 0xA0	; 160
  b0:	ff 4f       	sbci	r31, 0xFF	; 255
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	00 80       	ld	r0, Z
  b8:	02 c0       	rjmp	.+4      	; 0xbe <KEYPAD_GET_KEY+0x22>
  ba:	22 0f       	add	r18, r18
  bc:	33 1f       	adc	r19, r19
  be:	0a 94       	dec	r0
  c0:	e2 f7       	brpl	.-8      	; 0xba <KEYPAD_GET_KEY+0x1e>
  c2:	20 95       	com	r18
  c4:	82 23       	and	r24, r18
  c6:	85 bb       	out	0x15, r24	; 21
		
		for(j = 0 ; j < 4 ; j++)
  c8:	40 e0       	ldi	r20, 0x00	; 0
  ca:	50 e0       	ldi	r21, 0x00	; 0
  cc:	55 c0       	rjmp	.+170    	; 0x178 <KEYPAD_GET_KEY+0xdc>
		{
			if (Read_Bit(KEYPAD_PIN , keypad_R[j]) == 0)
  ce:	83 b3       	in	r24, 0x13	; 19
  d0:	fa 01       	movw	r30, r20
  d2:	ee 0f       	add	r30, r30
  d4:	ff 1f       	adc	r31, r31
  d6:	e8 59       	subi	r30, 0x98	; 152
  d8:	ff 4f       	sbci	r31, 0xFF	; 255
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	00 80       	ld	r0, Z
  de:	02 c0       	rjmp	.+4      	; 0xe4 <KEYPAD_GET_KEY+0x48>
  e0:	95 95       	asr	r25
  e2:	87 95       	ror	r24
  e4:	0a 94       	dec	r0
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <KEYPAD_GET_KEY+0x44>
  e8:	9c 01       	movw	r18, r24
  ea:	21 70       	andi	r18, 0x01	; 1
  ec:	33 27       	eor	r19, r19
  ee:	80 fd       	sbrc	r24, 0
  f0:	41 c0       	rjmp	.+130    	; 0x174 <KEYPAD_GET_KEY+0xd8>
			{
				while(Read_Bit(KEYPAD_PIN , keypad_R[j]) == 0);
  f2:	21 15       	cp	r18, r1
  f4:	31 05       	cpc	r19, r1
  f6:	e9 f3       	breq	.-6      	; 0xf2 <KEYPAD_GET_KEY+0x56>
				
				switch(i)
  f8:	61 30       	cpi	r22, 0x01	; 1
  fa:	71 05       	cpc	r23, r1
  fc:	a9 f0       	breq	.+42     	; 0x128 <KEYPAD_GET_KEY+0x8c>
  fe:	38 f0       	brcs	.+14     	; 0x10e <KEYPAD_GET_KEY+0x72>
 100:	62 30       	cpi	r22, 0x02	; 2
 102:	71 05       	cpc	r23, r1
 104:	f1 f0       	breq	.+60     	; 0x142 <KEYPAD_GET_KEY+0xa6>
 106:	63 30       	cpi	r22, 0x03	; 3
 108:	71 05       	cpc	r23, r1
 10a:	41 f1       	breq	.+80     	; 0x15c <KEYPAD_GET_KEY+0xc0>
 10c:	33 c0       	rjmp	.+102    	; 0x174 <KEYPAD_GET_KEY+0xd8>
				{
					case 0 :
					if (j == 0)		return '7';
 10e:	41 15       	cp	r20, r1
 110:	51 05       	cpc	r21, r1
 112:	f1 f1       	breq	.+124    	; 0x190 <KEYPAD_GET_KEY+0xf4>
					else if(j == 1) return '4';
 114:	41 30       	cpi	r20, 0x01	; 1
 116:	51 05       	cpc	r21, r1
 118:	e9 f1       	breq	.+122    	; 0x194 <KEYPAD_GET_KEY+0xf8>
					else if(j == 2) return '1';
 11a:	42 30       	cpi	r20, 0x02	; 2
 11c:	51 05       	cpc	r21, r1
 11e:	e1 f1       	breq	.+120    	; 0x198 <KEYPAD_GET_KEY+0xfc>
					else if(j == 3) return '?';
 120:	43 30       	cpi	r20, 0x03	; 3
 122:	51 05       	cpc	r21, r1
 124:	39 f5       	brne	.+78     	; 0x174 <KEYPAD_GET_KEY+0xd8>
 126:	3a c0       	rjmp	.+116    	; 0x19c <KEYPAD_GET_KEY+0x100>
					break;
					
					case 1 :
					if (j == 0)		return '8';
 128:	41 15       	cp	r20, r1
 12a:	51 05       	cpc	r21, r1
 12c:	c9 f1       	breq	.+114    	; 0x1a0 <KEYPAD_GET_KEY+0x104>
					else if(j == 1) return '5';
 12e:	41 30       	cpi	r20, 0x01	; 1
 130:	51 05       	cpc	r21, r1
 132:	c1 f1       	breq	.+112    	; 0x1a4 <KEYPAD_GET_KEY+0x108>
					else if(j == 2) return '2';
 134:	42 30       	cpi	r20, 0x02	; 2
 136:	51 05       	cpc	r21, r1
 138:	b9 f1       	breq	.+110    	; 0x1a8 <KEYPAD_GET_KEY+0x10c>
					else if(j == 3) return '0';
 13a:	43 30       	cpi	r20, 0x03	; 3
 13c:	51 05       	cpc	r21, r1
 13e:	d1 f4       	brne	.+52     	; 0x174 <KEYPAD_GET_KEY+0xd8>
 140:	35 c0       	rjmp	.+106    	; 0x1ac <KEYPAD_GET_KEY+0x110>
					break;
					
					case 2 :
					if (j == 0)		return '9';
 142:	41 15       	cp	r20, r1
 144:	51 05       	cpc	r21, r1
 146:	a1 f1       	breq	.+104    	; 0x1b0 <KEYPAD_GET_KEY+0x114>
					else if(j == 1) return '6';
 148:	41 30       	cpi	r20, 0x01	; 1
 14a:	51 05       	cpc	r21, r1
 14c:	99 f1       	breq	.+102    	; 0x1b4 <KEYPAD_GET_KEY+0x118>
					else if(j == 2) return '3';
 14e:	42 30       	cpi	r20, 0x02	; 2
 150:	51 05       	cpc	r21, r1
 152:	91 f1       	breq	.+100    	; 0x1b8 <KEYPAD_GET_KEY+0x11c>
					else if(j == 3) return '=';
 154:	43 30       	cpi	r20, 0x03	; 3
 156:	51 05       	cpc	r21, r1
 158:	69 f4       	brne	.+26     	; 0x174 <KEYPAD_GET_KEY+0xd8>
 15a:	30 c0       	rjmp	.+96     	; 0x1bc <KEYPAD_GET_KEY+0x120>
					break;
					
					case 3 :
					if (j == 0)		return '/';
 15c:	41 15       	cp	r20, r1
 15e:	51 05       	cpc	r21, r1
 160:	79 f1       	breq	.+94     	; 0x1c0 <KEYPAD_GET_KEY+0x124>
					else if(j == 1) return '*';
 162:	41 30       	cpi	r20, 0x01	; 1
 164:	51 05       	cpc	r21, r1
 166:	71 f1       	breq	.+92     	; 0x1c4 <KEYPAD_GET_KEY+0x128>
					else if(j == 2) return '-';
 168:	42 30       	cpi	r20, 0x02	; 2
 16a:	51 05       	cpc	r21, r1
 16c:	69 f1       	breq	.+90     	; 0x1c8 <KEYPAD_GET_KEY+0x12c>
					else if(j == 3) return '+';
 16e:	43 30       	cpi	r20, 0x03	; 3
 170:	51 05       	cpc	r21, r1
 172:	61 f1       	breq	.+88     	; 0x1cc <KEYPAD_GET_KEY+0x130>
	for (i = 0 ; i < 4 ; i++)
	{
		KEYPAD_PORT |=  ((1 << C0) | (1 << C1) | (1 << C2) | (1 << C3));
		KEYPAD_PORT &=  ~(1 << keypad_C[i]);
		
		for(j = 0 ; j < 4 ; j++)
 174:	4f 5f       	subi	r20, 0xFF	; 255
 176:	5f 4f       	sbci	r21, 0xFF	; 255
 178:	44 30       	cpi	r20, 0x04	; 4
 17a:	51 05       	cpc	r21, r1
 17c:	08 f4       	brcc	.+2      	; 0x180 <KEYPAD_GET_KEY+0xe4>
 17e:	a7 cf       	rjmp	.-178    	; 0xce <KEYPAD_GET_KEY+0x32>

char KEYPAD_GET_KEY()
{
	unsigned int i , j;
	
	for (i = 0 ; i < 4 ; i++)
 180:	6f 5f       	subi	r22, 0xFF	; 255
 182:	7f 4f       	sbci	r23, 0xFF	; 255
 184:	64 30       	cpi	r22, 0x04	; 4
 186:	71 05       	cpc	r23, r1
 188:	08 f4       	brcc	.+2      	; 0x18c <KEYPAD_GET_KEY+0xf0>
 18a:	8b cf       	rjmp	.-234    	; 0xa2 <KEYPAD_GET_KEY+0x6>
					
				}
			}
		}
	}
	return '!';
 18c:	81 e2       	ldi	r24, 0x21	; 33
 18e:	08 95       	ret
				while(Read_Bit(KEYPAD_PIN , keypad_R[j]) == 0);
				
				switch(i)
				{
					case 0 :
					if (j == 0)		return '7';
 190:	87 e3       	ldi	r24, 0x37	; 55
 192:	08 95       	ret
					else if(j == 1) return '4';
 194:	84 e3       	ldi	r24, 0x34	; 52
 196:	08 95       	ret
					else if(j == 2) return '1';
 198:	81 e3       	ldi	r24, 0x31	; 49
 19a:	08 95       	ret
					else if(j == 3) return '?';
 19c:	8f e3       	ldi	r24, 0x3F	; 63
 19e:	08 95       	ret
					break;
					
					case 1 :
					if (j == 0)		return '8';
 1a0:	88 e3       	ldi	r24, 0x38	; 56
 1a2:	08 95       	ret
					else if(j == 1) return '5';
 1a4:	85 e3       	ldi	r24, 0x35	; 53
 1a6:	08 95       	ret
					else if(j == 2) return '2';
 1a8:	82 e3       	ldi	r24, 0x32	; 50
 1aa:	08 95       	ret
					else if(j == 3) return '0';
 1ac:	80 e3       	ldi	r24, 0x30	; 48
 1ae:	08 95       	ret
					break;
					
					case 2 :
					if (j == 0)		return '9';
 1b0:	89 e3       	ldi	r24, 0x39	; 57
 1b2:	08 95       	ret
					else if(j == 1) return '6';
 1b4:	86 e3       	ldi	r24, 0x36	; 54
 1b6:	08 95       	ret
					else if(j == 2) return '3';
 1b8:	83 e3       	ldi	r24, 0x33	; 51
 1ba:	08 95       	ret
					else if(j == 3) return '=';
 1bc:	8d e3       	ldi	r24, 0x3D	; 61
 1be:	08 95       	ret
					break;
					
					case 3 :
					if (j == 0)		return '/';
 1c0:	8f e2       	ldi	r24, 0x2F	; 47
 1c2:	08 95       	ret
					else if(j == 1) return '*';
 1c4:	8a e2       	ldi	r24, 0x2A	; 42
 1c6:	08 95       	ret
					else if(j == 2) return '-';
 1c8:	8d e2       	ldi	r24, 0x2D	; 45
 1ca:	08 95       	ret
					else if(j == 3) return '+';
 1cc:	8b e2       	ldi	r24, 0x2B	; 43
			}
		}
	}
	return '!';
	
 1ce:	08 95       	ret

000001d0 <LCD_lcd_kick>:
		if (position < 16 && position >= 0)
		{
			LCD_Send_A_Command(LCD_BEGIN_AT_SECOND_RAW+position);
		}
	}
}
 1d0:	88 b3       	in	r24, 0x18	; 24
 1d2:	87 7f       	andi	r24, 0xF7	; 247
 1d4:	88 bb       	out	0x18, r24	; 24
 1d6:	2f e7       	ldi	r18, 0x7F	; 127
 1d8:	88 e3       	ldi	r24, 0x38	; 56
 1da:	91 e0       	ldi	r25, 0x01	; 1
 1dc:	21 50       	subi	r18, 0x01	; 1
 1de:	80 40       	sbci	r24, 0x00	; 0
 1e0:	90 40       	sbci	r25, 0x00	; 0
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <LCD_lcd_kick+0xc>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <LCD_lcd_kick+0x16>
 1e6:	00 00       	nop
 1e8:	88 b3       	in	r24, 0x18	; 24
 1ea:	88 60       	ori	r24, 0x08	; 8
 1ec:	88 bb       	out	0x18, r24	; 24
 1ee:	08 95       	ret

000001f0 <LCD_check_lcd_isbusy>:
 1f0:	8a b3       	in	r24, 0x1a	; 26
 1f2:	8f 70       	andi	r24, 0x0F	; 15
 1f4:	8a bb       	out	0x1a, r24	; 26
 1f6:	88 b3       	in	r24, 0x18	; 24
 1f8:	84 60       	ori	r24, 0x04	; 4
 1fa:	8d 7f       	andi	r24, 0xFD	; 253
 1fc:	88 bb       	out	0x18, r24	; 24
 1fe:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_lcd_kick>
 202:	88 b3       	in	r24, 0x18	; 24
 204:	8b 7f       	andi	r24, 0xFB	; 251
 206:	88 bb       	out	0x18, r24	; 24
 208:	2f e7       	ldi	r18, 0x7F	; 127
 20a:	88 e3       	ldi	r24, 0x38	; 56
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	21 50       	subi	r18, 0x01	; 1
 210:	80 40       	sbci	r24, 0x00	; 0
 212:	90 40       	sbci	r25, 0x00	; 0
 214:	e1 f7       	brne	.-8      	; 0x20e <LCD_check_lcd_isbusy+0x1e>
 216:	00 c0       	rjmp	.+0      	; 0x218 <LCD_check_lcd_isbusy+0x28>
 218:	00 00       	nop
 21a:	08 95       	ret

0000021c <LCD_Send_A_Command>:
 21c:	cf 93       	push	r28
 21e:	c8 2f       	mov	r28, r24
 220:	8b b3       	in	r24, 0x1b	; 27
 222:	8f 70       	andi	r24, 0x0F	; 15
 224:	9c 2f       	mov	r25, r28
 226:	90 7f       	andi	r25, 0xF0	; 240
 228:	89 2b       	or	r24, r25
 22a:	8b bb       	out	0x1b, r24	; 27
 22c:	88 b3       	in	r24, 0x18	; 24
 22e:	89 7f       	andi	r24, 0xF9	; 249
 230:	88 bb       	out	0x18, r24	; 24
 232:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_lcd_kick>
 236:	2f ef       	ldi	r18, 0xFF	; 255
 238:	30 e7       	ldi	r19, 0x70	; 112
 23a:	82 e0       	ldi	r24, 0x02	; 2
 23c:	21 50       	subi	r18, 0x01	; 1
 23e:	30 40       	sbci	r19, 0x00	; 0
 240:	80 40       	sbci	r24, 0x00	; 0
 242:	e1 f7       	brne	.-8      	; 0x23c <LCD_Send_A_Command+0x20>
 244:	00 c0       	rjmp	.+0      	; 0x246 <LCD_Send_A_Command+0x2a>
 246:	00 00       	nop
 248:	2b b3       	in	r18, 0x1b	; 27
 24a:	30 e1       	ldi	r19, 0x10	; 16
 24c:	c3 9f       	mul	r28, r19
 24e:	c0 01       	movw	r24, r0
 250:	11 24       	eor	r1, r1
 252:	92 2f       	mov	r25, r18
 254:	9f 70       	andi	r25, 0x0F	; 15
 256:	89 2b       	or	r24, r25
 258:	8b bb       	out	0x1b, r24	; 27
 25a:	88 b3       	in	r24, 0x18	; 24
 25c:	89 7f       	andi	r24, 0xF9	; 249
 25e:	88 bb       	out	0x18, r24	; 24
 260:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_lcd_kick>
 264:	cf 91       	pop	r28
 266:	08 95       	ret

00000268 <LCD_clear_screen>:
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	0e 94 0e 01 	call	0x21c	; 0x21c <LCD_Send_A_Command>
 26e:	08 95       	ret

00000270 <LCD_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 270:	8f e3       	ldi	r24, 0x3F	; 63
 272:	9c e9       	ldi	r25, 0x9C	; 156
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <LCD_init+0x4>
 278:	00 c0       	rjmp	.+0      	; 0x27a <LCD_init+0xa>
 27a:	00 00       	nop
	_delay_ms(50);
}

void LCD_init(void){//initializes the LCD display with the required settings.
	_delay_ms(20);
	LCD_check_lcd_isbusy();
 27c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCD_check_lcd_isbusy>
	LCD_Control_Direction |= (1<<Enable_Switch | 1<<RW_SWITCH | 1<<RS_SWITCH);//DDRB>>OUTPUT (Enable,RS,RW)
 280:	87 b3       	in	r24, 0x17	; 23
 282:	8e 60       	ori	r24, 0x0E	; 14
 284:	87 bb       	out	0x17, r24	; 23
	LCD_Control &= ~((1<<Enable_Switch | 1<<RS_SWITCH | 1<<RW_SWITCH));//PortB
 286:	88 b3       	in	r24, 0x18	; 24
 288:	81 7f       	andi	r24, 0xF1	; 241
 28a:	88 bb       	out	0x18, r24	; 24
	LCD_lcd_kick();
 28c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_lcd_kick>
 290:	8f e2       	ldi	r24, 0x2F	; 47
 292:	95 e7       	ldi	r25, 0x75	; 117
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <LCD_init+0x24>
 298:	00 c0       	rjmp	.+0      	; 0x29a <LCD_init+0x2a>
 29a:	00 00       	nop
	_delay_ms(15);
	LCD_clear_screen();
 29c:	0e 94 34 01 	call	0x268	; 0x268 <LCD_clear_screen>
	LCD_Send_A_Command(LCD_FUNCTION_8BIT_2LINES);
	#endif // Eight_Bit_Mode

	#ifdef Four_Bit_Mode
	LCD_Port_Direction |=  (0xF0<<DATA_shift);
	LCD_Send_A_Command(0x02);
 2a0:	82 e0       	ldi	r24, 0x02	; 2
 2a2:	0e 94 0e 01 	call	0x21c	; 0x21c <LCD_Send_A_Command>
	LCD_Send_A_Command(LCD_FUNCTION_4BIT_2LINES);
 2a6:	88 e2       	ldi	r24, 0x28	; 40
 2a8:	0e 94 0e 01 	call	0x21c	; 0x21c <LCD_Send_A_Command>
	#endif // Eight_Bit_Mode
	
	LCD_Send_A_Command(LCD_ENTRY_MODE);
 2ac:	86 e0       	ldi	r24, 0x06	; 6
 2ae:	0e 94 0e 01 	call	0x21c	; 0x21c <LCD_Send_A_Command>
	LCD_Send_A_Command(LCD_BEGIN_AT_FIRST_RAW);
 2b2:	80 e8       	ldi	r24, 0x80	; 128
 2b4:	0e 94 0e 01 	call	0x21c	; 0x21c <LCD_Send_A_Command>
	LCD_Send_A_Command(LCD_DISP_ON_CURSOR_BLINK);//turns on the display, the cursor and makes the cursor blink.
 2b8:	8f e0       	ldi	r24, 0x0F	; 15
 2ba:	0e 94 0e 01 	call	0x21c	; 0x21c <LCD_Send_A_Command>
 2be:	08 95       	ret

000002c0 <LCD_Send_A_Character>:
	LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
	LCD_Control &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
	LCD_lcd_kick();
	#endif
}
void LCD_Send_A_Character(unsigned char character){//writes a character to the LCD display.
 2c0:	cf 93       	push	r28
 2c2:	c8 2f       	mov	r28, r24
	_delay_ms(1);
	LCD_lcd_kick();
	#endif // Eight_Bit_Mode
	
	#ifdef Four_Bit_Mode
	LCD_PORT = (LCD_PORT & 0x0F) | (character & 0xF0);
 2c4:	8b b3       	in	r24, 0x1b	; 27
 2c6:	8f 70       	andi	r24, 0x0F	; 15
 2c8:	9c 2f       	mov	r25, r28
 2ca:	90 7f       	andi	r25, 0xF0	; 240
 2cc:	89 2b       	or	r24, r25
 2ce:	8b bb       	out	0x1b, r24	; 27
	LCD_Control |= (1<<RS_SWITCH); //turn RS ON for Data mode.
 2d0:	88 b3       	in	r24, 0x18	; 24
 2d2:	82 60       	ori	r24, 0x02	; 2
	LCD_Control &= ~(1<<RW_SWITCH);//turn RW off so you can write.
 2d4:	8b 7f       	andi	r24, 0xFB	; 251
 2d6:	88 bb       	out	0x18, r24	; 24
	LCD_lcd_kick ();
 2d8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_lcd_kick>
	LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
 2dc:	2b b3       	in	r18, 0x1b	; 27
 2de:	30 e1       	ldi	r19, 0x10	; 16
 2e0:	c3 9f       	mul	r28, r19
 2e2:	c0 01       	movw	r24, r0
 2e4:	11 24       	eor	r1, r1
 2e6:	92 2f       	mov	r25, r18
 2e8:	9f 70       	andi	r25, 0x0F	; 15
 2ea:	89 2b       	or	r24, r25
 2ec:	8b bb       	out	0x1b, r24	; 27
	LCD_Control |= (1<<RS_SWITCH); //turn RS ON for Data mode.
 2ee:	88 b3       	in	r24, 0x18	; 24
 2f0:	82 60       	ori	r24, 0x02	; 2
	LCD_Control &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
 2f2:	8b 7f       	andi	r24, 0xFB	; 251
 2f4:	88 bb       	out	0x18, r24	; 24
	LCD_lcd_kick();
 2f6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_lcd_kick>
	#endif
}
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <main>:


int main(void)
{
	//Initialize LCD
	LCD_init();
 2fe:	0e 94 38 01 	call	0x270	; 0x270 <LCD_init>
	KEYPAD_INIT();
 302:	0e 94 49 00 	call	0x92	; 0x92 <KEYPAD_INIT>
	

	while (1)
	{
		
		val = KEYPAD_GET_KEY();
 306:	0e 94 4e 00 	call	0x9c	; 0x9c <KEYPAD_GET_KEY>
		switch(val)
 30a:	81 32       	cpi	r24, 0x21	; 33
 30c:	e1 f3       	breq	.-8      	; 0x306 <main+0x8>
 30e:	8f 33       	cpi	r24, 0x3F	; 63
 310:	19 f4       	brne	.+6      	; 0x318 <main+0x1a>
		{
			case '!' :
			break;
			
			case '?' :
			LCD_clear_screen();
 312:	0e 94 34 01 	call	0x268	; 0x268 <LCD_clear_screen>
			break;
 316:	f7 cf       	rjmp	.-18     	; 0x306 <main+0x8>
			
			default:
			LCD_Send_A_Character(val);
 318:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_Send_A_Character>
 31c:	f4 cf       	rjmp	.-24     	; 0x306 <main+0x8>

0000031e <_exit>:
 31e:	f8 94       	cli

00000320 <__stop_program>:
 320:	ff cf       	rjmp	.-2      	; 0x320 <__stop_program>
