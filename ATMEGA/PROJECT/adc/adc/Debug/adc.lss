
adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000091e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005e  00800060  0000091e  000009b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  008000be  008000be  00000a10  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019ed  00000000  00000000  00000c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a3a  00000000  00000000  000025f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d8f  00000000  00000000  0000302b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000330  00000000  00000000  00003dbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000592  00000000  00000000  000040ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d9e  00000000  00000000  0000467e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  0000541c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 a4 03 	jmp	0x748	; 0x748 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e1       	ldi	r30, 0x1E	; 30
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3b       	cpi	r26, 0xBE	; 190
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae eb       	ldi	r26, 0xBE	; 190
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 3c       	cpi	r26, 0xC8	; 200
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 61 02 	call	0x4c2	; 0x4c2 <main>
  8a:	0c 94 8d 04 	jmp	0x91a	; 0x91a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_instruction>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	63 e0       	ldi	r22, 0x03	; 3
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	0e 94 d5 03 	call	0x7aa	; 0x7aa <DIO_SetPinVal>
  a0:	4c 2f       	mov	r20, r28
  a2:	40 71       	andi	r20, 0x10	; 16
  a4:	50 e0       	ldi	r21, 0x00	; 0
  a6:	55 95       	asr	r21
  a8:	47 95       	ror	r20
  aa:	55 95       	asr	r21
  ac:	47 95       	ror	r20
  ae:	55 95       	asr	r21
  b0:	47 95       	ror	r20
  b2:	55 95       	asr	r21
  b4:	47 95       	ror	r20
  b6:	60 e0       	ldi	r22, 0x00	; 0
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	0e 94 d5 03 	call	0x7aa	; 0x7aa <DIO_SetPinVal>
  be:	4c 2f       	mov	r20, r28
  c0:	40 72       	andi	r20, 0x20	; 32
  c2:	50 e0       	ldi	r21, 0x00	; 0
  c4:	55 95       	asr	r21
  c6:	47 95       	ror	r20
  c8:	55 95       	asr	r21
  ca:	47 95       	ror	r20
  cc:	55 95       	asr	r21
  ce:	47 95       	ror	r20
  d0:	55 95       	asr	r21
  d2:	47 95       	ror	r20
  d4:	55 95       	asr	r21
  d6:	47 95       	ror	r20
  d8:	61 e0       	ldi	r22, 0x01	; 1
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	0e 94 d5 03 	call	0x7aa	; 0x7aa <DIO_SetPinVal>
  e0:	4c 2f       	mov	r20, r28
  e2:	40 74       	andi	r20, 0x40	; 64
  e4:	50 e0       	ldi	r21, 0x00	; 0
  e6:	04 2e       	mov	r0, r20
  e8:	45 2f       	mov	r20, r21
  ea:	00 0c       	add	r0, r0
  ec:	44 1f       	adc	r20, r20
  ee:	55 0b       	sbc	r21, r21
  f0:	00 0c       	add	r0, r0
  f2:	44 1f       	adc	r20, r20
  f4:	55 1f       	adc	r21, r21
  f6:	63 e0       	ldi	r22, 0x03	; 3
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	0e 94 d5 03 	call	0x7aa	; 0x7aa <DIO_SetPinVal>
  fe:	4c 2f       	mov	r20, r28
 100:	44 1f       	adc	r20, r20
 102:	44 27       	eor	r20, r20
 104:	44 1f       	adc	r20, r20
 106:	64 e0       	ldi	r22, 0x04	; 4
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	0e 94 d5 03 	call	0x7aa	; 0x7aa <DIO_SetPinVal>
 10e:	41 e0       	ldi	r20, 0x01	; 1
 110:	62 e0       	ldi	r22, 0x02	; 2
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	0e 94 d5 03 	call	0x7aa	; 0x7aa <DIO_SetPinVal>
 118:	8f e8       	ldi	r24, 0x8F	; 143
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <LCD_instruction+0x8a>
 120:	00 c0       	rjmp	.+0      	; 0x122 <LCD_instruction+0x90>
 122:	00 00       	nop
 124:	40 e0       	ldi	r20, 0x00	; 0
 126:	62 e0       	ldi	r22, 0x02	; 2
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0e 94 d5 03 	call	0x7aa	; 0x7aa <DIO_SetPinVal>
 12e:	8f e8       	ldi	r24, 0x8F	; 143
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <LCD_instruction+0xa0>
 136:	00 c0       	rjmp	.+0      	; 0x138 <LCD_instruction+0xa6>
 138:	00 00       	nop
 13a:	4c 2f       	mov	r20, r28
 13c:	41 70       	andi	r20, 0x01	; 1
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 d5 03 	call	0x7aa	; 0x7aa <DIO_SetPinVal>
 146:	4c 2f       	mov	r20, r28
 148:	42 70       	andi	r20, 0x02	; 2
 14a:	50 e0       	ldi	r21, 0x00	; 0
 14c:	55 95       	asr	r21
 14e:	47 95       	ror	r20
 150:	61 e0       	ldi	r22, 0x01	; 1
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	0e 94 d5 03 	call	0x7aa	; 0x7aa <DIO_SetPinVal>
 158:	4c 2f       	mov	r20, r28
 15a:	44 70       	andi	r20, 0x04	; 4
 15c:	50 e0       	ldi	r21, 0x00	; 0
 15e:	55 95       	asr	r21
 160:	47 95       	ror	r20
 162:	55 95       	asr	r21
 164:	47 95       	ror	r20
 166:	63 e0       	ldi	r22, 0x03	; 3
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	0e 94 d5 03 	call	0x7aa	; 0x7aa <DIO_SetPinVal>
 16e:	c8 70       	andi	r28, 0x08	; 8
 170:	4c 2f       	mov	r20, r28
 172:	50 e0       	ldi	r21, 0x00	; 0
 174:	55 95       	asr	r21
 176:	47 95       	ror	r20
 178:	55 95       	asr	r21
 17a:	47 95       	ror	r20
 17c:	55 95       	asr	r21
 17e:	47 95       	ror	r20
 180:	64 e0       	ldi	r22, 0x04	; 4
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0e 94 d5 03 	call	0x7aa	; 0x7aa <DIO_SetPinVal>
 188:	41 e0       	ldi	r20, 0x01	; 1
 18a:	62 e0       	ldi	r22, 0x02	; 2
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <DIO_SetPinVal>
 192:	8f e8       	ldi	r24, 0x8F	; 143
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <LCD_instruction+0x104>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <LCD_instruction+0x10a>
 19c:	00 00       	nop
 19e:	40 e0       	ldi	r20, 0x00	; 0
 1a0:	62 e0       	ldi	r22, 0x02	; 2
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	0e 94 d5 03 	call	0x7aa	; 0x7aa <DIO_SetPinVal>
 1a8:	8f e8       	ldi	r24, 0x8F	; 143
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <LCD_instruction+0x11a>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <LCD_instruction+0x120>
 1b2:	00 00       	nop
 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret

000001b8 <LCD_INIT>:
 1b8:	8f e3       	ldi	r24, 0x3F	; 63
 1ba:	9f e1       	ldi	r25, 0x1F	; 31
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <LCD_INIT+0x4>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <LCD_INIT+0xa>
 1c2:	00 00       	nop
 1c4:	83 e3       	ldi	r24, 0x33	; 51
 1c6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_instruction>
 1ca:	87 ec       	ldi	r24, 0xC7	; 199
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <LCD_INIT+0x16>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <LCD_INIT+0x1c>
 1d4:	00 00       	nop
 1d6:	82 e3       	ldi	r24, 0x32	; 50
 1d8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_instruction>
 1dc:	87 ec       	ldi	r24, 0xC7	; 199
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <LCD_INIT+0x28>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <LCD_INIT+0x2e>
 1e6:	00 00       	nop
 1e8:	88 e2       	ldi	r24, 0x28	; 40
 1ea:	0e 94 49 00 	call	0x92	; 0x92 <LCD_instruction>
 1ee:	87 ec       	ldi	r24, 0xC7	; 199
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <LCD_INIT+0x3a>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <LCD_INIT+0x40>
 1f8:	00 00       	nop
 1fa:	8c e0       	ldi	r24, 0x0C	; 12
 1fc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_instruction>
 200:	87 ec       	ldi	r24, 0xC7	; 199
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <LCD_INIT+0x4c>
 208:	00 c0       	rjmp	.+0      	; 0x20a <LCD_INIT+0x52>
 20a:	00 00       	nop
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_instruction>
 212:	87 ec       	ldi	r24, 0xC7	; 199
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <LCD_INIT+0x5e>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <LCD_INIT+0x64>
 21c:	00 00       	nop
 21e:	82 e0       	ldi	r24, 0x02	; 2
 220:	0e 94 49 00 	call	0x92	; 0x92 <LCD_instruction>
 224:	87 ec       	ldi	r24, 0xC7	; 199
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <LCD_INIT+0x70>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <LCD_INIT+0x76>
 22e:	00 00       	nop
 230:	08 95       	ret

00000232 <LCD_write_char>:
 232:	cf 93       	push	r28
 234:	c8 2f       	mov	r28, r24
 236:	41 e0       	ldi	r20, 0x01	; 1
 238:	63 e0       	ldi	r22, 0x03	; 3
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	0e 94 d5 03 	call	0x7aa	; 0x7aa <DIO_SetPinVal>
 240:	4c 2f       	mov	r20, r28
 242:	40 71       	andi	r20, 0x10	; 16
 244:	50 e0       	ldi	r21, 0x00	; 0
 246:	55 95       	asr	r21
 248:	47 95       	ror	r20
 24a:	55 95       	asr	r21
 24c:	47 95       	ror	r20
 24e:	55 95       	asr	r21
 250:	47 95       	ror	r20
 252:	55 95       	asr	r21
 254:	47 95       	ror	r20
 256:	60 e0       	ldi	r22, 0x00	; 0
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	0e 94 d5 03 	call	0x7aa	; 0x7aa <DIO_SetPinVal>
 25e:	4c 2f       	mov	r20, r28
 260:	40 72       	andi	r20, 0x20	; 32
 262:	50 e0       	ldi	r21, 0x00	; 0
 264:	55 95       	asr	r21
 266:	47 95       	ror	r20
 268:	55 95       	asr	r21
 26a:	47 95       	ror	r20
 26c:	55 95       	asr	r21
 26e:	47 95       	ror	r20
 270:	55 95       	asr	r21
 272:	47 95       	ror	r20
 274:	55 95       	asr	r21
 276:	47 95       	ror	r20
 278:	61 e0       	ldi	r22, 0x01	; 1
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	0e 94 d5 03 	call	0x7aa	; 0x7aa <DIO_SetPinVal>
 280:	4c 2f       	mov	r20, r28
 282:	40 74       	andi	r20, 0x40	; 64
 284:	50 e0       	ldi	r21, 0x00	; 0
 286:	04 2e       	mov	r0, r20
 288:	45 2f       	mov	r20, r21
 28a:	00 0c       	add	r0, r0
 28c:	44 1f       	adc	r20, r20
 28e:	55 0b       	sbc	r21, r21
 290:	00 0c       	add	r0, r0
 292:	44 1f       	adc	r20, r20
 294:	55 1f       	adc	r21, r21
 296:	63 e0       	ldi	r22, 0x03	; 3
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	0e 94 d5 03 	call	0x7aa	; 0x7aa <DIO_SetPinVal>
 29e:	4c 2f       	mov	r20, r28
 2a0:	44 1f       	adc	r20, r20
 2a2:	44 27       	eor	r20, r20
 2a4:	44 1f       	adc	r20, r20
 2a6:	64 e0       	ldi	r22, 0x04	; 4
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	0e 94 d5 03 	call	0x7aa	; 0x7aa <DIO_SetPinVal>
 2ae:	41 e0       	ldi	r20, 0x01	; 1
 2b0:	62 e0       	ldi	r22, 0x02	; 2
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	0e 94 d5 03 	call	0x7aa	; 0x7aa <DIO_SetPinVal>
 2b8:	8f e8       	ldi	r24, 0x8F	; 143
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <LCD_write_char+0x8a>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <LCD_write_char+0x90>
 2c2:	00 00       	nop
 2c4:	40 e0       	ldi	r20, 0x00	; 0
 2c6:	62 e0       	ldi	r22, 0x02	; 2
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	0e 94 d5 03 	call	0x7aa	; 0x7aa <DIO_SetPinVal>
 2ce:	8f e8       	ldi	r24, 0x8F	; 143
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	01 97       	sbiw	r24, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <LCD_write_char+0xa0>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <LCD_write_char+0xa6>
 2d8:	00 00       	nop
 2da:	4c 2f       	mov	r20, r28
 2dc:	41 70       	andi	r20, 0x01	; 1
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	0e 94 d5 03 	call	0x7aa	; 0x7aa <DIO_SetPinVal>
 2e6:	4c 2f       	mov	r20, r28
 2e8:	42 70       	andi	r20, 0x02	; 2
 2ea:	50 e0       	ldi	r21, 0x00	; 0
 2ec:	55 95       	asr	r21
 2ee:	47 95       	ror	r20
 2f0:	61 e0       	ldi	r22, 0x01	; 1
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	0e 94 d5 03 	call	0x7aa	; 0x7aa <DIO_SetPinVal>
 2f8:	4c 2f       	mov	r20, r28
 2fa:	44 70       	andi	r20, 0x04	; 4
 2fc:	50 e0       	ldi	r21, 0x00	; 0
 2fe:	55 95       	asr	r21
 300:	47 95       	ror	r20
 302:	55 95       	asr	r21
 304:	47 95       	ror	r20
 306:	63 e0       	ldi	r22, 0x03	; 3
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	0e 94 d5 03 	call	0x7aa	; 0x7aa <DIO_SetPinVal>
 30e:	c8 70       	andi	r28, 0x08	; 8
 310:	4c 2f       	mov	r20, r28
 312:	50 e0       	ldi	r21, 0x00	; 0
 314:	55 95       	asr	r21
 316:	47 95       	ror	r20
 318:	55 95       	asr	r21
 31a:	47 95       	ror	r20
 31c:	55 95       	asr	r21
 31e:	47 95       	ror	r20
 320:	64 e0       	ldi	r22, 0x04	; 4
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	0e 94 d5 03 	call	0x7aa	; 0x7aa <DIO_SetPinVal>
 328:	41 e0       	ldi	r20, 0x01	; 1
 32a:	62 e0       	ldi	r22, 0x02	; 2
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <DIO_SetPinVal>
 332:	8f e8       	ldi	r24, 0x8F	; 143
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	01 97       	sbiw	r24, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <LCD_write_char+0x104>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <LCD_write_char+0x10a>
 33c:	00 00       	nop
 33e:	40 e0       	ldi	r20, 0x00	; 0
 340:	62 e0       	ldi	r22, 0x02	; 2
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	0e 94 d5 03 	call	0x7aa	; 0x7aa <DIO_SetPinVal>
 348:	8f e8       	ldi	r24, 0x8F	; 143
 34a:	91 e0       	ldi	r25, 0x01	; 1
 34c:	01 97       	sbiw	r24, 0x01	; 1
 34e:	f1 f7       	brne	.-4      	; 0x34c <LCD_write_char+0x11a>
 350:	00 c0       	rjmp	.+0      	; 0x352 <LCD_write_char+0x120>
 352:	00 00       	nop
 354:	cf 91       	pop	r28
 356:	08 95       	ret

00000358 <LCD_SEND_STRING>:
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	ec 01       	movw	r28, r24
 35e:	03 c0       	rjmp	.+6      	; 0x366 <LCD_SEND_STRING+0xe>
 360:	0e 94 19 01 	call	0x232	; 0x232 <LCD_write_char>
 364:	21 96       	adiw	r28, 0x01	; 1
 366:	88 81       	ld	r24, Y
 368:	81 11       	cpse	r24, r1
 36a:	fa cf       	rjmp	.-12     	; 0x360 <LCD_SEND_STRING+0x8>
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	08 95       	ret

00000372 <LCD_MOVE_CURSOR>:

void LCD_MOVE_CURSOR(unsigned char row , unsigned char column)
{
	
	unsigned char data = 0x80;
	if(row>4||row<1||column>20||column<1)
 372:	9f ef       	ldi	r25, 0xFF	; 255
 374:	98 0f       	add	r25, r24
 376:	94 30       	cpi	r25, 0x04	; 4
 378:	c0 f4       	brcc	.+48     	; 0x3aa <LCD_MOVE_CURSOR+0x38>
 37a:	65 31       	cpi	r22, 0x15	; 21
 37c:	c0 f4       	brcc	.+48     	; 0x3ae <LCD_MOVE_CURSOR+0x3c>
 37e:	66 23       	and	r22, r22
 380:	c1 f0       	breq	.+48     	; 0x3b2 <LCD_MOVE_CURSOR+0x40>
	{
		data=0x80;                       
	}
	else if(row==1)
 382:	81 30       	cpi	r24, 0x01	; 1
 384:	19 f4       	brne	.+6      	; 0x38c <LCD_MOVE_CURSOR+0x1a>
	{
		data=0x80+column-1 ;
 386:	8f e7       	ldi	r24, 0x7F	; 127
 388:	86 0f       	add	r24, r22
 38a:	16 c0       	rjmp	.+44     	; 0x3b8 <LCD_MOVE_CURSOR+0x46>
	}
	else if (row==2)
 38c:	82 30       	cpi	r24, 0x02	; 2
 38e:	19 f4       	brne	.+6      	; 0x396 <LCD_MOVE_CURSOR+0x24>
	{
		data=0xc0+column-1;
 390:	8f eb       	ldi	r24, 0xBF	; 191
 392:	86 0f       	add	r24, r22
 394:	11 c0       	rjmp	.+34     	; 0x3b8 <LCD_MOVE_CURSOR+0x46>
	}else if (row==3)
 396:	83 30       	cpi	r24, 0x03	; 3
 398:	19 f4       	brne	.+6      	; 0x3a0 <LCD_MOVE_CURSOR+0x2e>
	{
		data=0x94+column-1;
 39a:	83 e9       	ldi	r24, 0x93	; 147
 39c:	86 0f       	add	r24, r22
 39e:	0c c0       	rjmp	.+24     	; 0x3b8 <LCD_MOVE_CURSOR+0x46>
	}
	else if (row==4)
 3a0:	84 30       	cpi	r24, 0x04	; 4
 3a2:	49 f4       	brne	.+18     	; 0x3b6 <LCD_MOVE_CURSOR+0x44>
	{
		data=0xD4+column-1;
 3a4:	83 ed       	ldi	r24, 0xD3	; 211
 3a6:	86 0f       	add	r24, r22
 3a8:	07 c0       	rjmp	.+14     	; 0x3b8 <LCD_MOVE_CURSOR+0x46>
{
	
	unsigned char data = 0x80;
	if(row>4||row<1||column>20||column<1)
	{
		data=0x80;                       
 3aa:	80 e8       	ldi	r24, 0x80	; 128
 3ac:	05 c0       	rjmp	.+10     	; 0x3b8 <LCD_MOVE_CURSOR+0x46>
 3ae:	80 e8       	ldi	r24, 0x80	; 128
 3b0:	03 c0       	rjmp	.+6      	; 0x3b8 <LCD_MOVE_CURSOR+0x46>
 3b2:	80 e8       	ldi	r24, 0x80	; 128
 3b4:	01 c0       	rjmp	.+2      	; 0x3b8 <LCD_MOVE_CURSOR+0x46>


void LCD_MOVE_CURSOR(unsigned char row , unsigned char column)
{
	
	unsigned char data = 0x80;
 3b6:	80 e8       	ldi	r24, 0x80	; 128
	}
	else if (row==4)
	{
		data=0xD4+column-1;
	}
	LCD_instruction(data);
 3b8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_instruction>
 3bc:	87 ec       	ldi	r24, 0xC7	; 199
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <LCD_MOVE_CURSOR+0x4e>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <LCD_MOVE_CURSOR+0x54>
 3c6:	00 00       	nop
 3c8:	08 95       	ret

000003ca <ISR_ADC>:
	_delay_ms(1000);
}


void ISR_ADC(void)
{
 3ca:	08 95       	ret

000003cc <ISR_INT0>:
}


void ISR_INT0(void)
{
	DIO_SetPinVal(PC,0,0);
 3cc:	40 e0       	ldi	r20, 0x00	; 0
 3ce:	60 e0       	ldi	r22, 0x00	; 0
 3d0:	82 e0       	ldi	r24, 0x02	; 2
 3d2:	0e 94 d5 03 	call	0x7aa	; 0x7aa <DIO_SetPinVal>
	if(channelNum == 0)
 3d6:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <channelNum>
 3da:	81 11       	cpse	r24, r1
 3dc:	09 c0       	rjmp	.+18     	; 0x3f0 <ISR_INT0+0x24>
	{
		LCD_MOVE_CURSOR(4,1);
 3de:	61 e0       	ldi	r22, 0x01	; 1
 3e0:	84 e0       	ldi	r24, 0x04	; 4
 3e2:	0e 94 b9 01 	call	0x372	; 0x372 <LCD_MOVE_CURSOR>
		LCD_SEND_STRING("Temp Exceeded Limit.");
 3e6:	80 e6       	ldi	r24, 0x60	; 96
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_SEND_STRING>
 3ee:	15 c0       	rjmp	.+42     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
	}
	else if(channelNum == 1)
 3f0:	81 30       	cpi	r24, 0x01	; 1
 3f2:	49 f4       	brne	.+18     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
	{
		LCD_MOVE_CURSOR(4,1);
 3f4:	61 e0       	ldi	r22, 0x01	; 1
 3f6:	84 e0       	ldi	r24, 0x04	; 4
 3f8:	0e 94 b9 01 	call	0x372	; 0x372 <LCD_MOVE_CURSOR>
		LCD_SEND_STRING("Light ExceededLimit.");
 3fc:	85 e7       	ldi	r24, 0x75	; 117
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_SEND_STRING>
 404:	0a c0       	rjmp	.+20     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
	}
	else if(channelNum == 2)
 406:	82 30       	cpi	r24, 0x02	; 2
 408:	41 f4       	brne	.+16     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
	{
		LCD_MOVE_CURSOR(4,1);
 40a:	61 e0       	ldi	r22, 0x01	; 1
 40c:	84 e0       	ldi	r24, 0x04	; 4
 40e:	0e 94 b9 01 	call	0x372	; 0x372 <LCD_MOVE_CURSOR>
		LCD_SEND_STRING("Res Exceeded Limit.");
 412:	8a e8       	ldi	r24, 0x8A	; 138
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_SEND_STRING>
	}
	DIO_SetPinVal(PD, 2 , 1);
 41a:	41 e0       	ldi	r20, 0x01	; 1
 41c:	62 e0       	ldi	r22, 0x02	; 2
 41e:	83 e0       	ldi	r24, 0x03	; 3
 420:	0e 94 d5 03 	call	0x7aa	; 0x7aa <DIO_SetPinVal>
 424:	2f ef       	ldi	r18, 0xFF	; 255
 426:	89 e6       	ldi	r24, 0x69	; 105
 428:	98 e1       	ldi	r25, 0x18	; 24
 42a:	21 50       	subi	r18, 0x01	; 1
 42c:	80 40       	sbci	r24, 0x00	; 0
 42e:	90 40       	sbci	r25, 0x00	; 0
 430:	e1 f7       	brne	.-8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 432:	00 c0       	rjmp	.+0      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 434:	00 00       	nop
 436:	08 95       	ret

00000438 <clearLine>:
uint8_t channelNum = 0;
static uint8_t arr[3];

void clearLine()
{
	LCD_MOVE_CURSOR(4,1);
 438:	61 e0       	ldi	r22, 0x01	; 1
 43a:	84 e0       	ldi	r24, 0x04	; 4
 43c:	0e 94 b9 01 	call	0x372	; 0x372 <LCD_MOVE_CURSOR>
	LCD_SEND_STRING("                    ");
 440:	8e e9       	ldi	r24, 0x9E	; 158
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_SEND_STRING>
 448:	08 95       	ret

0000044a <ENABLE_INT0>:
}


void ENABLE_INT0()
{
	DIO_SetPinVal(PD, 7 , 1);
 44a:	41 e0       	ldi	r20, 0x01	; 1
 44c:	67 e0       	ldi	r22, 0x07	; 7
 44e:	83 e0       	ldi	r24, 0x03	; 3
 450:	0e 94 d5 03 	call	0x7aa	; 0x7aa <DIO_SetPinVal>
 454:	8f e1       	ldi	r24, 0x1F	; 31
 456:	9e e4       	ldi	r25, 0x4E	; 78
 458:	01 97       	sbiw	r24, 0x01	; 1
 45a:	f1 f7       	brne	.-4      	; 0x458 <ENABLE_INT0+0xe>
 45c:	00 c0       	rjmp	.+0      	; 0x45e <ENABLE_INT0+0x14>
 45e:	00 00       	nop
	_delay_ms(10);
	DIO_SetPinVal(PD, 7 , 0);
 460:	40 e0       	ldi	r20, 0x00	; 0
 462:	67 e0       	ldi	r22, 0x07	; 7
 464:	83 e0       	ldi	r24, 0x03	; 3
 466:	0e 94 d5 03 	call	0x7aa	; 0x7aa <DIO_SetPinVal>
 46a:	8f e1       	ldi	r24, 0x1F	; 31
 46c:	9e e4       	ldi	r25, 0x4E	; 78
 46e:	01 97       	sbiw	r24, 0x01	; 1
 470:	f1 f7       	brne	.-4      	; 0x46e <ENABLE_INT0+0x24>
 472:	00 c0       	rjmp	.+0      	; 0x474 <ENABLE_INT0+0x2a>
 474:	00 00       	nop
 476:	08 95       	ret

00000478 <checkLimit>:



void checkLimit()
{
	if( (arr[0]>75) )
 478:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <__data_end>
 47c:	8c 34       	cpi	r24, 0x4C	; 76
 47e:	28 f0       	brcs	.+10     	; 0x48a <checkLimit+0x12>
	{
		channelNum = 0;
 480:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <channelNum>
		ENABLE_INT0();
 484:	0e 94 25 02 	call	0x44a	; 0x44a <ENABLE_INT0>
 488:	08 95       	ret
	}
	else if(arr[1]> 150)
 48a:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <__data_end+0x1>
 48e:	87 39       	cpi	r24, 0x97	; 151
 490:	30 f0       	brcs	.+12     	; 0x49e <checkLimit+0x26>
	{
		channelNum = 1;
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <channelNum>
		ENABLE_INT0();
 498:	0e 94 25 02 	call	0x44a	; 0x44a <ENABLE_INT0>
 49c:	08 95       	ret
	}
	else if(arr[2]>150)
 49e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__data_end+0x2>
 4a2:	87 39       	cpi	r24, 0x97	; 151
 4a4:	30 f0       	brcs	.+12     	; 0x4b2 <checkLimit+0x3a>
	{
		channelNum = 2;
 4a6:	82 e0       	ldi	r24, 0x02	; 2
 4a8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <channelNum>
		ENABLE_INT0();
 4ac:	0e 94 25 02 	call	0x44a	; 0x44a <ENABLE_INT0>
 4b0:	08 95       	ret
	}
	else
	{
		DIO_SetPinVal(PC,0,1); clearLine();
 4b2:	41 e0       	ldi	r20, 0x01	; 1
 4b4:	60 e0       	ldi	r22, 0x00	; 0
 4b6:	82 e0       	ldi	r24, 0x02	; 2
 4b8:	0e 94 d5 03 	call	0x7aa	; 0x7aa <DIO_SetPinVal>
 4bc:	0e 94 1c 02 	call	0x438	; 0x438 <clearLine>
 4c0:	08 95       	ret

000004c2 <main>:
	}
}

int main()
{
	EXT0_VID_SET_CALL_BACK(ISR_INT0);
 4c2:	86 ee       	ldi	r24, 0xE6	; 230
 4c4:	91 e0       	ldi	r25, 0x01	; 1
 4c6:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <EXT0_VID_SET_CALL_BACK>
	EXT16_VID_SET_CALL_BACK(ISR_ADC);
 4ca:	85 ee       	ldi	r24, 0xE5	; 229
 4cc:	91 e0       	ldi	r25, 0x01	; 1
 4ce:	0e 94 9f 03 	call	0x73e	; 0x73e <EXT16_VID_SET_CALL_BACK>
	DIO_init();
 4d2:	0e 94 cd 03 	call	0x79a	; 0x79a <DIO_init>
	LCD_INIT();
 4d6:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_INIT>
 4da:	2f ef       	ldi	r18, 0xFF	; 255
 4dc:	84 e3       	ldi	r24, 0x34	; 52
 4de:	9c e0       	ldi	r25, 0x0C	; 12
 4e0:	21 50       	subi	r18, 0x01	; 1
 4e2:	80 40       	sbci	r24, 0x00	; 0
 4e4:	90 40       	sbci	r25, 0x00	; 0
 4e6:	e1 f7       	brne	.-8      	; 0x4e0 <main+0x1e>
 4e8:	00 c0       	rjmp	.+0      	; 0x4ea <main+0x28>
 4ea:	00 00       	nop
	_delay_ms(500);
	GIE_voidEnable();
 4ec:	0e 94 60 04 	call	0x8c0	; 0x8c0 <GIE_voidEnable>
	EXTinterrupt_init();
 4f0:	0e 94 42 04 	call	0x884	; 0x884 <EXTinterrupt_init>
	ADC_vInt();
 4f4:	0e 94 7f 03 	call	0x6fe	; 0x6fe <ADC_vInt>
	ADC_voidStartConversion(0);
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	0e 94 6e 03 	call	0x6dc	; 0x6dc <ADC_voidStartConversion>
	DIO_SetPinVal(PC, 0, 1);
 4fe:	41 e0       	ldi	r20, 0x01	; 1
 500:	60 e0       	ldi	r22, 0x00	; 0
 502:	82 e0       	ldi	r24, 0x02	; 2
 504:	0e 94 d5 03 	call	0x7aa	; 0x7aa <DIO_SetPinVal>
	
	while(1)
	{

		LCD_MOVE_CURSOR(1,1);
 508:	61 e0       	ldi	r22, 0x01	; 1
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	0e 94 b9 01 	call	0x372	; 0x372 <LCD_MOVE_CURSOR>
		LCD_write_char(0x30);
 510:	80 e3       	ldi	r24, 0x30	; 48
 512:	0e 94 19 01 	call	0x232	; 0x232 <LCD_write_char>
		LCD_write_char((arr[0]/100)+48);
 516:	0e eb       	ldi	r16, 0xBE	; 190
 518:	10 e0       	ldi	r17, 0x00	; 0
 51a:	f8 01       	movw	r30, r16
 51c:	80 81       	ld	r24, Z
 51e:	d9 e2       	ldi	r29, 0x29	; 41
 520:	8d 9f       	mul	r24, r29
 522:	81 2d       	mov	r24, r1
 524:	11 24       	eor	r1, r1
 526:	82 95       	swap	r24
 528:	8f 70       	andi	r24, 0x0F	; 15
 52a:	80 5d       	subi	r24, 0xD0	; 208
 52c:	0e 94 19 01 	call	0x232	; 0x232 <LCD_write_char>
		LCD_write_char(((arr[0]/10)%10)+48);
 530:	f8 01       	movw	r30, r16
 532:	80 81       	ld	r24, Z
 534:	cd ec       	ldi	r28, 0xCD	; 205
 536:	8c 9f       	mul	r24, r28
 538:	81 2d       	mov	r24, r1
 53a:	11 24       	eor	r1, r1
 53c:	86 95       	lsr	r24
 53e:	86 95       	lsr	r24
 540:	86 95       	lsr	r24
 542:	8c 9f       	mul	r24, r28
 544:	91 2d       	mov	r25, r1
 546:	11 24       	eor	r1, r1
 548:	96 95       	lsr	r25
 54a:	96 95       	lsr	r25
 54c:	96 95       	lsr	r25
 54e:	99 0f       	add	r25, r25
 550:	29 2f       	mov	r18, r25
 552:	22 0f       	add	r18, r18
 554:	22 0f       	add	r18, r18
 556:	92 0f       	add	r25, r18
 558:	89 1b       	sub	r24, r25
 55a:	80 5d       	subi	r24, 0xD0	; 208
 55c:	0e 94 19 01 	call	0x232	; 0x232 <LCD_write_char>
		LCD_write_char((arr[0]%10)+48);
 560:	f8 01       	movw	r30, r16
 562:	80 81       	ld	r24, Z
 564:	8c 9f       	mul	r24, r28
 566:	91 2d       	mov	r25, r1
 568:	11 24       	eor	r1, r1
 56a:	96 95       	lsr	r25
 56c:	96 95       	lsr	r25
 56e:	96 95       	lsr	r25
 570:	99 0f       	add	r25, r25
 572:	29 2f       	mov	r18, r25
 574:	22 0f       	add	r18, r18
 576:	22 0f       	add	r18, r18
 578:	92 0f       	add	r25, r18
 57a:	89 1b       	sub	r24, r25
 57c:	80 5d       	subi	r24, 0xD0	; 208
 57e:	0e 94 19 01 	call	0x232	; 0x232 <LCD_write_char>
		LCD_write_char(0xDF);
 582:	8f ed       	ldi	r24, 0xDF	; 223
 584:	0e 94 19 01 	call	0x232	; 0x232 <LCD_write_char>
		LCD_write_char(0x43);
 588:	83 e4       	ldi	r24, 0x43	; 67
 58a:	0e 94 19 01 	call	0x232	; 0x232 <LCD_write_char>
		
		LCD_MOVE_CURSOR(2,1);
 58e:	61 e0       	ldi	r22, 0x01	; 1
 590:	82 e0       	ldi	r24, 0x02	; 2
 592:	0e 94 b9 01 	call	0x372	; 0x372 <LCD_MOVE_CURSOR>
		LCD_write_char(0x30);
 596:	80 e3       	ldi	r24, 0x30	; 48
 598:	0e 94 19 01 	call	0x232	; 0x232 <LCD_write_char>
		LCD_write_char((arr[1]/100)+48);
 59c:	f8 01       	movw	r30, r16
 59e:	81 81       	ldd	r24, Z+1	; 0x01
 5a0:	8d 9f       	mul	r24, r29
 5a2:	81 2d       	mov	r24, r1
 5a4:	11 24       	eor	r1, r1
 5a6:	82 95       	swap	r24
 5a8:	8f 70       	andi	r24, 0x0F	; 15
 5aa:	80 5d       	subi	r24, 0xD0	; 208
 5ac:	0e 94 19 01 	call	0x232	; 0x232 <LCD_write_char>
		LCD_write_char(((arr[1]/10)%10)+48);
 5b0:	f8 01       	movw	r30, r16
 5b2:	81 81       	ldd	r24, Z+1	; 0x01
 5b4:	8c 9f       	mul	r24, r28
 5b6:	81 2d       	mov	r24, r1
 5b8:	11 24       	eor	r1, r1
 5ba:	86 95       	lsr	r24
 5bc:	86 95       	lsr	r24
 5be:	86 95       	lsr	r24
 5c0:	8c 9f       	mul	r24, r28
 5c2:	91 2d       	mov	r25, r1
 5c4:	11 24       	eor	r1, r1
 5c6:	96 95       	lsr	r25
 5c8:	96 95       	lsr	r25
 5ca:	96 95       	lsr	r25
 5cc:	99 0f       	add	r25, r25
 5ce:	29 2f       	mov	r18, r25
 5d0:	22 0f       	add	r18, r18
 5d2:	22 0f       	add	r18, r18
 5d4:	92 0f       	add	r25, r18
 5d6:	89 1b       	sub	r24, r25
 5d8:	80 5d       	subi	r24, 0xD0	; 208
 5da:	0e 94 19 01 	call	0x232	; 0x232 <LCD_write_char>
		LCD_write_char((arr[1]%10)+48);
 5de:	f8 01       	movw	r30, r16
 5e0:	81 81       	ldd	r24, Z+1	; 0x01
 5e2:	8c 9f       	mul	r24, r28
 5e4:	91 2d       	mov	r25, r1
 5e6:	11 24       	eor	r1, r1
 5e8:	96 95       	lsr	r25
 5ea:	96 95       	lsr	r25
 5ec:	96 95       	lsr	r25
 5ee:	99 0f       	add	r25, r25
 5f0:	29 2f       	mov	r18, r25
 5f2:	22 0f       	add	r18, r18
 5f4:	22 0f       	add	r18, r18
 5f6:	92 0f       	add	r25, r18
 5f8:	89 1b       	sub	r24, r25
 5fa:	80 5d       	subi	r24, 0xD0	; 208
 5fc:	0e 94 19 01 	call	0x232	; 0x232 <LCD_write_char>
		LCD_SEND_STRING(" LUX");
 600:	83 eb       	ldi	r24, 0xB3	; 179
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_SEND_STRING>
		
		LCD_MOVE_CURSOR(3,1);
 608:	61 e0       	ldi	r22, 0x01	; 1
 60a:	83 e0       	ldi	r24, 0x03	; 3
 60c:	0e 94 b9 01 	call	0x372	; 0x372 <LCD_MOVE_CURSOR>
		LCD_write_char(0x30);
 610:	80 e3       	ldi	r24, 0x30	; 48
 612:	0e 94 19 01 	call	0x232	; 0x232 <LCD_write_char>
		LCD_write_char((arr[2]/100)+48);
 616:	f8 01       	movw	r30, r16
 618:	82 81       	ldd	r24, Z+2	; 0x02
 61a:	8d 9f       	mul	r24, r29
 61c:	81 2d       	mov	r24, r1
 61e:	11 24       	eor	r1, r1
 620:	82 95       	swap	r24
 622:	8f 70       	andi	r24, 0x0F	; 15
 624:	80 5d       	subi	r24, 0xD0	; 208
 626:	0e 94 19 01 	call	0x232	; 0x232 <LCD_write_char>
		LCD_write_char(((arr[2]/10)%10)+48);
 62a:	f8 01       	movw	r30, r16
 62c:	82 81       	ldd	r24, Z+2	; 0x02
 62e:	8c 9f       	mul	r24, r28
 630:	81 2d       	mov	r24, r1
 632:	11 24       	eor	r1, r1
 634:	86 95       	lsr	r24
 636:	86 95       	lsr	r24
 638:	86 95       	lsr	r24
 63a:	8c 9f       	mul	r24, r28
 63c:	91 2d       	mov	r25, r1
 63e:	11 24       	eor	r1, r1
 640:	96 95       	lsr	r25
 642:	96 95       	lsr	r25
 644:	96 95       	lsr	r25
 646:	99 0f       	add	r25, r25
 648:	29 2f       	mov	r18, r25
 64a:	22 0f       	add	r18, r18
 64c:	22 0f       	add	r18, r18
 64e:	92 0f       	add	r25, r18
 650:	89 1b       	sub	r24, r25
 652:	80 5d       	subi	r24, 0xD0	; 208
 654:	0e 94 19 01 	call	0x232	; 0x232 <LCD_write_char>
		LCD_write_char((arr[2]%10)+48);
 658:	f8 01       	movw	r30, r16
 65a:	82 81       	ldd	r24, Z+2	; 0x02
 65c:	8c 9f       	mul	r24, r28
 65e:	c1 2d       	mov	r28, r1
 660:	11 24       	eor	r1, r1
 662:	c6 95       	lsr	r28
 664:	c6 95       	lsr	r28
 666:	c6 95       	lsr	r28
 668:	cc 0f       	add	r28, r28
 66a:	9c 2f       	mov	r25, r28
 66c:	99 0f       	add	r25, r25
 66e:	99 0f       	add	r25, r25
 670:	c9 0f       	add	r28, r25
 672:	8c 1b       	sub	r24, r28
 674:	80 5d       	subi	r24, 0xD0	; 208
 676:	0e 94 19 01 	call	0x232	; 0x232 <LCD_write_char>
		LCD_SEND_STRING(" OHM");
 67a:	88 eb       	ldi	r24, 0xB8	; 184
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_SEND_STRING>
		
		
		adcValue = ADC_GetValAsync();
 682:	0e 94 76 03 	call	0x6ec	; 0x6ec <ADC_GetValAsync>
 686:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <adcValue>
		if(addresscpy == 0)
 68a:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <addresscpy>
 68e:	91 11       	cpse	r25, r1
 690:	08 c0       	rjmp	.+16     	; 0x6a2 <main+0x1e0>
		{
			arr[0] = adcValue;
 692:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <__data_end>
			addresscpy = 1;
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <addresscpy>
			ADC_voidStartConversion(1);
 69c:	0e 94 6e 03 	call	0x6dc	; 0x6dc <ADC_voidStartConversion>
 6a0:	16 c0       	rjmp	.+44     	; 0x6ce <main+0x20c>
		}
		else if(addresscpy == 1)
 6a2:	91 30       	cpi	r25, 0x01	; 1
 6a4:	51 f4       	brne	.+20     	; 0x6ba <main+0x1f8>
		{
			if(adcValue != 0) {arr[1] = adcValue;}
 6a6:	81 11       	cpse	r24, r1
 6a8:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <__data_end+0x1>
			addresscpy = 2;
 6ac:	82 e0       	ldi	r24, 0x02	; 2
 6ae:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <addresscpy>
			ADC_voidStartConversion(4);
 6b2:	84 e0       	ldi	r24, 0x04	; 4
 6b4:	0e 94 6e 03 	call	0x6dc	; 0x6dc <ADC_voidStartConversion>
 6b8:	0a c0       	rjmp	.+20     	; 0x6ce <main+0x20c>
		}
		else if(addresscpy == 2)
 6ba:	92 30       	cpi	r25, 0x02	; 2
 6bc:	41 f4       	brne	.+16     	; 0x6ce <main+0x20c>
		{
			if(adcValue != 0) {arr[2] = adcValue;}
 6be:	81 11       	cpse	r24, r1
 6c0:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__data_end+0x2>
			addresscpy = 0;
 6c4:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <addresscpy>
			ADC_voidStartConversion(0);
 6c8:	80 e0       	ldi	r24, 0x00	; 0
 6ca:	0e 94 6e 03 	call	0x6dc	; 0x6dc <ADC_voidStartConversion>
		}
		checkLimit();
 6ce:	0e 94 3c 02 	call	0x478	; 0x478 <checkLimit>
	}
 6d2:	1a cf       	rjmp	.-460    	; 0x508 <main+0x46>

000006d4 <ADC_voidEnable>:


void ADC_voidDisableInt()
{
	CLR_BIT(ADCSRA, ADIE);
	CLR_BIT(ADCSRA, ADATE);
 6d4:	86 b1       	in	r24, 0x06	; 6
 6d6:	80 68       	ori	r24, 0x80	; 128
 6d8:	86 b9       	out	0x06, r24	; 6
 6da:	08 95       	ret

000006dc <ADC_voidStartConversion>:
 6dc:	97 b1       	in	r25, 0x07	; 7
 6de:	90 7e       	andi	r25, 0xE0	; 224
 6e0:	89 2b       	or	r24, r25
 6e2:	87 b9       	out	0x07, r24	; 7
 6e4:	86 b1       	in	r24, 0x06	; 6
 6e6:	80 64       	ori	r24, 0x40	; 64
 6e8:	86 b9       	out	0x06, r24	; 6
 6ea:	08 95       	ret

000006ec <ADC_GetValAsync>:
 6ec:	85 b1       	in	r24, 0x05	; 5
 6ee:	08 95       	ret

000006f0 <ADC_voidEnableInt>:
 6f0:	86 b1       	in	r24, 0x06	; 6
 6f2:	88 60       	ori	r24, 0x08	; 8
 6f4:	86 b9       	out	0x06, r24	; 6
 6f6:	86 b1       	in	r24, 0x06	; 6
 6f8:	80 62       	ori	r24, 0x20	; 32
 6fa:	86 b9       	out	0x06, r24	; 6
 6fc:	08 95       	ret

000006fe <ADC_vInt>:
 6fe:	87 b1       	in	r24, 0x07	; 7
 700:	80 64       	ori	r24, 0x40	; 64
 702:	87 b9       	out	0x07, r24	; 7
 704:	87 b1       	in	r24, 0x07	; 7
 706:	8f 77       	andi	r24, 0x7F	; 127
 708:	87 b9       	out	0x07, r24	; 7
 70a:	87 b1       	in	r24, 0x07	; 7
 70c:	80 62       	ori	r24, 0x20	; 32
 70e:	87 b9       	out	0x07, r24	; 7
 710:	86 b1       	in	r24, 0x06	; 6
 712:	81 60       	ori	r24, 0x01	; 1
 714:	86 b9       	out	0x06, r24	; 6
 716:	86 b1       	in	r24, 0x06	; 6
 718:	82 60       	ori	r24, 0x02	; 2
 71a:	86 b9       	out	0x06, r24	; 6
 71c:	86 b1       	in	r24, 0x06	; 6
 71e:	84 60       	ori	r24, 0x04	; 4
 720:	86 b9       	out	0x06, r24	; 6
 722:	86 b1       	in	r24, 0x06	; 6
 724:	8f 7d       	andi	r24, 0xDF	; 223
 726:	86 b9       	out	0x06, r24	; 6
 728:	86 b1       	in	r24, 0x06	; 6
 72a:	8f 7b       	andi	r24, 0xBF	; 191
 72c:	86 b9       	out	0x06, r24	; 6
 72e:	86 b1       	in	r24, 0x06	; 6
 730:	8f 77       	andi	r24, 0x7F	; 127
 732:	86 b9       	out	0x06, r24	; 6
 734:	0e 94 78 03 	call	0x6f0	; 0x6f0 <ADC_voidEnableInt>
 738:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <ADC_voidEnable>
 73c:	08 95       	ret

0000073e <EXT16_VID_SET_CALL_BACK>:
}


void EXT16_VID_SET_CALL_BACK(void (*PTR0)(void))
{
	Callback = PTR0;
 73e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <Callback+0x1>
 742:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <Callback>
 746:	08 95       	ret

00000748 <__vector_16>:
}

void __vector_16 (void) __attribute__ ((signal,used, externally_visible));
 748:	1f 92       	push	r1
 74a:	0f 92       	push	r0
 74c:	0f b6       	in	r0, 0x3f	; 63
 74e:	0f 92       	push	r0
 750:	11 24       	eor	r1, r1
 752:	2f 93       	push	r18
 754:	3f 93       	push	r19
 756:	4f 93       	push	r20
 758:	5f 93       	push	r21
 75a:	6f 93       	push	r22
 75c:	7f 93       	push	r23
 75e:	8f 93       	push	r24
 760:	9f 93       	push	r25
 762:	af 93       	push	r26
 764:	bf 93       	push	r27
 766:	ef 93       	push	r30
 768:	ff 93       	push	r31
 76a:	e0 91 c4 00 	lds	r30, 0x00C4	; 0x8000c4 <Callback>
 76e:	f0 91 c5 00 	lds	r31, 0x00C5	; 0x8000c5 <Callback+0x1>
 772:	30 97       	sbiw	r30, 0x00	; 0
 774:	09 f0       	breq	.+2      	; 0x778 <__vector_16+0x30>
 776:	09 95       	icall
 778:	ff 91       	pop	r31
 77a:	ef 91       	pop	r30
 77c:	bf 91       	pop	r27
 77e:	af 91       	pop	r26
 780:	9f 91       	pop	r25
 782:	8f 91       	pop	r24
 784:	7f 91       	pop	r23
 786:	6f 91       	pop	r22
 788:	5f 91       	pop	r21
 78a:	4f 91       	pop	r20
 78c:	3f 91       	pop	r19
 78e:	2f 91       	pop	r18
 790:	0f 90       	pop	r0
 792:	0f be       	out	0x3f, r0	; 63
 794:	0f 90       	pop	r0
 796:	1f 90       	pop	r1
 798:	18 95       	reti

0000079a <DIO_init>:
#include "DIO.h"
#include "STD.h"

void DIO_init()
{
	DDRA = conc_Bits(DDRAPIN7 , DDRAPIN6, DDRAPIN5, DDRAPIN4, DDRAPIN3, DDRAPIN2,DDRAPIN1,DDRAPIN0);
 79a:	8c ee       	ldi	r24, 0xEC	; 236
 79c:	8a bb       	out	0x1a, r24	; 26
	DDRB = conc_Bits(DDRBPIN7 , DDRBPIN6, DDRBPIN5, DDRBPIN4, DDRBPIN3, DDRBPIN2,DDRBPIN1,DDRBPIN0);
 79e:	8f ef       	ldi	r24, 0xFF	; 255
 7a0:	87 bb       	out	0x17, r24	; 23
	DDRC = conc_Bits(DDRCPIN7 , DDRCPIN6, DDRCPIN5, DDRCPIN4, DDRCPIN3, DDRCPIN2,DDRCPIN1,DDRCPIN0);
 7a2:	84 bb       	out	0x14, r24	; 20
	DDRD = conc_Bits(DDRDPIN7 , DDRDPIN6, DDRDPIN5, DDRDPIN4, DDRDPIN3, DDRDPIN2,DDRDPIN1,DDRDPIN0);
 7a4:	8b ef       	ldi	r24, 0xFB	; 251
 7a6:	81 bb       	out	0x11, r24	; 17
 7a8:	08 95       	ret

000007aa <DIO_SetPinVal>:
}


void DIO_SetPinVal(uint8_t portName, uint8_t pinNum, uint8_t val)
{
	switch(portName)
 7aa:	81 30       	cpi	r24, 0x01	; 1
 7ac:	01 f1       	breq	.+64     	; 0x7ee <DIO_SetPinVal+0x44>
 7ae:	30 f0       	brcs	.+12     	; 0x7bc <DIO_SetPinVal+0x12>
 7b0:	82 30       	cpi	r24, 0x02	; 2
 7b2:	b1 f1       	breq	.+108    	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 7b4:	83 30       	cpi	r24, 0x03	; 3
 7b6:	09 f4       	brne	.+2      	; 0x7ba <DIO_SetPinVal+0x10>
 7b8:	4c c0       	rjmp	.+152    	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 7ba:	08 95       	ret
	{
		case PA:
		if(val == 1) {SET_BIT(PORTA, pinNum);}
 7bc:	41 30       	cpi	r20, 0x01	; 1
 7be:	59 f4       	brne	.+22     	; 0x7d6 <DIO_SetPinVal+0x2c>
 7c0:	2b b3       	in	r18, 0x1b	; 27
 7c2:	81 e0       	ldi	r24, 0x01	; 1
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	02 c0       	rjmp	.+4      	; 0x7cc <DIO_SetPinVal+0x22>
 7c8:	88 0f       	add	r24, r24
 7ca:	99 1f       	adc	r25, r25
 7cc:	6a 95       	dec	r22
 7ce:	e2 f7       	brpl	.-8      	; 0x7c8 <DIO_SetPinVal+0x1e>
 7d0:	82 2b       	or	r24, r18
 7d2:	8b bb       	out	0x1b, r24	; 27
 7d4:	08 95       	ret
		else         {CLR_BIT(PORTA, pinNum);}
 7d6:	2b b3       	in	r18, 0x1b	; 27
 7d8:	81 e0       	ldi	r24, 0x01	; 1
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <DIO_SetPinVal+0x38>
 7de:	88 0f       	add	r24, r24
 7e0:	99 1f       	adc	r25, r25
 7e2:	6a 95       	dec	r22
 7e4:	e2 f7       	brpl	.-8      	; 0x7de <DIO_SetPinVal+0x34>
 7e6:	80 95       	com	r24
 7e8:	82 23       	and	r24, r18
 7ea:	8b bb       	out	0x1b, r24	; 27
 7ec:	08 95       	ret
		break;
		case PB:
		if(val == 1) {SET_BIT(PORTB, pinNum);}
 7ee:	41 30       	cpi	r20, 0x01	; 1
 7f0:	59 f4       	brne	.+22     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7f2:	28 b3       	in	r18, 0x18	; 24
 7f4:	81 e0       	ldi	r24, 0x01	; 1
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	02 c0       	rjmp	.+4      	; 0x7fe <DIO_SetPinVal+0x54>
 7fa:	88 0f       	add	r24, r24
 7fc:	99 1f       	adc	r25, r25
 7fe:	6a 95       	dec	r22
 800:	e2 f7       	brpl	.-8      	; 0x7fa <DIO_SetPinVal+0x50>
 802:	82 2b       	or	r24, r18
 804:	88 bb       	out	0x18, r24	; 24
 806:	08 95       	ret
		else         {CLR_BIT(PORTB, pinNum);}
 808:	28 b3       	in	r18, 0x18	; 24
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	02 c0       	rjmp	.+4      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 810:	88 0f       	add	r24, r24
 812:	99 1f       	adc	r25, r25
 814:	6a 95       	dec	r22
 816:	e2 f7       	brpl	.-8      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 818:	80 95       	com	r24
 81a:	82 23       	and	r24, r18
 81c:	88 bb       	out	0x18, r24	; 24
 81e:	08 95       	ret
		break;
		case PC:
		if(val == 1) {SET_BIT(PORTC, pinNum);}
 820:	41 30       	cpi	r20, 0x01	; 1
 822:	59 f4       	brne	.+22     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 824:	25 b3       	in	r18, 0x15	; 21
 826:	81 e0       	ldi	r24, 0x01	; 1
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	02 c0       	rjmp	.+4      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 82c:	88 0f       	add	r24, r24
 82e:	99 1f       	adc	r25, r25
 830:	6a 95       	dec	r22
 832:	e2 f7       	brpl	.-8      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 834:	82 2b       	or	r24, r18
 836:	85 bb       	out	0x15, r24	; 21
 838:	08 95       	ret
		else         {CLR_BIT(PORTC, pinNum);}
 83a:	25 b3       	in	r18, 0x15	; 21
 83c:	81 e0       	ldi	r24, 0x01	; 1
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	02 c0       	rjmp	.+4      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 842:	88 0f       	add	r24, r24
 844:	99 1f       	adc	r25, r25
 846:	6a 95       	dec	r22
 848:	e2 f7       	brpl	.-8      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 84a:	80 95       	com	r24
 84c:	82 23       	and	r24, r18
 84e:	85 bb       	out	0x15, r24	; 21
 850:	08 95       	ret
		break;
		case PD:
		if(val == 1) {SET_BIT(PORTD, pinNum);}
 852:	41 30       	cpi	r20, 0x01	; 1
 854:	59 f4       	brne	.+22     	; 0x86c <__stack+0xd>
 856:	22 b3       	in	r18, 0x12	; 18
 858:	81 e0       	ldi	r24, 0x01	; 1
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	02 c0       	rjmp	.+4      	; 0x862 <__stack+0x3>
 85e:	88 0f       	add	r24, r24
 860:	99 1f       	adc	r25, r25
 862:	6a 95       	dec	r22
 864:	e2 f7       	brpl	.-8      	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 866:	82 2b       	or	r24, r18
 868:	82 bb       	out	0x12, r24	; 18
 86a:	08 95       	ret
		else         {CLR_BIT(PORTD, pinNum);}
 86c:	22 b3       	in	r18, 0x12	; 18
 86e:	81 e0       	ldi	r24, 0x01	; 1
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	02 c0       	rjmp	.+4      	; 0x878 <__stack+0x19>
 874:	88 0f       	add	r24, r24
 876:	99 1f       	adc	r25, r25
 878:	6a 95       	dec	r22
 87a:	e2 f7       	brpl	.-8      	; 0x874 <__stack+0x15>
 87c:	80 95       	com	r24
 87e:	82 23       	and	r24, r18
 880:	82 bb       	out	0x12, r24	; 18
 882:	08 95       	ret

00000884 <EXTinterrupt_init>:
	SET_BIT(SREG,7);
}

void GIE_voidDisable(void)
{
	CLR_BIT(SREG,7);
 884:	8b b7       	in	r24, 0x3b	; 59
 886:	80 64       	ori	r24, 0x40	; 64
 888:	8b bf       	out	0x3b, r24	; 59
 88a:	8b b7       	in	r24, 0x3b	; 59
 88c:	80 68       	ori	r24, 0x80	; 128
 88e:	8b bf       	out	0x3b, r24	; 59
 890:	8b b7       	in	r24, 0x3b	; 59
 892:	80 62       	ori	r24, 0x20	; 32
 894:	8b bf       	out	0x3b, r24	; 59
 896:	85 b7       	in	r24, 0x35	; 53
 898:	8e 7f       	andi	r24, 0xFE	; 254
 89a:	85 bf       	out	0x35, r24	; 53
 89c:	85 b7       	in	r24, 0x35	; 53
 89e:	82 60       	ori	r24, 0x02	; 2
 8a0:	85 bf       	out	0x35, r24	; 53
 8a2:	85 b7       	in	r24, 0x35	; 53
 8a4:	8b 7f       	andi	r24, 0xFB	; 251
 8a6:	85 bf       	out	0x35, r24	; 53
 8a8:	85 b7       	in	r24, 0x35	; 53
 8aa:	88 60       	ori	r24, 0x08	; 8
 8ac:	85 bf       	out	0x35, r24	; 53
 8ae:	85 b7       	in	r24, 0x35	; 53
 8b0:	8b 7f       	andi	r24, 0xFB	; 251
 8b2:	85 bf       	out	0x35, r24	; 53
 8b4:	08 95       	ret

000008b6 <EXT0_VID_SET_CALL_BACK>:
 8b6:	90 93 c7 00 	sts	0x00C7, r25	; 0x8000c7 <CallbackFunc1+0x1>
 8ba:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <CallbackFunc1>
 8be:	08 95       	ret

000008c0 <GIE_voidEnable>:
 8c0:	8f b7       	in	r24, 0x3f	; 63
 8c2:	80 68       	ori	r24, 0x80	; 128
 8c4:	8f bf       	out	0x3f, r24	; 63
 8c6:	08 95       	ret

000008c8 <__vector_1>:
}

void __vector_1 (void) __attribute__ ((signal,used, externally_visible));
 8c8:	1f 92       	push	r1
 8ca:	0f 92       	push	r0
 8cc:	0f b6       	in	r0, 0x3f	; 63
 8ce:	0f 92       	push	r0
 8d0:	11 24       	eor	r1, r1
 8d2:	2f 93       	push	r18
 8d4:	3f 93       	push	r19
 8d6:	4f 93       	push	r20
 8d8:	5f 93       	push	r21
 8da:	6f 93       	push	r22
 8dc:	7f 93       	push	r23
 8de:	8f 93       	push	r24
 8e0:	9f 93       	push	r25
 8e2:	af 93       	push	r26
 8e4:	bf 93       	push	r27
 8e6:	ef 93       	push	r30
 8e8:	ff 93       	push	r31
 8ea:	e0 91 c6 00 	lds	r30, 0x00C6	; 0x8000c6 <CallbackFunc1>
 8ee:	f0 91 c7 00 	lds	r31, 0x00C7	; 0x8000c7 <CallbackFunc1+0x1>
 8f2:	30 97       	sbiw	r30, 0x00	; 0
 8f4:	09 f0       	breq	.+2      	; 0x8f8 <__vector_1+0x30>
 8f6:	09 95       	icall
 8f8:	ff 91       	pop	r31
 8fa:	ef 91       	pop	r30
 8fc:	bf 91       	pop	r27
 8fe:	af 91       	pop	r26
 900:	9f 91       	pop	r25
 902:	8f 91       	pop	r24
 904:	7f 91       	pop	r23
 906:	6f 91       	pop	r22
 908:	5f 91       	pop	r21
 90a:	4f 91       	pop	r20
 90c:	3f 91       	pop	r19
 90e:	2f 91       	pop	r18
 910:	0f 90       	pop	r0
 912:	0f be       	out	0x3f, r0	; 63
 914:	0f 90       	pop	r0
 916:	1f 90       	pop	r1
 918:	18 95       	reti

0000091a <_exit>:
 91a:	f8 94       	cli

0000091c <__stop_program>:
 91c:	ff cf       	rjmp	.-2      	; 0x91c <__stop_program>
