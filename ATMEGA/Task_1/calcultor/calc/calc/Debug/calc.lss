
calc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  000007ac  00000840  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000032  008000a0  008000a0  00000880  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000008ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019ea  00000000  00000000  000009d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000973  00000000  00000000  000023be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ad9  00000000  00000000  00002d31  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000208  00000000  00000000  0000380c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000585  00000000  00000000  00003a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dc0  00000000  00000000  00003f99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00004d59  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ea       	ldi	r30, 0xAC	; 172
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ea       	ldi	r26, 0xA0	; 160
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3d       	cpi	r26, 0xD2	; 210
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5e 02 	call	0x4bc	; 0x4bc <main>
  8a:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Keypad_vInit>:
		}
	}
	// DIO_SetPinValue(DIO_PORTC,ROWs[row],HIGH); // restore default case "HIGH" for the row in progress,
}
return (u8)Return_value;
}
  92:	43 e0       	ldi	r20, 0x03	; 3
  94:	65 e0       	ldi	r22, 0x05	; 5
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	0e 94 70 02 	call	0x4e0	; 0x4e0 <DIO_SetPinDir>
  9c:	43 e0       	ldi	r20, 0x03	; 3
  9e:	64 e0       	ldi	r22, 0x04	; 4
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	0e 94 70 02 	call	0x4e0	; 0x4e0 <DIO_SetPinDir>
  a6:	43 e0       	ldi	r20, 0x03	; 3
  a8:	63 e0       	ldi	r22, 0x03	; 3
  aa:	82 e0       	ldi	r24, 0x02	; 2
  ac:	0e 94 70 02 	call	0x4e0	; 0x4e0 <DIO_SetPinDir>
  b0:	43 e0       	ldi	r20, 0x03	; 3
  b2:	62 e0       	ldi	r22, 0x02	; 2
  b4:	82 e0       	ldi	r24, 0x02	; 2
  b6:	0e 94 70 02 	call	0x4e0	; 0x4e0 <DIO_SetPinDir>
  ba:	42 e0       	ldi	r20, 0x02	; 2
  bc:	67 e0       	ldi	r22, 0x07	; 7
  be:	83 e0       	ldi	r24, 0x03	; 3
  c0:	0e 94 70 02 	call	0x4e0	; 0x4e0 <DIO_SetPinDir>
  c4:	42 e0       	ldi	r20, 0x02	; 2
  c6:	66 e0       	ldi	r22, 0x06	; 6
  c8:	83 e0       	ldi	r24, 0x03	; 3
  ca:	0e 94 70 02 	call	0x4e0	; 0x4e0 <DIO_SetPinDir>
  ce:	42 e0       	ldi	r20, 0x02	; 2
  d0:	65 e0       	ldi	r22, 0x05	; 5
  d2:	83 e0       	ldi	r24, 0x03	; 3
  d4:	0e 94 70 02 	call	0x4e0	; 0x4e0 <DIO_SetPinDir>
  d8:	42 e0       	ldi	r20, 0x02	; 2
  da:	63 e0       	ldi	r22, 0x03	; 3
  dc:	83 e0       	ldi	r24, 0x03	; 3
  de:	0e 94 70 02 	call	0x4e0	; 0x4e0 <DIO_SetPinDir>
  e2:	41 e0       	ldi	r20, 0x01	; 1
  e4:	65 e0       	ldi	r22, 0x05	; 5
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_SetPinValue>
  ec:	41 e0       	ldi	r20, 0x01	; 1
  ee:	64 e0       	ldi	r22, 0x04	; 4
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_SetPinValue>
  f6:	41 e0       	ldi	r20, 0x01	; 1
  f8:	63 e0       	ldi	r22, 0x03	; 3
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_SetPinValue>
 100:	41 e0       	ldi	r20, 0x01	; 1
 102:	62 e0       	ldi	r22, 0x02	; 2
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_SetPinValue>
 10a:	67 e0       	ldi	r22, 0x07	; 7
 10c:	83 e0       	ldi	r24, 0x03	; 3
 10e:	0e 94 8c 03 	call	0x718	; 0x718 <Set_InputPullUp>
 112:	66 e0       	ldi	r22, 0x06	; 6
 114:	83 e0       	ldi	r24, 0x03	; 3
 116:	0e 94 8c 03 	call	0x718	; 0x718 <Set_InputPullUp>
 11a:	65 e0       	ldi	r22, 0x05	; 5
 11c:	83 e0       	ldi	r24, 0x03	; 3
 11e:	0e 94 8c 03 	call	0x718	; 0x718 <Set_InputPullUp>
 122:	63 e0       	ldi	r22, 0x03	; 3
 124:	83 e0       	ldi	r24, 0x03	; 3
 126:	0e 94 8c 03 	call	0x718	; 0x718 <Set_InputPullUp>
 12a:	08 95       	ret

0000012c <Keypad_u8Read>:


char Keypad_u8Read()
{
 12c:	9f 92       	push	r9
 12e:	af 92       	push	r10
 130:	bf 92       	push	r11
 132:	cf 92       	push	r12
 134:	df 92       	push	r13
 136:	ef 92       	push	r14
 138:	ff 92       	push	r15
 13a:	0f 93       	push	r16
 13c:	1f 93       	push	r17
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	cd b7       	in	r28, 0x3d	; 61
 144:	de b7       	in	r29, 0x3e	; 62
 146:	a0 97       	sbiw	r28, 0x20	; 32
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	f8 94       	cli
 14c:	de bf       	out	0x3e, r29	; 62
 14e:	0f be       	out	0x3f, r0	; 63
 150:	cd bf       	out	0x3d, r28	; 61
	char arr[4][4]={{'7','8','9','/'},
 152:	80 e1       	ldi	r24, 0x10	; 16
 154:	e0 e9       	ldi	r30, 0x90	; 144
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	de 01       	movw	r26, r28
 15a:	11 96       	adiw	r26, 0x01	; 1
 15c:	01 90       	ld	r0, Z+
 15e:	0d 92       	st	X+, r0
 160:	8a 95       	dec	r24
 162:	e1 f7       	brne	.-8      	; 0x15c <Keypad_u8Read+0x30>
	{'1','2','3','-'},
	{'A','0','=','+'}};
	char row,coloumn,x;
	char returnval=NOTPRESSED;

	int ROWs[4]  = {5,4,3,2};
 164:	88 e0       	ldi	r24, 0x08	; 8
 166:	e0 e8       	ldi	r30, 0x80	; 128
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	de 01       	movw	r26, r28
 16c:	51 96       	adiw	r26, 0x11	; 17
 16e:	01 90       	ld	r0, Z+
 170:	0d 92       	st	X+, r0
 172:	8a 95       	dec	r24
 174:	e1 f7       	brne	.-8      	; 0x16e <Keypad_u8Read+0x42>
	int COLs[4] = {7,6,5,3};
 176:	88 e0       	ldi	r24, 0x08	; 8
 178:	e8 e8       	ldi	r30, 0x88	; 136
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	de 01       	movw	r26, r28
 17e:	59 96       	adiw	r26, 0x19	; 25
 180:	01 90       	ld	r0, Z+
 182:	0d 92       	st	X+, r0
 184:	8a 95       	dec	r24
 186:	e1 f7       	brne	.-8      	; 0x180 <Keypad_u8Read+0x54>
	char arr[4][4]={{'7','8','9','/'},
	{'4','5','6','*'},
	{'1','2','3','-'},
	{'A','0','=','+'}};
	char row,coloumn,x;
	char returnval=NOTPRESSED;
 188:	99 24       	eor	r9, r9
 18a:	9a 94       	dec	r9

	int ROWs[4]  = {5,4,3,2};
	int COLs[4] = {7,6,5,3};
	for(row=0;row<4;row++)
 18c:	a1 2c       	mov	r10, r1
 18e:	54 c0       	rjmp	.+168    	; 0x238 <Keypad_u8Read+0x10c>
		// DIO_write('D',0,1);
		// DIO_write('D',1,1);
		// DIO_write('D',2,1);
		// DIO_write('D',3,1);
		// DIO_write('D',row,0);
		DIO_SetPinValue(DIO_PORTC,ROWs[0],HIGH);
 190:	41 e0       	ldi	r20, 0x01	; 1
 192:	65 e0       	ldi	r22, 0x05	; 5
 194:	82 e0       	ldi	r24, 0x02	; 2
 196:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_SetPinValue>
		DIO_SetPinValue(DIO_PORTC,ROWs[1],HIGH);
 19a:	41 e0       	ldi	r20, 0x01	; 1
 19c:	64 e0       	ldi	r22, 0x04	; 4
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_SetPinValue>
		DIO_SetPinValue(DIO_PORTC,ROWs[2],HIGH);
 1a4:	41 e0       	ldi	r20, 0x01	; 1
 1a6:	63 e0       	ldi	r22, 0x03	; 3
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_SetPinValue>
		DIO_SetPinValue(DIO_PORTC,ROWs[3],HIGH);
 1ae:	41 e0       	ldi	r20, 0x01	; 1
 1b0:	62 e0       	ldi	r22, 0x02	; 2
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_SetPinValue>

		DIO_SetPinValue(DIO_PORTC,ROWs[row],LOW);
 1b8:	ca 2c       	mov	r12, r10
 1ba:	d1 2c       	mov	r13, r1
 1bc:	f6 01       	movw	r30, r12
 1be:	ee 0f       	add	r30, r30
 1c0:	ff 1f       	adc	r31, r31
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	8c 0f       	add	r24, r28
 1c8:	9d 1f       	adc	r25, r29
 1ca:	e8 0f       	add	r30, r24
 1cc:	f9 1f       	adc	r31, r25
 1ce:	60 89       	ldd	r22, Z+16	; 0x10
 1d0:	40 e0       	ldi	r20, 0x00	; 0
 1d2:	82 e0       	ldi	r24, 0x02	; 2
 1d4:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_SetPinValue>

		for(coloumn=0;coloumn<4;coloumn++)
 1d8:	10 e0       	ldi	r17, 0x00	; 0
 1da:	29 c0       	rjmp	.+82     	; 0x22e <Keypad_u8Read+0x102>
		{
			// x=DIO_u8read('D',(coloumn+4));
			x = Dio_GetPinValue(DIO_PORTD,COLs[coloumn]);
 1dc:	e1 2e       	mov	r14, r17
 1de:	f1 2c       	mov	r15, r1
 1e0:	f7 01       	movw	r30, r14
 1e2:	ee 0f       	add	r30, r30
 1e4:	ff 1f       	adc	r31, r31
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	8c 0f       	add	r24, r28
 1ec:	9d 1f       	adc	r25, r29
 1ee:	e8 0f       	add	r30, r24
 1f0:	f9 1f       	adc	r31, r25
 1f2:	00 8d       	ldd	r16, Z+24	; 0x18
 1f4:	60 2f       	mov	r22, r16
 1f6:	83 e0       	ldi	r24, 0x03	; 3
 1f8:	0e 94 5e 03 	call	0x6bc	; 0x6bc <Dio_GetPinValue>
 1fc:	b8 2e       	mov	r11, r24
			if(x==0)
 1fe:	81 11       	cpse	r24, r1
 200:	15 c0       	rjmp	.+42     	; 0x22c <Keypad_u8Read+0x100>
			{
				while (Dio_GetPinValue(DIO_PORTD,COLs[coloumn]) == 0)
 202:	60 2f       	mov	r22, r16
 204:	83 e0       	ldi	r24, 0x03	; 3
 206:	0e 94 5e 03 	call	0x6bc	; 0x6bc <Dio_GetPinValue>
 20a:	88 23       	and	r24, r24
 20c:	d1 f3       	breq	.-12     	; 0x202 <Keypad_u8Read+0xd6>
				{
					// stuck here untill you lift your finger
				}
				
				returnval=arr[row][coloumn];
 20e:	cc 0c       	add	r12, r12
 210:	dd 1c       	adc	r13, r13
 212:	cc 0c       	add	r12, r12
 214:	dd 1c       	adc	r13, r13
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	8c 0f       	add	r24, r28
 21c:	9d 1f       	adc	r25, r29
 21e:	c8 0e       	add	r12, r24
 220:	d9 1e       	adc	r13, r25
 222:	f6 01       	movw	r30, r12
 224:	ee 0d       	add	r30, r14
 226:	ff 1d       	adc	r31, r15
 228:	90 80       	ld	r9, Z
				break;
 22a:	03 c0       	rjmp	.+6      	; 0x232 <Keypad_u8Read+0x106>
		DIO_SetPinValue(DIO_PORTC,ROWs[2],HIGH);
		DIO_SetPinValue(DIO_PORTC,ROWs[3],HIGH);

		DIO_SetPinValue(DIO_PORTC,ROWs[row],LOW);

		for(coloumn=0;coloumn<4;coloumn++)
 22c:	1f 5f       	subi	r17, 0xFF	; 255
 22e:	14 30       	cpi	r17, 0x04	; 4
 230:	a8 f2       	brcs	.-86     	; 0x1dc <Keypad_u8Read+0xb0>
				
				returnval=arr[row][coloumn];
				break;
			}
		}
		if(x==0)
 232:	bb 20       	and	r11, r11
 234:	29 f0       	breq	.+10     	; 0x240 <Keypad_u8Read+0x114>
	char row,coloumn,x;
	char returnval=NOTPRESSED;

	int ROWs[4]  = {5,4,3,2};
	int COLs[4] = {7,6,5,3};
	for(row=0;row<4;row++)
 236:	a3 94       	inc	r10
 238:	93 e0       	ldi	r25, 0x03	; 3
 23a:	9a 15       	cp	r25, r10
 23c:	08 f0       	brcs	.+2      	; 0x240 <Keypad_u8Read+0x114>
 23e:	a8 cf       	rjmp	.-176    	; 0x190 <Keypad_u8Read+0x64>
		{
			break;
		}
	}
	return returnval ;
 240:	89 2d       	mov	r24, r9
 242:	a0 96       	adiw	r28, 0x20	; 32
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	f8 94       	cli
 248:	de bf       	out	0x3e, r29	; 62
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	cd bf       	out	0x3d, r28	; 61
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	1f 91       	pop	r17
 254:	0f 91       	pop	r16
 256:	ff 90       	pop	r15
 258:	ef 90       	pop	r14
 25a:	df 90       	pop	r13
 25c:	cf 90       	pop	r12
 25e:	bf 90       	pop	r11
 260:	af 90       	pop	r10
 262:	9f 90       	pop	r9
 264:	08 95       	ret

00000266 <Send_FallingEdge>:


static void Send_FallingEdge(void)
{
	// EN =1, delay 2ms , EN=0, delay 2ms, exit
	DIO_SetPinValue(EN_PORT,EN_PIN,HIGH);
 266:	41 e0       	ldi	r20, 0x01	; 1
 268:	62 e0       	ldi	r22, 0x02	; 2
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 270:	8f e9       	ldi	r24, 0x9F	; 159
 272:	9f e0       	ldi	r25, 0x0F	; 15
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <Send_FallingEdge+0xe>
 278:	00 c0       	rjmp	.+0      	; 0x27a <Send_FallingEdge+0x14>
 27a:	00 00       	nop
	_delay_ms(2);
	DIO_SetPinValue(EN_PORT,EN_PIN,LOW);
 27c:	40 e0       	ldi	r20, 0x00	; 0
 27e:	62 e0       	ldi	r22, 0x02	; 2
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_SetPinValue>
 286:	8f e9       	ldi	r24, 0x9F	; 159
 288:	9f e0       	ldi	r25, 0x0F	; 15
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <Send_FallingEdge+0x24>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <Send_FallingEdge+0x2a>
 290:	00 00       	nop
 292:	08 95       	ret

00000294 <LCD_vWriteCommand>:
	
}


void LCD_vWriteCommand(u8 cmd)
{
 294:	cf 93       	push	r28
 296:	c8 2f       	mov	r28, r24
	DIO_SetPinValue(DIO_PORTB,Pin4,READ_BIT(cmd,7));
 298:	48 2f       	mov	r20, r24
 29a:	44 1f       	adc	r20, r20
 29c:	44 27       	eor	r20, r20
 29e:	44 1f       	adc	r20, r20
 2a0:	64 e0       	ldi	r22, 0x04	; 4
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,Pin2,READ_BIT(cmd,6));
 2a8:	c6 fb       	bst	r28, 6
 2aa:	44 27       	eor	r20, r20
 2ac:	40 f9       	bld	r20, 0
 2ae:	62 e0       	ldi	r22, 0x02	; 2
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,Pin1,READ_BIT(cmd,5));
 2b6:	c5 fb       	bst	r28, 5
 2b8:	44 27       	eor	r20, r20
 2ba:	40 f9       	bld	r20, 0
 2bc:	61 e0       	ldi	r22, 0x01	; 1
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,Pin0,READ_BIT(cmd,4));
 2c4:	c4 fb       	bst	r28, 4
 2c6:	44 27       	eor	r20, r20
 2c8:	40 f9       	bld	r20, 0
 2ca:	60 e0       	ldi	r22, 0x00	; 0
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_SetPinValue>
	DIO_SetPinValue(RS_PORT,RS_PIN,LOW);
 2d2:	40 e0       	ldi	r20, 0x00	; 0
 2d4:	63 e0       	ldi	r22, 0x03	; 3
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_SetPinValue>
	Send_FallingEdge();
 2dc:	0e 94 33 01 	call	0x266	; 0x266 <Send_FallingEdge>
 2e0:	8f ec       	ldi	r24, 0xCF	; 207
 2e2:	97 e0       	ldi	r25, 0x07	; 7
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <LCD_vWriteCommand+0x50>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <LCD_vWriteCommand+0x56>
 2ea:	00 00       	nop
	_delay_ms(1);
	
	DIO_SetPinValue(DIO_PORTB,Pin4,READ_BIT(cmd,3));
 2ec:	c3 fb       	bst	r28, 3
 2ee:	44 27       	eor	r20, r20
 2f0:	40 f9       	bld	r20, 0
 2f2:	64 e0       	ldi	r22, 0x04	; 4
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,Pin2,READ_BIT(cmd,2));
 2fa:	c2 fb       	bst	r28, 2
 2fc:	44 27       	eor	r20, r20
 2fe:	40 f9       	bld	r20, 0
 300:	62 e0       	ldi	r22, 0x02	; 2
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,Pin1,READ_BIT(cmd,1));
 308:	c1 fb       	bst	r28, 1
 30a:	44 27       	eor	r20, r20
 30c:	40 f9       	bld	r20, 0
 30e:	61 e0       	ldi	r22, 0x01	; 1
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,Pin0,READ_BIT(cmd,0));
 316:	4c 2f       	mov	r20, r28
 318:	41 70       	andi	r20, 0x01	; 1
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_SetPinValue>
	DIO_SetPinValue(RS_PORT,RS_PIN,LOW);
 322:	40 e0       	ldi	r20, 0x00	; 0
 324:	63 e0       	ldi	r22, 0x03	; 3
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_SetPinValue>
	Send_FallingEdge();
 32c:	0e 94 33 01 	call	0x266	; 0x266 <Send_FallingEdge>
 330:	8f ec       	ldi	r24, 0xCF	; 207
 332:	97 e0       	ldi	r25, 0x07	; 7
 334:	01 97       	sbiw	r24, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <LCD_vWriteCommand+0xa0>
 338:	00 c0       	rjmp	.+0      	; 0x33a <LCD_vWriteCommand+0xa6>
 33a:	00 00       	nop
	_delay_ms(1);
}
 33c:	cf 91       	pop	r28
 33e:	08 95       	ret

00000340 <LCD_vInit>:
 340:	2f ef       	ldi	r18, 0xFF	; 255
 342:	89 ef       	ldi	r24, 0xF9	; 249
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	21 50       	subi	r18, 0x01	; 1
 348:	80 40       	sbci	r24, 0x00	; 0
 34a:	90 40       	sbci	r25, 0x00	; 0
 34c:	e1 f7       	brne	.-8      	; 0x346 <LCD_vInit+0x6>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <LCD_vInit+0x10>
 350:	00 00       	nop

static void Send_FallingEdge(void);
void LCD_vInit(void)
{
	_delay_ms(40);
	DIO_SetPinDir(DIO_PORTB,Pin0,OUTPUT);
 352:	43 e0       	ldi	r20, 0x03	; 3
 354:	60 e0       	ldi	r22, 0x00	; 0
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	0e 94 70 02 	call	0x4e0	; 0x4e0 <DIO_SetPinDir>
	DIO_SetPinDir(DIO_PORTB,Pin1,OUTPUT);
 35c:	43 e0       	ldi	r20, 0x03	; 3
 35e:	61 e0       	ldi	r22, 0x01	; 1
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	0e 94 70 02 	call	0x4e0	; 0x4e0 <DIO_SetPinDir>
	DIO_SetPinDir(DIO_PORTB,Pin2,OUTPUT);
 366:	43 e0       	ldi	r20, 0x03	; 3
 368:	62 e0       	ldi	r22, 0x02	; 2
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	0e 94 70 02 	call	0x4e0	; 0x4e0 <DIO_SetPinDir>
	DIO_SetPinDir(DIO_PORTB,Pin4,OUTPUT);
 370:	43 e0       	ldi	r20, 0x03	; 3
 372:	64 e0       	ldi	r22, 0x04	; 4
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	0e 94 70 02 	call	0x4e0	; 0x4e0 <DIO_SetPinDir>

	DIO_SetPinDir(RS_PORT,RS_PIN,OUTPUT);
 37a:	43 e0       	ldi	r20, 0x03	; 3
 37c:	63 e0       	ldi	r22, 0x03	; 3
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	0e 94 70 02 	call	0x4e0	; 0x4e0 <DIO_SetPinDir>
	DIO_SetPinDir(EN_PORT,EN_PIN,OUTPUT);
 384:	43 e0       	ldi	r20, 0x03	; 3
 386:	62 e0       	ldi	r22, 0x02	; 2
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <DIO_SetPinDir>
	DIO_SetPinDir(RW_PORT,RW_PIN,OUTPUT);
 38e:	43 e0       	ldi	r20, 0x03	; 3
 390:	60 e0       	ldi	r22, 0x00	; 0
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	0e 94 70 02 	call	0x4e0	; 0x4e0 <DIO_SetPinDir>

	// always RW=0 low as it is on the kit, I will be always reading for now
	DIO_SetPinValue(RW_PORT,RW_PIN,LOW);
 398:	40 e0       	ldi	r20, 0x00	; 0
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_SetPinValue>
	// LCD_vWriteCommand(0x01);
	// _delay_ms(10);
	// LCD_vWriteCommand(0x06);
	// _delay_ms(1);
	
	LCD_vWriteCommand(FuncitonSet1); // 0x33 ==> 28
 3a2:	83 e3       	ldi	r24, 0x33	; 51
 3a4:	0e 94 4a 01 	call	0x294	; 0x294 <LCD_vWriteCommand>
 3a8:	8f e1       	ldi	r24, 0x1F	; 31
 3aa:	9e e4       	ldi	r25, 0x4E	; 78
 3ac:	01 97       	sbiw	r24, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <LCD_vInit+0x6c>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <LCD_vInit+0x72>
 3b2:	00 00       	nop
	_delay_ms(10);
	LCD_vWriteCommand(FuncitonSet2); // 0x32
 3b4:	82 e3       	ldi	r24, 0x32	; 50
 3b6:	0e 94 4a 01 	call	0x294	; 0x294 <LCD_vWriteCommand>
 3ba:	8f ec       	ldi	r24, 0xCF	; 207
 3bc:	97 e0       	ldi	r25, 0x07	; 7
 3be:	01 97       	sbiw	r24, 0x01	; 1
 3c0:	f1 f7       	brne	.-4      	; 0x3be <LCD_vInit+0x7e>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <LCD_vInit+0x84>
 3c4:	00 00       	nop
	_delay_ms(1);
	LCD_vWriteCommand(LCD_4_Bit_Mode_2_Line_5_8_Dots); // 0x28
 3c6:	88 e2       	ldi	r24, 0x28	; 40
 3c8:	0e 94 4a 01 	call	0x294	; 0x294 <LCD_vWriteCommand>
 3cc:	8f ec       	ldi	r24, 0xCF	; 207
 3ce:	97 e0       	ldi	r25, 0x07	; 7
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <LCD_vInit+0x90>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <LCD_vInit+0x96>
 3d6:	00 00       	nop
	_delay_ms(1);
	LCD_vWriteCommand(Display_Cursor_ON_Blink_OFF);  // 0x0E
 3d8:	8e e0       	ldi	r24, 0x0E	; 14
 3da:	0e 94 4a 01 	call	0x294	; 0x294 <LCD_vWriteCommand>
 3de:	8f ec       	ldi	r24, 0xCF	; 207
 3e0:	97 e0       	ldi	r25, 0x07	; 7
 3e2:	01 97       	sbiw	r24, 0x01	; 1
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <LCD_vInit+0xa2>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <LCD_vInit+0xa8>
 3e8:	00 00       	nop
	_delay_ms(1);
	LCD_vWriteCommand(Clear_Display_Screen); //0x01
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	0e 94 4a 01 	call	0x294	; 0x294 <LCD_vWriteCommand>
 3f0:	8f e1       	ldi	r24, 0x1F	; 31
 3f2:	9e e4       	ldi	r25, 0x4E	; 78
 3f4:	01 97       	sbiw	r24, 0x01	; 1
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <LCD_vInit+0xb4>
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <LCD_vInit+0xba>
 3fa:	00 00       	nop
	_delay_ms(10);
	LCD_vWriteCommand(Shift_Cursor_Right_Per_Read_Write); //0x06
 3fc:	86 e0       	ldi	r24, 0x06	; 6
 3fe:	0e 94 4a 01 	call	0x294	; 0x294 <LCD_vWriteCommand>
 402:	8f ec       	ldi	r24, 0xCF	; 207
 404:	97 e0       	ldi	r25, 0x07	; 7
 406:	01 97       	sbiw	r24, 0x01	; 1
 408:	f1 f7       	brne	.-4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 40c:	00 00       	nop
 40e:	08 95       	ret

00000410 <LCD_vWriteData>:
	Send_FallingEdge();
	_delay_ms(1);
}

void LCD_vWriteData(u8 data)
{
 410:	cf 93       	push	r28
 412:	c8 2f       	mov	r28, r24
	// DIO_SetPinValue(DIO_PORTA,Pin7,READ_BIT(data,7));
	// DIO_SetPinValue(DIO_PORTA,Pin6,READ_BIT(data,6));
	// DIO_SetPinValue(DIO_PORTA,Pin5,READ_BIT(data,5));
	// DIO_SetPinValue(DIO_PORTA,Pin4,READ_BIT(data,4));
	DIO_SetPinValue(DIO_PORTB,Pin4,READ_BIT(data,7));
 414:	48 2f       	mov	r20, r24
 416:	44 1f       	adc	r20, r20
 418:	44 27       	eor	r20, r20
 41a:	44 1f       	adc	r20, r20
 41c:	64 e0       	ldi	r22, 0x04	; 4
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,Pin2,READ_BIT(data,6));
 424:	c6 fb       	bst	r28, 6
 426:	44 27       	eor	r20, r20
 428:	40 f9       	bld	r20, 0
 42a:	62 e0       	ldi	r22, 0x02	; 2
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,Pin1,READ_BIT(data,5));
 432:	c5 fb       	bst	r28, 5
 434:	44 27       	eor	r20, r20
 436:	40 f9       	bld	r20, 0
 438:	61 e0       	ldi	r22, 0x01	; 1
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,Pin0,READ_BIT(data,4));
 440:	c4 fb       	bst	r28, 4
 442:	44 27       	eor	r20, r20
 444:	40 f9       	bld	r20, 0
 446:	60 e0       	ldi	r22, 0x00	; 0
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_SetPinValue>

	DIO_SetPinValue(RS_PORT,RS_PIN,HIGH);
 44e:	41 e0       	ldi	r20, 0x01	; 1
 450:	63 e0       	ldi	r22, 0x03	; 3
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_SetPinValue>
	Send_FallingEdge();
 458:	0e 94 33 01 	call	0x266	; 0x266 <Send_FallingEdge>
 45c:	8f ec       	ldi	r24, 0xCF	; 207
 45e:	97 e0       	ldi	r25, 0x07	; 7
 460:	01 97       	sbiw	r24, 0x01	; 1
 462:	f1 f7       	brne	.-4      	; 0x460 <LCD_vWriteData+0x50>
 464:	00 c0       	rjmp	.+0      	; 0x466 <LCD_vWriteData+0x56>
 466:	00 00       	nop

	// DIO_SetPinValue(DIO_PORTA,Pin7,READ_BIT(data,3));
	// DIO_SetPinValue(DIO_PORTA,Pin6,READ_BIT(data,2));
	// DIO_SetPinValue(DIO_PORTA,Pin5,READ_BIT(data,1));
	// DIO_SetPinValue(DIO_PORTA,Pin4,READ_BIT(data,0));
	DIO_SetPinValue(DIO_PORTB,Pin4,READ_BIT(data,3));
 468:	c3 fb       	bst	r28, 3
 46a:	44 27       	eor	r20, r20
 46c:	40 f9       	bld	r20, 0
 46e:	64 e0       	ldi	r22, 0x04	; 4
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,Pin2,READ_BIT(data,2));
 476:	c2 fb       	bst	r28, 2
 478:	44 27       	eor	r20, r20
 47a:	40 f9       	bld	r20, 0
 47c:	62 e0       	ldi	r22, 0x02	; 2
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,Pin1,READ_BIT(data,1));
 484:	c1 fb       	bst	r28, 1
 486:	44 27       	eor	r20, r20
 488:	40 f9       	bld	r20, 0
 48a:	61 e0       	ldi	r22, 0x01	; 1
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,Pin0,READ_BIT(data,0));
 492:	4c 2f       	mov	r20, r28
 494:	41 70       	andi	r20, 0x01	; 1
 496:	60 e0       	ldi	r22, 0x00	; 0
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_SetPinValue>
	DIO_SetPinValue(RS_PORT,RS_PIN,HIGH);
 49e:	41 e0       	ldi	r20, 0x01	; 1
 4a0:	63 e0       	ldi	r22, 0x03	; 3
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_SetPinValue>
	Send_FallingEdge();
 4a8:	0e 94 33 01 	call	0x266	; 0x266 <Send_FallingEdge>
 4ac:	8f ec       	ldi	r24, 0xCF	; 207
 4ae:	97 e0       	ldi	r25, 0x07	; 7
 4b0:	01 97       	sbiw	r24, 0x01	; 1
 4b2:	f1 f7       	brne	.-4      	; 0x4b0 <LCD_vWriteData+0xa0>
 4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <LCD_vWriteData+0xa6>
 4b6:	00 00       	nop
	_delay_ms(1);
}
 4b8:	cf 91       	pop	r28
 4ba:	08 95       	ret

000004bc <main>:
#include "util/delay.h"

u8 GlobalLineArray[50] = {0};
int main()
{
	Keypad_vInit();
 4bc:	0e 94 49 00 	call	0x92	; 0x92 <Keypad_vInit>
	LCD_vInit();
 4c0:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_vInit>
	while (1)
	{
		u8 counter =0;
		u8 LocKeypadVal = Keypad_u8Read();
 4c4:	0e 94 96 00 	call	0x12c	; 0x12c <Keypad_u8Read>
		if(LocKeypadVal == NOTPRESSED)
 4c8:	8f 3f       	cpi	r24, 0xFF	; 255
 4ca:	e1 f3       	breq	.-8      	; 0x4c4 <main+0x8>
		{
			continue;
		}
		else if(LocKeypadVal == '=')
 4cc:	8d 33       	cpi	r24, 0x3D	; 61
 4ce:	19 f4       	brne	.+6      	; 0x4d6 <main+0x1a>
		{
			// go for processing
			LCD_vWriteData(LocKeypadVal);
 4d0:	0e 94 08 02 	call	0x410	; 0x410 <LCD_vWriteData>
 4d4:	f7 cf       	rjmp	.-18     	; 0x4c4 <main+0x8>
		}
		else
		{
			GlobalLineArray[counter] = LocKeypadVal;
 4d6:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
			LCD_vWriteData(LocKeypadVal);
 4da:	0e 94 08 02 	call	0x410	; 0x410 <LCD_vWriteData>
 4de:	f2 cf       	rjmp	.-28     	; 0x4c4 <main+0x8>

000004e0 <DIO_SetPinDir>:



void DIO_SetPinDir(PORT_TYPE Copy_u8Port, PIN_TYPE Copy_u8Pin, MODE_TYPE Copy_u8Mode)
{
	switch (Copy_u8Port)
 4e0:	81 30       	cpi	r24, 0x01	; 1
 4e2:	19 f1       	breq	.+70     	; 0x52a <DIO_SetPinDir+0x4a>
 4e4:	30 f0       	brcs	.+12     	; 0x4f2 <DIO_SetPinDir+0x12>
 4e6:	82 30       	cpi	r24, 0x02	; 2
 4e8:	e1 f1       	breq	.+120    	; 0x562 <DIO_SetPinDir+0x82>
 4ea:	83 30       	cpi	r24, 0x03	; 3
 4ec:	09 f4       	brne	.+2      	; 0x4f0 <DIO_SetPinDir+0x10>
 4ee:	54 c0       	rjmp	.+168    	; 0x598 <DIO_SetPinDir+0xb8>
 4f0:	08 95       	ret
	{
		case DIO_PORTA:
		if(Copy_u8Mode == INPUT)
 4f2:	42 30       	cpi	r20, 0x02	; 2
 4f4:	61 f4       	brne	.+24     	; 0x50e <DIO_SetPinDir+0x2e>
		{
			DDRA &=~(1U << Copy_u8Pin);
 4f6:	2a b3       	in	r18, 0x1a	; 26
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <DIO_SetPinDir+0x22>
 4fe:	88 0f       	add	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	6a 95       	dec	r22
 504:	e2 f7       	brpl	.-8      	; 0x4fe <DIO_SetPinDir+0x1e>
 506:	80 95       	com	r24
 508:	82 23       	and	r24, r18
 50a:	8a bb       	out	0x1a, r24	; 26
 50c:	08 95       	ret
		}
		else if (Copy_u8Mode == OUTPUT)
 50e:	43 30       	cpi	r20, 0x03	; 3
 510:	09 f0       	breq	.+2      	; 0x514 <DIO_SetPinDir+0x34>
 512:	5c c0       	rjmp	.+184    	; 0x5cc <DIO_SetPinDir+0xec>
		{
			DDRA |=(1<<Copy_u8Pin);
 514:	2a b3       	in	r18, 0x1a	; 26
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	02 c0       	rjmp	.+4      	; 0x520 <DIO_SetPinDir+0x40>
 51c:	88 0f       	add	r24, r24
 51e:	99 1f       	adc	r25, r25
 520:	6a 95       	dec	r22
 522:	e2 f7       	brpl	.-8      	; 0x51c <DIO_SetPinDir+0x3c>
 524:	82 2b       	or	r24, r18
 526:	8a bb       	out	0x1a, r24	; 26
 528:	08 95       	ret
		}
		else { /*MISRA*/}
		break;
		case DIO_PORTB:
		if(Copy_u8Mode == INPUT)
 52a:	42 30       	cpi	r20, 0x02	; 2
 52c:	61 f4       	brne	.+24     	; 0x546 <DIO_SetPinDir+0x66>
		{
			DDRB &=~(1U << Copy_u8Pin);
 52e:	27 b3       	in	r18, 0x17	; 23
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	02 c0       	rjmp	.+4      	; 0x53a <DIO_SetPinDir+0x5a>
 536:	88 0f       	add	r24, r24
 538:	99 1f       	adc	r25, r25
 53a:	6a 95       	dec	r22
 53c:	e2 f7       	brpl	.-8      	; 0x536 <DIO_SetPinDir+0x56>
 53e:	80 95       	com	r24
 540:	82 23       	and	r24, r18
 542:	87 bb       	out	0x17, r24	; 23
 544:	08 95       	ret
		}
		else if (Copy_u8Mode == OUTPUT)
 546:	43 30       	cpi	r20, 0x03	; 3
 548:	09 f0       	breq	.+2      	; 0x54c <DIO_SetPinDir+0x6c>
 54a:	40 c0       	rjmp	.+128    	; 0x5cc <DIO_SetPinDir+0xec>
		{
			DDRB |=(1<<Copy_u8Pin);
 54c:	27 b3       	in	r18, 0x17	; 23
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	02 c0       	rjmp	.+4      	; 0x558 <DIO_SetPinDir+0x78>
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	6a 95       	dec	r22
 55a:	e2 f7       	brpl	.-8      	; 0x554 <DIO_SetPinDir+0x74>
 55c:	82 2b       	or	r24, r18
 55e:	87 bb       	out	0x17, r24	; 23
 560:	08 95       	ret
		}
		else { /*MISRA*/}
		
		break;
		case DIO_PORTC:
		if(Copy_u8Mode == INPUT)
 562:	42 30       	cpi	r20, 0x02	; 2
 564:	61 f4       	brne	.+24     	; 0x57e <DIO_SetPinDir+0x9e>
		{
			DDRC &=~(1U << Copy_u8Pin);
 566:	24 b3       	in	r18, 0x14	; 20
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	02 c0       	rjmp	.+4      	; 0x572 <DIO_SetPinDir+0x92>
 56e:	88 0f       	add	r24, r24
 570:	99 1f       	adc	r25, r25
 572:	6a 95       	dec	r22
 574:	e2 f7       	brpl	.-8      	; 0x56e <DIO_SetPinDir+0x8e>
 576:	80 95       	com	r24
 578:	82 23       	and	r24, r18
 57a:	84 bb       	out	0x14, r24	; 20
 57c:	08 95       	ret
		}
		else if (Copy_u8Mode == OUTPUT)
 57e:	43 30       	cpi	r20, 0x03	; 3
 580:	29 f5       	brne	.+74     	; 0x5cc <DIO_SetPinDir+0xec>
		{
			DDRC |=(1<<Copy_u8Pin);
 582:	24 b3       	in	r18, 0x14	; 20
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	02 c0       	rjmp	.+4      	; 0x58e <DIO_SetPinDir+0xae>
 58a:	88 0f       	add	r24, r24
 58c:	99 1f       	adc	r25, r25
 58e:	6a 95       	dec	r22
 590:	e2 f7       	brpl	.-8      	; 0x58a <DIO_SetPinDir+0xaa>
 592:	82 2b       	or	r24, r18
 594:	84 bb       	out	0x14, r24	; 20
 596:	08 95       	ret
		}
		else { /*MISRA*/}
		break;
		case DIO_PORTD:
		if(Copy_u8Mode == INPUT)
 598:	42 30       	cpi	r20, 0x02	; 2
 59a:	61 f4       	brne	.+24     	; 0x5b4 <DIO_SetPinDir+0xd4>
		{
			DDRD &=~(1U << Copy_u8Pin);
 59c:	21 b3       	in	r18, 0x11	; 17
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <DIO_SetPinDir+0xc8>
 5a4:	88 0f       	add	r24, r24
 5a6:	99 1f       	adc	r25, r25
 5a8:	6a 95       	dec	r22
 5aa:	e2 f7       	brpl	.-8      	; 0x5a4 <DIO_SetPinDir+0xc4>
 5ac:	80 95       	com	r24
 5ae:	82 23       	and	r24, r18
 5b0:	81 bb       	out	0x11, r24	; 17
 5b2:	08 95       	ret
		}
		else if (Copy_u8Mode == OUTPUT)
 5b4:	43 30       	cpi	r20, 0x03	; 3
 5b6:	51 f4       	brne	.+20     	; 0x5cc <DIO_SetPinDir+0xec>
		{
			DDRD |=(1<<Copy_u8Pin);
 5b8:	21 b3       	in	r18, 0x11	; 17
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	02 c0       	rjmp	.+4      	; 0x5c4 <DIO_SetPinDir+0xe4>
 5c0:	88 0f       	add	r24, r24
 5c2:	99 1f       	adc	r25, r25
 5c4:	6a 95       	dec	r22
 5c6:	e2 f7       	brpl	.-8      	; 0x5c0 <DIO_SetPinDir+0xe0>
 5c8:	82 2b       	or	r24, r18
 5ca:	81 bb       	out	0x11, r24	; 17
 5cc:	08 95       	ret

000005ce <DIO_SetPinValue>:
		break;
	}
}
void DIO_SetPinValue(PORT_TYPE Copy_u8Port, PIN_TYPE Copy_u8Pin, MODE_TYPE Copy_u8Mode)
{
	switch (Copy_u8Port)
 5ce:	81 30       	cpi	r24, 0x01	; 1
 5d0:	19 f1       	breq	.+70     	; 0x618 <DIO_SetPinValue+0x4a>
 5d2:	30 f0       	brcs	.+12     	; 0x5e0 <DIO_SetPinValue+0x12>
 5d4:	82 30       	cpi	r24, 0x02	; 2
 5d6:	e1 f1       	breq	.+120    	; 0x650 <DIO_SetPinValue+0x82>
 5d8:	83 30       	cpi	r24, 0x03	; 3
 5da:	09 f4       	brne	.+2      	; 0x5de <DIO_SetPinValue+0x10>
 5dc:	54 c0       	rjmp	.+168    	; 0x686 <DIO_SetPinValue+0xb8>
 5de:	08 95       	ret
	{
		case DIO_PORTA:
		if(Copy_u8Mode == LOW)
 5e0:	41 11       	cpse	r20, r1
 5e2:	0c c0       	rjmp	.+24     	; 0x5fc <DIO_SetPinValue+0x2e>
		{
			PORTA &=~(1U << Copy_u8Pin);
 5e4:	2b b3       	in	r18, 0x1b	; 27
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <DIO_SetPinValue+0x22>
 5ec:	88 0f       	add	r24, r24
 5ee:	99 1f       	adc	r25, r25
 5f0:	6a 95       	dec	r22
 5f2:	e2 f7       	brpl	.-8      	; 0x5ec <DIO_SetPinValue+0x1e>
 5f4:	80 95       	com	r24
 5f6:	82 23       	and	r24, r18
 5f8:	8b bb       	out	0x1b, r24	; 27
 5fa:	08 95       	ret
		}
		else if (Copy_u8Mode == HIGH)
 5fc:	41 30       	cpi	r20, 0x01	; 1
 5fe:	09 f0       	breq	.+2      	; 0x602 <DIO_SetPinValue+0x34>
 600:	5c c0       	rjmp	.+184    	; 0x6ba <DIO_SetPinValue+0xec>
		{
			PORTA |=(1<<Copy_u8Pin);
 602:	2b b3       	in	r18, 0x1b	; 27
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	02 c0       	rjmp	.+4      	; 0x60e <DIO_SetPinValue+0x40>
 60a:	88 0f       	add	r24, r24
 60c:	99 1f       	adc	r25, r25
 60e:	6a 95       	dec	r22
 610:	e2 f7       	brpl	.-8      	; 0x60a <DIO_SetPinValue+0x3c>
 612:	82 2b       	or	r24, r18
 614:	8b bb       	out	0x1b, r24	; 27
 616:	08 95       	ret
		}
		else { /*MISRA*/}
		break;
		case DIO_PORTB:
		if(Copy_u8Mode == LOW)
 618:	41 11       	cpse	r20, r1
 61a:	0c c0       	rjmp	.+24     	; 0x634 <DIO_SetPinValue+0x66>
		{
			PORTB &=~(1U << Copy_u8Pin);
 61c:	28 b3       	in	r18, 0x18	; 24
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	02 c0       	rjmp	.+4      	; 0x628 <DIO_SetPinValue+0x5a>
 624:	88 0f       	add	r24, r24
 626:	99 1f       	adc	r25, r25
 628:	6a 95       	dec	r22
 62a:	e2 f7       	brpl	.-8      	; 0x624 <DIO_SetPinValue+0x56>
 62c:	80 95       	com	r24
 62e:	82 23       	and	r24, r18
 630:	88 bb       	out	0x18, r24	; 24
 632:	08 95       	ret
		}
		else if (Copy_u8Mode == HIGH)
 634:	41 30       	cpi	r20, 0x01	; 1
 636:	09 f0       	breq	.+2      	; 0x63a <DIO_SetPinValue+0x6c>
 638:	40 c0       	rjmp	.+128    	; 0x6ba <DIO_SetPinValue+0xec>
		{
			PORTB |=(1<<Copy_u8Pin);
 63a:	28 b3       	in	r18, 0x18	; 24
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	02 c0       	rjmp	.+4      	; 0x646 <DIO_SetPinValue+0x78>
 642:	88 0f       	add	r24, r24
 644:	99 1f       	adc	r25, r25
 646:	6a 95       	dec	r22
 648:	e2 f7       	brpl	.-8      	; 0x642 <DIO_SetPinValue+0x74>
 64a:	82 2b       	or	r24, r18
 64c:	88 bb       	out	0x18, r24	; 24
 64e:	08 95       	ret
		}
		else { /*MISRA*/}
		break;
		case DIO_PORTC:
		if(Copy_u8Mode == LOW)
 650:	41 11       	cpse	r20, r1
 652:	0c c0       	rjmp	.+24     	; 0x66c <DIO_SetPinValue+0x9e>
		{
			PORTC &=~(1U << Copy_u8Pin);
 654:	25 b3       	in	r18, 0x15	; 21
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	02 c0       	rjmp	.+4      	; 0x660 <DIO_SetPinValue+0x92>
 65c:	88 0f       	add	r24, r24
 65e:	99 1f       	adc	r25, r25
 660:	6a 95       	dec	r22
 662:	e2 f7       	brpl	.-8      	; 0x65c <DIO_SetPinValue+0x8e>
 664:	80 95       	com	r24
 666:	82 23       	and	r24, r18
 668:	85 bb       	out	0x15, r24	; 21
 66a:	08 95       	ret
		}
		else if (Copy_u8Mode == HIGH)
 66c:	41 30       	cpi	r20, 0x01	; 1
 66e:	29 f5       	brne	.+74     	; 0x6ba <DIO_SetPinValue+0xec>
		{
			PORTC |=(1<<Copy_u8Pin);
 670:	25 b3       	in	r18, 0x15	; 21
 672:	81 e0       	ldi	r24, 0x01	; 1
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	02 c0       	rjmp	.+4      	; 0x67c <DIO_SetPinValue+0xae>
 678:	88 0f       	add	r24, r24
 67a:	99 1f       	adc	r25, r25
 67c:	6a 95       	dec	r22
 67e:	e2 f7       	brpl	.-8      	; 0x678 <DIO_SetPinValue+0xaa>
 680:	82 2b       	or	r24, r18
 682:	85 bb       	out	0x15, r24	; 21
 684:	08 95       	ret
		}
		else { /*MISRA*/}
		break;
		case DIO_PORTD:
		if(Copy_u8Mode == LOW)
 686:	41 11       	cpse	r20, r1
 688:	0c c0       	rjmp	.+24     	; 0x6a2 <DIO_SetPinValue+0xd4>
		{
			PORTD &=~(1U << Copy_u8Pin);
 68a:	22 b3       	in	r18, 0x12	; 18
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	02 c0       	rjmp	.+4      	; 0x696 <DIO_SetPinValue+0xc8>
 692:	88 0f       	add	r24, r24
 694:	99 1f       	adc	r25, r25
 696:	6a 95       	dec	r22
 698:	e2 f7       	brpl	.-8      	; 0x692 <DIO_SetPinValue+0xc4>
 69a:	80 95       	com	r24
 69c:	82 23       	and	r24, r18
 69e:	82 bb       	out	0x12, r24	; 18
 6a0:	08 95       	ret
		}
		else if (Copy_u8Mode == HIGH)
 6a2:	41 30       	cpi	r20, 0x01	; 1
 6a4:	51 f4       	brne	.+20     	; 0x6ba <DIO_SetPinValue+0xec>
		{
			PORTD |=(1<<Copy_u8Pin);
 6a6:	22 b3       	in	r18, 0x12	; 18
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <DIO_SetPinValue+0xe4>
 6ae:	88 0f       	add	r24, r24
 6b0:	99 1f       	adc	r25, r25
 6b2:	6a 95       	dec	r22
 6b4:	e2 f7       	brpl	.-8      	; 0x6ae <DIO_SetPinValue+0xe0>
 6b6:	82 2b       	or	r24, r18
 6b8:	82 bb       	out	0x12, r24	; 18
 6ba:	08 95       	ret

000006bc <Dio_GetPinValue>:
}

u8 Dio_GetPinValue(PORT_TYPE PortNumber,PIN_TYPE PinNumber )
{
	u8 Return_value =0;
	switch (PortNumber)
 6bc:	81 30       	cpi	r24, 0x01	; 1
 6be:	79 f0       	breq	.+30     	; 0x6de <Dio_GetPinValue+0x22>
 6c0:	28 f0       	brcs	.+10     	; 0x6cc <Dio_GetPinValue+0x10>
 6c2:	82 30       	cpi	r24, 0x02	; 2
 6c4:	a9 f0       	breq	.+42     	; 0x6f0 <Dio_GetPinValue+0x34>
 6c6:	83 30       	cpi	r24, 0x03	; 3
 6c8:	e1 f0       	breq	.+56     	; 0x702 <Dio_GetPinValue+0x46>
 6ca:	24 c0       	rjmp	.+72     	; 0x714 <Dio_GetPinValue+0x58>
	{
		case DIO_PORTA:
		// Return_value = ( PINA &=(1U<<PinNumber));
		Return_value = READ_BIT(PINA,PinNumber);
 6cc:	89 b3       	in	r24, 0x19	; 25
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <Dio_GetPinValue+0x1a>
 6d2:	95 95       	asr	r25
 6d4:	87 95       	ror	r24
 6d6:	6a 95       	dec	r22
 6d8:	e2 f7       	brpl	.-8      	; 0x6d2 <Dio_GetPinValue+0x16>
 6da:	81 70       	andi	r24, 0x01	; 1
		break;
 6dc:	08 95       	ret
		case DIO_PORTB:
		Return_value = READ_BIT(PINB,PinNumber);
 6de:	86 b3       	in	r24, 0x16	; 22
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <Dio_GetPinValue+0x2c>
 6e4:	95 95       	asr	r25
 6e6:	87 95       	ror	r24
 6e8:	6a 95       	dec	r22
 6ea:	e2 f7       	brpl	.-8      	; 0x6e4 <Dio_GetPinValue+0x28>
 6ec:	81 70       	andi	r24, 0x01	; 1
		break;
 6ee:	08 95       	ret
		case DIO_PORTC:
		Return_value = READ_BIT(PINC,PinNumber);
 6f0:	83 b3       	in	r24, 0x13	; 19
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	02 c0       	rjmp	.+4      	; 0x6fa <Dio_GetPinValue+0x3e>
 6f6:	95 95       	asr	r25
 6f8:	87 95       	ror	r24
 6fa:	6a 95       	dec	r22
 6fc:	e2 f7       	brpl	.-8      	; 0x6f6 <Dio_GetPinValue+0x3a>
 6fe:	81 70       	andi	r24, 0x01	; 1
		break;
 700:	08 95       	ret
		case DIO_PORTD:
		Return_value = READ_BIT(PIND,PinNumber);
 702:	80 b3       	in	r24, 0x10	; 16
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	02 c0       	rjmp	.+4      	; 0x70c <Dio_GetPinValue+0x50>
 708:	95 95       	asr	r25
 70a:	87 95       	ror	r24
 70c:	6a 95       	dec	r22
 70e:	e2 f7       	brpl	.-8      	; 0x708 <Dio_GetPinValue+0x4c>
 710:	81 70       	andi	r24, 0x01	; 1
		break;
 712:	08 95       	ret
	}
}

u8 Dio_GetPinValue(PORT_TYPE PortNumber,PIN_TYPE PinNumber )
{
	u8 Return_value =0;
 714:	80 e0       	ldi	r24, 0x00	; 0
		/*generate Error_Stat (Recommended)*/
		break;
	}
	
	return Return_value;
}
 716:	08 95       	ret

00000718 <Set_InputPullUp>:

void Set_InputPullUp(PORT_TYPE portNumber,PIN_TYPE PinNumber)
{
	switch (portNumber)
 718:	81 30       	cpi	r24, 0x01	; 1
 71a:	b1 f0       	breq	.+44     	; 0x748 <Set_InputPullUp+0x30>
 71c:	28 f0       	brcs	.+10     	; 0x728 <Set_InputPullUp+0x10>
 71e:	82 30       	cpi	r24, 0x02	; 2
 720:	19 f1       	breq	.+70     	; 0x768 <Set_InputPullUp+0x50>
 722:	83 30       	cpi	r24, 0x03	; 3
 724:	89 f1       	breq	.+98     	; 0x788 <Set_InputPullUp+0x70>
 726:	08 95       	ret
	{
		case DIO_PORTA:
		DDRA &=~(1U << PinNumber);
 728:	2a b3       	in	r18, 0x1a	; 26
 72a:	81 e0       	ldi	r24, 0x01	; 1
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	02 c0       	rjmp	.+4      	; 0x734 <Set_InputPullUp+0x1c>
 730:	88 0f       	add	r24, r24
 732:	99 1f       	adc	r25, r25
 734:	6a 95       	dec	r22
 736:	e2 f7       	brpl	.-8      	; 0x730 <Set_InputPullUp+0x18>
 738:	98 2f       	mov	r25, r24
 73a:	90 95       	com	r25
 73c:	92 23       	and	r25, r18
 73e:	9a bb       	out	0x1a, r25	; 26
		PORTA |=(1<<PinNumber);
 740:	9b b3       	in	r25, 0x1b	; 27
 742:	89 2b       	or	r24, r25
 744:	8b bb       	out	0x1b, r24	; 27
		break;
 746:	08 95       	ret

		case DIO_PORTB:
		DDRB &=~(1U << PinNumber);
 748:	27 b3       	in	r18, 0x17	; 23
 74a:	81 e0       	ldi	r24, 0x01	; 1
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	02 c0       	rjmp	.+4      	; 0x754 <Set_InputPullUp+0x3c>
 750:	88 0f       	add	r24, r24
 752:	99 1f       	adc	r25, r25
 754:	6a 95       	dec	r22
 756:	e2 f7       	brpl	.-8      	; 0x750 <Set_InputPullUp+0x38>
 758:	98 2f       	mov	r25, r24
 75a:	90 95       	com	r25
 75c:	92 23       	and	r25, r18
 75e:	97 bb       	out	0x17, r25	; 23
		PORTB |=(1<<PinNumber);
 760:	98 b3       	in	r25, 0x18	; 24
 762:	89 2b       	or	r24, r25
 764:	88 bb       	out	0x18, r24	; 24
		break;
 766:	08 95       	ret

		case DIO_PORTC:
		DDRC &=~(1U << PinNumber);
 768:	24 b3       	in	r18, 0x14	; 20
 76a:	81 e0       	ldi	r24, 0x01	; 1
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	02 c0       	rjmp	.+4      	; 0x774 <Set_InputPullUp+0x5c>
 770:	88 0f       	add	r24, r24
 772:	99 1f       	adc	r25, r25
 774:	6a 95       	dec	r22
 776:	e2 f7       	brpl	.-8      	; 0x770 <Set_InputPullUp+0x58>
 778:	98 2f       	mov	r25, r24
 77a:	90 95       	com	r25
 77c:	92 23       	and	r25, r18
 77e:	94 bb       	out	0x14, r25	; 20
		PORTC |=(1<<PinNumber);
 780:	95 b3       	in	r25, 0x15	; 21
 782:	89 2b       	or	r24, r25
 784:	85 bb       	out	0x15, r24	; 21
		break;
 786:	08 95       	ret

		case DIO_PORTD:
		DDRD &=~(1U << PinNumber);
 788:	21 b3       	in	r18, 0x11	; 17
 78a:	81 e0       	ldi	r24, 0x01	; 1
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	02 c0       	rjmp	.+4      	; 0x794 <Set_InputPullUp+0x7c>
 790:	88 0f       	add	r24, r24
 792:	99 1f       	adc	r25, r25
 794:	6a 95       	dec	r22
 796:	e2 f7       	brpl	.-8      	; 0x790 <Set_InputPullUp+0x78>
 798:	98 2f       	mov	r25, r24
 79a:	90 95       	com	r25
 79c:	92 23       	and	r25, r18
 79e:	91 bb       	out	0x11, r25	; 17
		PORTD |=(1<<PinNumber);
 7a0:	92 b3       	in	r25, 0x12	; 18
 7a2:	89 2b       	or	r24, r25
 7a4:	82 bb       	out	0x12, r24	; 18
 7a6:	08 95       	ret

000007a8 <_exit>:
 7a8:	f8 94       	cli

000007aa <__stop_program>:
 7aa:	ff cf       	rjmp	.-2      	; 0x7aa <__stop_program>
