
7segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001aa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006b9  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d3  00000000  00000000  0000094d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036b  00000000  00000000  00000f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000128c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000340  00000000  00000000  000012c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001d5  00000000  00000000  00001600  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000017d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	4a 00       	.word	0x004a	; ????
  56:	4e 00       	.word	0x004e	; ????
  58:	55 00       	.word	0x0055	; ????
  5a:	5c 00       	.word	0x005c	; ????
  5c:	63 00       	.word	0x0063	; ????
  5e:	6a 00       	.word	0x006a	; ????
  60:	71 00       	.word	0x0071	; ????
  62:	78 00       	.word	0x0078	; ????
  64:	7f 00       	.word	0x007f	; ????
  66:	86 00       	.word	0x0086	; ????

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf e5       	ldi	r28, 0x5F	; 95
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  78:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Sev_Seg>:
#include "DIO.h"

void Sev_Seg (char Number) // Function to write the BCD of a number to the seven segment pins (PC4-7)
{

	switch(Number)
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	8a 30       	cpi	r24, 0x0A	; 10
  84:	91 05       	cpc	r25, r1
  86:	08 f0       	brcs	.+2      	; 0x8a <Sev_Seg+0xa>
  88:	47 c0       	rjmp	.+142    	; 0x118 <Sev_Seg+0x98>
  8a:	fc 01       	movw	r30, r24
  8c:	e6 5d       	subi	r30, 0xD6	; 214
  8e:	ff 4f       	sbci	r31, 0xFF	; 255
  90:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__tablejump2__>
	{

		case 0:

		{
			PORTC&=~(1<<5)&~(1<<6)&~(1<<7)&~(1<<4);
  94:	85 b3       	in	r24, 0x15	; 21
  96:	8f 70       	andi	r24, 0x0F	; 15
  98:	85 bb       	out	0x15, r24	; 21

			break;
  9a:	08 95       	ret
		}

		case 1:

		{
			PORTC|=(1<<4);
  9c:	85 b3       	in	r24, 0x15	; 21
  9e:	80 61       	ori	r24, 0x10	; 16
  a0:	85 bb       	out	0x15, r24	; 21

			PORTC&=~(1<<5)&~(1<<6)&~(1<<7);
  a2:	85 b3       	in	r24, 0x15	; 21
  a4:	8f 71       	andi	r24, 0x1F	; 31
  a6:	85 bb       	out	0x15, r24	; 21

			break;
  a8:	08 95       	ret
		}

		case 2:

		{
			PORTC|=(1<<5);
  aa:	85 b3       	in	r24, 0x15	; 21
  ac:	80 62       	ori	r24, 0x20	; 32
  ae:	85 bb       	out	0x15, r24	; 21

			PORTC&=~(1<<4)&~(1<<6)&~(1<<7);
  b0:	85 b3       	in	r24, 0x15	; 21
  b2:	8f 72       	andi	r24, 0x2F	; 47
  b4:	85 bb       	out	0x15, r24	; 21

			break;
  b6:	08 95       	ret
		}

		case 3:

		{
			PORTC|=(1<<4)|(1<<5);
  b8:	85 b3       	in	r24, 0x15	; 21
  ba:	80 63       	ori	r24, 0x30	; 48
  bc:	85 bb       	out	0x15, r24	; 21

			PORTC&=~(1<<6)&~(1<<7);
  be:	85 b3       	in	r24, 0x15	; 21
  c0:	8f 73       	andi	r24, 0x3F	; 63
  c2:	85 bb       	out	0x15, r24	; 21

			break;
  c4:	08 95       	ret
		}

		case 4:

		{
			PORTC|=(1<<6);
  c6:	85 b3       	in	r24, 0x15	; 21
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	85 bb       	out	0x15, r24	; 21

			PORTC&=~(1<<4)&~(1<<5)&~(1<<7);
  cc:	85 b3       	in	r24, 0x15	; 21
  ce:	8f 74       	andi	r24, 0x4F	; 79
  d0:	85 bb       	out	0x15, r24	; 21

			break;
  d2:	08 95       	ret
		}

		case 5:

		{
			PORTC|=(1<<4)|(1<<6);
  d4:	85 b3       	in	r24, 0x15	; 21
  d6:	80 65       	ori	r24, 0x50	; 80
  d8:	85 bb       	out	0x15, r24	; 21

			PORTC&=~(1<<5)&~(1<<7);
  da:	85 b3       	in	r24, 0x15	; 21
  dc:	8f 75       	andi	r24, 0x5F	; 95
  de:	85 bb       	out	0x15, r24	; 21

			break;
  e0:	08 95       	ret

		case 6:

		{

			PORTC|=(1<<5)|(1<<6);
  e2:	85 b3       	in	r24, 0x15	; 21
  e4:	80 66       	ori	r24, 0x60	; 96
  e6:	85 bb       	out	0x15, r24	; 21

			PORTC&=~(1<<4)&~(1<<7);
  e8:	85 b3       	in	r24, 0x15	; 21
  ea:	8f 76       	andi	r24, 0x6F	; 111
  ec:	85 bb       	out	0x15, r24	; 21

			break;
  ee:	08 95       	ret

		case 7:

		{

			PORTC|=(1<<4)|(1<<5)|(1<<6);
  f0:	85 b3       	in	r24, 0x15	; 21
  f2:	80 67       	ori	r24, 0x70	; 112
  f4:	85 bb       	out	0x15, r24	; 21

			PORTC&=~(1<<7);
  f6:	85 b3       	in	r24, 0x15	; 21
  f8:	8f 77       	andi	r24, 0x7F	; 127
  fa:	85 bb       	out	0x15, r24	; 21

			break;
  fc:	08 95       	ret

		case 8:

		{

			PORTC|=(1<<7);
  fe:	85 b3       	in	r24, 0x15	; 21
 100:	80 68       	ori	r24, 0x80	; 128
 102:	85 bb       	out	0x15, r24	; 21

			PORTC&=~(1<<4)&~(1<<5)&~(1<<6);
 104:	85 b3       	in	r24, 0x15	; 21
 106:	8f 78       	andi	r24, 0x8F	; 143
 108:	85 bb       	out	0x15, r24	; 21

			break;
 10a:	08 95       	ret

		case 9:

		{

			PORTC|=(1<<7)|(1<<4);
 10c:	85 b3       	in	r24, 0x15	; 21
 10e:	80 69       	ori	r24, 0x90	; 144
 110:	85 bb       	out	0x15, r24	; 21

			PORTC&=~(1<<5)&~(1<<6);
 112:	85 b3       	in	r24, 0x15	; 21
 114:	8f 79       	andi	r24, 0x9F	; 159
 116:	85 bb       	out	0x15, r24	; 21
 118:	08 95       	ret

0000011a <main>:
}


int main(void)
{
	DDRA |= 0xff;
 11a:	8a b3       	in	r24, 0x1a	; 26
 11c:	8f ef       	ldi	r24, 0xFF	; 255
 11e:	8a bb       	out	0x1a, r24	; 26
	PORTA &=0x00;
 120:	8b b3       	in	r24, 0x1b	; 27
 122:	1b ba       	out	0x1b, r1	; 27
    while (1) 
    {
		char count=0; 
		for (count=0;count<=99;count++) // This loop is to increment the number that will be displayed
 124:	d0 e0       	ldi	r29, 0x00	; 0
 126:	36 c0       	rjmp	.+108    	; 0x194 <main+0x7a>
		{
			for (int i=0;i<=17;i++) // This loop introduces some more delay so that the counting is slow enough for our eyes to recognize it
			{
				Sev_Seg(count%10); //write the first digit of "count" value to the first seven-segment
 128:	cd ec       	ldi	r28, 0xCD	; 205
 12a:	dc 9f       	mul	r29, r28
 12c:	c1 2d       	mov	r28, r1
 12e:	11 24       	eor	r1, r1
 130:	c6 95       	lsr	r28
 132:	c6 95       	lsr	r28
 134:	c6 95       	lsr	r28
 136:	9c 2f       	mov	r25, r28
 138:	99 0f       	add	r25, r25
 13a:	89 2f       	mov	r24, r25
 13c:	88 0f       	add	r24, r24
 13e:	88 0f       	add	r24, r24
 140:	89 0f       	add	r24, r25
 142:	9d 2f       	mov	r25, r29
 144:	98 1b       	sub	r25, r24
 146:	89 2f       	mov	r24, r25
 148:	0e 94 40 00 	call	0x80	; 0x80 <Sev_Seg>
				PORTA|=(1<<2); //Enable the first seven-segment
 14c:	8b b3       	in	r24, 0x1b	; 27
 14e:	84 60       	ori	r24, 0x04	; 4
 150:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	83 ec       	ldi	r24, 0xC3	; 195
 154:	99 e0       	ldi	r25, 0x09	; 9
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <main+0x3c>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <main+0x42>
 15c:	00 00       	nop
				_delay_ms(10);
				PORTA&=~(1<<2); //disable the first seven-segment
 15e:	8b b3       	in	r24, 0x1b	; 27
 160:	8b 7f       	andi	r24, 0xFB	; 251
 162:	8b bb       	out	0x1b, r24	; 27
				Sev_Seg(count/10); //write the second digit of "count" value to the second seven-segment
 164:	8c 2f       	mov	r24, r28
 166:	0e 94 40 00 	call	0x80	; 0x80 <Sev_Seg>
				PORTA|=(1<<3); //Enable the second seven-segment
 16a:	8b b3       	in	r24, 0x1b	; 27
 16c:	88 60       	ori	r24, 0x08	; 8
 16e:	8b bb       	out	0x1b, r24	; 27
 170:	83 ec       	ldi	r24, 0xC3	; 195
 172:	99 e0       	ldi	r25, 0x09	; 9
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <main+0x5a>
 178:	00 c0       	rjmp	.+0      	; 0x17a <main+0x60>
 17a:	00 00       	nop
				_delay_ms(10);
				PORTA&=~(1<<3); //disable the second seven-segment
 17c:	8b b3       	in	r24, 0x1b	; 27
 17e:	87 7f       	andi	r24, 0xF7	; 247
 180:	8b bb       	out	0x1b, r24	; 27
    while (1) 
    {
		char count=0; 
		for (count=0;count<=99;count++) // This loop is to increment the number that will be displayed
		{
			for (int i=0;i<=17;i++) // This loop introduces some more delay so that the counting is slow enough for our eyes to recognize it
 182:	0f 5f       	subi	r16, 0xFF	; 255
 184:	1f 4f       	sbci	r17, 0xFF	; 255
 186:	02 c0       	rjmp	.+4      	; 0x18c <main+0x72>
 188:	00 e0       	ldi	r16, 0x00	; 0
 18a:	10 e0       	ldi	r17, 0x00	; 0
 18c:	02 31       	cpi	r16, 0x12	; 18
 18e:	11 05       	cpc	r17, r1
 190:	5c f2       	brlt	.-106    	; 0x128 <main+0xe>
	DDRA |= 0xff;
	PORTA &=0x00;
    while (1) 
    {
		char count=0; 
		for (count=0;count<=99;count++) // This loop is to increment the number that will be displayed
 192:	df 5f       	subi	r29, 0xFF	; 255
 194:	d4 36       	cpi	r29, 0x64	; 100
 196:	c0 f3       	brcs	.-16     	; 0x188 <main+0x6e>
 198:	c5 cf       	rjmp	.-118    	; 0x124 <main+0xa>

0000019a <__tablejump2__>:
 19a:	ee 0f       	add	r30, r30
 19c:	ff 1f       	adc	r31, r31
 19e:	05 90       	lpm	r0, Z+
 1a0:	f4 91       	lpm	r31, Z
 1a2:	e0 2d       	mov	r30, r0
 1a4:	09 94       	ijmp

000001a6 <_exit>:
 1a6:	f8 94       	cli

000001a8 <__stop_program>:
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <__stop_program>
