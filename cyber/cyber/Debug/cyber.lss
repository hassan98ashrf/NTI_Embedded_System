
cyber.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000072  00800060  000014c0  00001554  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a1  008000d2  008000d2  000015c6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000015c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001624  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c97  00000000  00000000  000018d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eb0  00000000  00000000  00004567  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000140e  00000000  00000000  00005417  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000068c  00000000  00000000  00006828  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000df4  00000000  00000000  00006eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001dbb  00000000  00000000  00007ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  00009a63  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 bb 04 	jmp	0x976	; 0x976 <__vector_1>
       8:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <__vector_2>
       c:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 68 05 	jmp	0xad0	; 0xad0 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 91 05 	jmp	0xb22	; 0xb22 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ec       	ldi	r30, 0xC0	; 192
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 3d       	cpi	r26, 0xD2	; 210
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a2 ed       	ldi	r26, 0xD2	; 210
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 37       	cpi	r26, 0x73	; 115
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 01 02 	call	0x402	; 0x402 <main>
      8a:	0c 94 5e 0a 	jmp	0x14bc	; 0x14bc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <WriteIns>:
		arr_l_NumString[u8_l_StrLen - u8_l_NumIterator - 1] = u8_l_tempVar;
	}

	/* Display Number */
	LCD_WriteString(arr_l_NumString);
}
      92:	cf 93       	push	r28
      94:	c8 2f       	mov	r28, r24
      96:	60 e0       	ldi	r22, 0x00	; 0
      98:	81 e0       	ldi	r24, 0x01	; 1
      9a:	0e 94 26 04 	call	0x84c	; 0x84c <DIO_writepin>
      9e:	6c 2f       	mov	r22, r28
      a0:	66 1f       	adc	r22, r22
      a2:	66 27       	eor	r22, r22
      a4:	66 1f       	adc	r22, r22
      a6:	87 e0       	ldi	r24, 0x07	; 7
      a8:	0e 94 26 04 	call	0x84c	; 0x84c <DIO_writepin>
      ac:	c6 fb       	bst	r28, 6
      ae:	66 27       	eor	r22, r22
      b0:	60 f9       	bld	r22, 0
      b2:	86 e0       	ldi	r24, 0x06	; 6
      b4:	0e 94 26 04 	call	0x84c	; 0x84c <DIO_writepin>
      b8:	c5 fb       	bst	r28, 5
      ba:	66 27       	eor	r22, r22
      bc:	60 f9       	bld	r22, 0
      be:	85 e0       	ldi	r24, 0x05	; 5
      c0:	0e 94 26 04 	call	0x84c	; 0x84c <DIO_writepin>
      c4:	c4 fb       	bst	r28, 4
      c6:	66 27       	eor	r22, r22
      c8:	60 f9       	bld	r22, 0
      ca:	84 e0       	ldi	r24, 0x04	; 4
      cc:	0e 94 26 04 	call	0x84c	; 0x84c <DIO_writepin>
      d0:	61 e0       	ldi	r22, 0x01	; 1
      d2:	83 e0       	ldi	r24, 0x03	; 3
      d4:	0e 94 26 04 	call	0x84c	; 0x84c <DIO_writepin>
      d8:	8f e9       	ldi	r24, 0x9F	; 159
      da:	9f e0       	ldi	r25, 0x0F	; 15
      dc:	01 97       	sbiw	r24, 0x01	; 1
      de:	f1 f7       	brne	.-4      	; 0xdc <WriteIns+0x4a>
      e0:	00 c0       	rjmp	.+0      	; 0xe2 <WriteIns+0x50>
      e2:	00 00       	nop
      e4:	60 e0       	ldi	r22, 0x00	; 0
      e6:	83 e0       	ldi	r24, 0x03	; 3
      e8:	0e 94 26 04 	call	0x84c	; 0x84c <DIO_writepin>
      ec:	8f e9       	ldi	r24, 0x9F	; 159
      ee:	9f e0       	ldi	r25, 0x0F	; 15
      f0:	01 97       	sbiw	r24, 0x01	; 1
      f2:	f1 f7       	brne	.-4      	; 0xf0 <WriteIns+0x5e>
      f4:	00 c0       	rjmp	.+0      	; 0xf6 <WriteIns+0x64>
      f6:	00 00       	nop
      f8:	c3 fb       	bst	r28, 3
      fa:	66 27       	eor	r22, r22
      fc:	60 f9       	bld	r22, 0
      fe:	87 e0       	ldi	r24, 0x07	; 7
     100:	0e 94 26 04 	call	0x84c	; 0x84c <DIO_writepin>
     104:	c2 fb       	bst	r28, 2
     106:	66 27       	eor	r22, r22
     108:	60 f9       	bld	r22, 0
     10a:	86 e0       	ldi	r24, 0x06	; 6
     10c:	0e 94 26 04 	call	0x84c	; 0x84c <DIO_writepin>
     110:	c1 fb       	bst	r28, 1
     112:	66 27       	eor	r22, r22
     114:	60 f9       	bld	r22, 0
     116:	85 e0       	ldi	r24, 0x05	; 5
     118:	0e 94 26 04 	call	0x84c	; 0x84c <DIO_writepin>
     11c:	6c 2f       	mov	r22, r28
     11e:	61 70       	andi	r22, 0x01	; 1
     120:	84 e0       	ldi	r24, 0x04	; 4
     122:	0e 94 26 04 	call	0x84c	; 0x84c <DIO_writepin>
     126:	61 e0       	ldi	r22, 0x01	; 1
     128:	83 e0       	ldi	r24, 0x03	; 3
     12a:	0e 94 26 04 	call	0x84c	; 0x84c <DIO_writepin>
     12e:	8f e9       	ldi	r24, 0x9F	; 159
     130:	9f e0       	ldi	r25, 0x0F	; 15
     132:	01 97       	sbiw	r24, 0x01	; 1
     134:	f1 f7       	brne	.-4      	; 0x132 <WriteIns+0xa0>
     136:	00 c0       	rjmp	.+0      	; 0x138 <WriteIns+0xa6>
     138:	00 00       	nop
     13a:	60 e0       	ldi	r22, 0x00	; 0
     13c:	83 e0       	ldi	r24, 0x03	; 3
     13e:	0e 94 26 04 	call	0x84c	; 0x84c <DIO_writepin>
     142:	8f e9       	ldi	r24, 0x9F	; 159
     144:	9f e0       	ldi	r25, 0x0F	; 15
     146:	01 97       	sbiw	r24, 0x01	; 1
     148:	f1 f7       	brne	.-4      	; 0x146 <WriteIns+0xb4>
     14a:	00 c0       	rjmp	.+0      	; 0x14c <WriteIns+0xba>
     14c:	00 00       	nop
     14e:	cf 91       	pop	r28
     150:	08 95       	ret

00000152 <WriteData>:
     152:	cf 93       	push	r28
     154:	c8 2f       	mov	r28, r24
     156:	61 e0       	ldi	r22, 0x01	; 1
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	0e 94 26 04 	call	0x84c	; 0x84c <DIO_writepin>
     15e:	6c 2f       	mov	r22, r28
     160:	66 1f       	adc	r22, r22
     162:	66 27       	eor	r22, r22
     164:	66 1f       	adc	r22, r22
     166:	87 e0       	ldi	r24, 0x07	; 7
     168:	0e 94 26 04 	call	0x84c	; 0x84c <DIO_writepin>
     16c:	c6 fb       	bst	r28, 6
     16e:	66 27       	eor	r22, r22
     170:	60 f9       	bld	r22, 0
     172:	86 e0       	ldi	r24, 0x06	; 6
     174:	0e 94 26 04 	call	0x84c	; 0x84c <DIO_writepin>
     178:	c5 fb       	bst	r28, 5
     17a:	66 27       	eor	r22, r22
     17c:	60 f9       	bld	r22, 0
     17e:	85 e0       	ldi	r24, 0x05	; 5
     180:	0e 94 26 04 	call	0x84c	; 0x84c <DIO_writepin>
     184:	c4 fb       	bst	r28, 4
     186:	66 27       	eor	r22, r22
     188:	60 f9       	bld	r22, 0
     18a:	84 e0       	ldi	r24, 0x04	; 4
     18c:	0e 94 26 04 	call	0x84c	; 0x84c <DIO_writepin>
     190:	61 e0       	ldi	r22, 0x01	; 1
     192:	83 e0       	ldi	r24, 0x03	; 3
     194:	0e 94 26 04 	call	0x84c	; 0x84c <DIO_writepin>
     198:	8f e9       	ldi	r24, 0x9F	; 159
     19a:	9f e0       	ldi	r25, 0x0F	; 15
     19c:	01 97       	sbiw	r24, 0x01	; 1
     19e:	f1 f7       	brne	.-4      	; 0x19c <WriteData+0x4a>
     1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <WriteData+0x50>
     1a2:	00 00       	nop
     1a4:	60 e0       	ldi	r22, 0x00	; 0
     1a6:	83 e0       	ldi	r24, 0x03	; 3
     1a8:	0e 94 26 04 	call	0x84c	; 0x84c <DIO_writepin>
     1ac:	8f e9       	ldi	r24, 0x9F	; 159
     1ae:	9f e0       	ldi	r25, 0x0F	; 15
     1b0:	01 97       	sbiw	r24, 0x01	; 1
     1b2:	f1 f7       	brne	.-4      	; 0x1b0 <WriteData+0x5e>
     1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <WriteData+0x64>
     1b6:	00 00       	nop
     1b8:	c3 fb       	bst	r28, 3
     1ba:	66 27       	eor	r22, r22
     1bc:	60 f9       	bld	r22, 0
     1be:	87 e0       	ldi	r24, 0x07	; 7
     1c0:	0e 94 26 04 	call	0x84c	; 0x84c <DIO_writepin>
     1c4:	c2 fb       	bst	r28, 2
     1c6:	66 27       	eor	r22, r22
     1c8:	60 f9       	bld	r22, 0
     1ca:	86 e0       	ldi	r24, 0x06	; 6
     1cc:	0e 94 26 04 	call	0x84c	; 0x84c <DIO_writepin>
     1d0:	c1 fb       	bst	r28, 1
     1d2:	66 27       	eor	r22, r22
     1d4:	60 f9       	bld	r22, 0
     1d6:	85 e0       	ldi	r24, 0x05	; 5
     1d8:	0e 94 26 04 	call	0x84c	; 0x84c <DIO_writepin>
     1dc:	6c 2f       	mov	r22, r28
     1de:	61 70       	andi	r22, 0x01	; 1
     1e0:	84 e0       	ldi	r24, 0x04	; 4
     1e2:	0e 94 26 04 	call	0x84c	; 0x84c <DIO_writepin>
     1e6:	61 e0       	ldi	r22, 0x01	; 1
     1e8:	83 e0       	ldi	r24, 0x03	; 3
     1ea:	0e 94 26 04 	call	0x84c	; 0x84c <DIO_writepin>
     1ee:	8f e9       	ldi	r24, 0x9F	; 159
     1f0:	9f e0       	ldi	r25, 0x0F	; 15
     1f2:	01 97       	sbiw	r24, 0x01	; 1
     1f4:	f1 f7       	brne	.-4      	; 0x1f2 <WriteData+0xa0>
     1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <WriteData+0xa6>
     1f8:	00 00       	nop
     1fa:	60 e0       	ldi	r22, 0x00	; 0
     1fc:	83 e0       	ldi	r24, 0x03	; 3
     1fe:	0e 94 26 04 	call	0x84c	; 0x84c <DIO_writepin>
     202:	8f e9       	ldi	r24, 0x9F	; 159
     204:	9f e0       	ldi	r25, 0x0F	; 15
     206:	01 97       	sbiw	r24, 0x01	; 1
     208:	f1 f7       	brne	.-4      	; 0x206 <WriteData+0xb4>
     20a:	00 c0       	rjmp	.+0      	; 0x20c <WriteData+0xba>
     20c:	00 00       	nop
     20e:	cf 91       	pop	r28
     210:	08 95       	ret

00000212 <LCD_Init>:
     212:	2f ef       	ldi	r18, 0xFF	; 255
     214:	80 e7       	ldi	r24, 0x70	; 112
     216:	92 e0       	ldi	r25, 0x02	; 2
     218:	21 50       	subi	r18, 0x01	; 1
     21a:	80 40       	sbci	r24, 0x00	; 0
     21c:	90 40       	sbci	r25, 0x00	; 0
     21e:	e1 f7       	brne	.-8      	; 0x218 <LCD_Init+0x6>
     220:	00 c0       	rjmp	.+0      	; 0x222 <LCD_Init+0x10>
     222:	00 00       	nop
     224:	82 e0       	ldi	r24, 0x02	; 2
     226:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
     22a:	88 e2       	ldi	r24, 0x28	; 40
     22c:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
     230:	8c e0       	ldi	r24, 0x0C	; 12
     232:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
     23c:	8f e9       	ldi	r24, 0x9F	; 159
     23e:	9f e0       	ldi	r25, 0x0F	; 15
     240:	01 97       	sbiw	r24, 0x01	; 1
     242:	f1 f7       	brne	.-4      	; 0x240 <LCD_Init+0x2e>
     244:	00 c0       	rjmp	.+0      	; 0x246 <LCD_Init+0x34>
     246:	00 00       	nop
     248:	86 e0       	ldi	r24, 0x06	; 6
     24a:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
     24e:	08 95       	ret

00000250 <LCD_WriteChar>:
     250:	0e 94 a9 00 	call	0x152	; 0x152 <WriteData>
     254:	08 95       	ret

00000256 <LCD_WriteString>:
     256:	0f 93       	push	r16
     258:	1f 93       	push	r17
     25a:	cf 93       	push	r28
     25c:	8c 01       	movw	r16, r24
     25e:	c0 e0       	ldi	r28, 0x00	; 0
     260:	03 c0       	rjmp	.+6      	; 0x268 <LCD_WriteString+0x12>
     262:	0e 94 28 01 	call	0x250	; 0x250 <LCD_WriteChar>
     266:	cf 5f       	subi	r28, 0xFF	; 255
     268:	f8 01       	movw	r30, r16
     26a:	ec 0f       	add	r30, r28
     26c:	f1 1d       	adc	r31, r1
     26e:	80 81       	ld	r24, Z
     270:	81 11       	cpse	r24, r1
     272:	f7 cf       	rjmp	.-18     	; 0x262 <LCD_WriteString+0xc>
     274:	cf 91       	pop	r28
     276:	1f 91       	pop	r17
     278:	0f 91       	pop	r16
     27a:	08 95       	ret

0000027c <LCD_SetCursor>:
     27c:	81 11       	cpse	r24, r1
     27e:	05 c0       	rjmp	.+10     	; 0x28a <LCD_SetCursor+0xe>
     280:	86 2f       	mov	r24, r22
     282:	80 68       	ori	r24, 0x80	; 128
     284:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
     288:	08 95       	ret
     28a:	81 30       	cpi	r24, 0x01	; 1
     28c:	21 f4       	brne	.+8      	; 0x296 <LCD_SetCursor+0x1a>
     28e:	80 ec       	ldi	r24, 0xC0	; 192
     290:	86 0f       	add	r24, r22
     292:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
     296:	08 95       	ret

00000298 <LCD_Clear>:
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
     29e:	8f e9       	ldi	r24, 0x9F	; 159
     2a0:	9f e0       	ldi	r25, 0x0F	; 15
     2a2:	01 97       	sbiw	r24, 0x01	; 1
     2a4:	f1 f7       	brne	.-4      	; 0x2a2 <LCD_Clear+0xa>
     2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <LCD_Clear+0x10>
     2a8:	00 00       	nop
     2aa:	08 95       	ret

000002ac <LCD_WriteHexlong>:
void LCD_WriteHexlong(u32 hex_number)
{
     2ac:	0f 93       	push	r16
     2ae:	1f 93       	push	r17
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	cd b7       	in	r28, 0x3d	; 61
     2b6:	de b7       	in	r29, 0x3e	; 62
     2b8:	2b 97       	sbiw	r28, 0x0b	; 11
     2ba:	0f b6       	in	r0, 0x3f	; 63
     2bc:	f8 94       	cli
     2be:	de bf       	out	0x3e, r29	; 62
     2c0:	0f be       	out	0x3f, r0	; 63
     2c2:	cd bf       	out	0x3d, r28	; 61
	u8 buffer[11];  // Buffer for "Hex: 0x" + 8 characters + null terminator
	sprintf(buffer, "%08lX", (unsigned long)hex_number);
     2c4:	9f 93       	push	r25
     2c6:	8f 93       	push	r24
     2c8:	7f 93       	push	r23
     2ca:	6f 93       	push	r22
     2cc:	88 e7       	ldi	r24, 0x78	; 120
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	9f 93       	push	r25
     2d2:	8f 93       	push	r24
     2d4:	8e 01       	movw	r16, r28
     2d6:	0f 5f       	subi	r16, 0xFF	; 255
     2d8:	1f 4f       	sbci	r17, 0xFF	; 255
     2da:	1f 93       	push	r17
     2dc:	0f 93       	push	r16
     2de:	0e 94 71 07 	call	0xee2	; 0xee2 <sprintf>
	LCD_WriteString(buffer);
     2e2:	c8 01       	movw	r24, r16
     2e4:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteString>
}
     2e8:	0f b6       	in	r0, 0x3f	; 63
     2ea:	f8 94       	cli
     2ec:	de bf       	out	0x3e, r29	; 62
     2ee:	0f be       	out	0x3f, r0	; 63
     2f0:	cd bf       	out	0x3d, r28	; 61
     2f2:	2b 96       	adiw	r28, 0x0b	; 11
     2f4:	0f b6       	in	r0, 0x3f	; 63
     2f6:	f8 94       	cli
     2f8:	de bf       	out	0x3e, r29	; 62
     2fa:	0f be       	out	0x3f, r0	; 63
     2fc:	cd bf       	out	0x3d, r28	; 61
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	1f 91       	pop	r17
     304:	0f 91       	pop	r16
     306:	08 95       	ret

00000308 <LCD_WriteHex>:
void LCD_WriteHex(u16 hex_number)
{
     308:	0f 93       	push	r16
     30a:	1f 93       	push	r17
     30c:	cf 93       	push	r28
     30e:	df 93       	push	r29
     310:	cd b7       	in	r28, 0x3d	; 61
     312:	de b7       	in	r29, 0x3e	; 62
     314:	2a 97       	sbiw	r28, 0x0a	; 10
     316:	0f b6       	in	r0, 0x3f	; 63
     318:	f8 94       	cli
     31a:	de bf       	out	0x3e, r29	; 62
     31c:	0f be       	out	0x3f, r0	; 63
     31e:	cd bf       	out	0x3d, r28	; 61
	u8 buffer[10];  // Buffer for "Hex: 0x" + 8 characters + null terminator
	sprintf(buffer, "%X",hex_number);
     320:	9f 93       	push	r25
     322:	8f 93       	push	r24
     324:	8e e7       	ldi	r24, 0x7E	; 126
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	9f 93       	push	r25
     32a:	8f 93       	push	r24
     32c:	8e 01       	movw	r16, r28
     32e:	0f 5f       	subi	r16, 0xFF	; 255
     330:	1f 4f       	sbci	r17, 0xFF	; 255
     332:	1f 93       	push	r17
     334:	0f 93       	push	r16
     336:	0e 94 71 07 	call	0xee2	; 0xee2 <sprintf>
	LCD_WriteString(buffer);
     33a:	c8 01       	movw	r24, r16
     33c:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteString>
     340:	0f 90       	pop	r0
     342:	0f 90       	pop	r0
     344:	0f 90       	pop	r0
     346:	0f 90       	pop	r0
     348:	0f 90       	pop	r0
     34a:	0f 90       	pop	r0
     34c:	2a 96       	adiw	r28, 0x0a	; 10
     34e:	0f b6       	in	r0, 0x3f	; 63
     350:	f8 94       	cli
     352:	de bf       	out	0x3e, r29	; 62
     354:	0f be       	out	0x3f, r0	; 63
     356:	cd bf       	out	0x3d, r28	; 61
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	1f 91       	pop	r17
     35e:	0f 91       	pop	r16
     360:	08 95       	ret

00000362 <gen_num>:

 void f1 ();
 void f2 ();
 u8 flag=0,data[5][20],Total_C=0;
 u32 gen_num()
 {
     362:	8f 92       	push	r8
     364:	9f 92       	push	r9
     366:	af 92       	push	r10
     368:	bf 92       	push	r11
     36a:	cf 92       	push	r12
     36c:	df 92       	push	r13
     36e:	ef 92       	push	r14
     370:	ff 92       	push	r15
	 static u32 i=1;
	 random_num =(random_num*i)-3*i+random_num;
     372:	80 90 70 00 	lds	r8, 0x0070	; 0x800070 <random_num>
     376:	90 90 71 00 	lds	r9, 0x0071	; 0x800071 <random_num+0x1>
     37a:	a0 90 72 00 	lds	r10, 0x0072	; 0x800072 <random_num+0x2>
     37e:	b0 90 73 00 	lds	r11, 0x0073	; 0x800073 <random_num+0x3>
     382:	c0 90 60 00 	lds	r12, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     386:	d0 90 61 00 	lds	r13, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     38a:	e0 90 62 00 	lds	r14, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     38e:	f0 90 63 00 	lds	r15, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     392:	a5 01       	movw	r20, r10
     394:	94 01       	movw	r18, r8
     396:	23 50       	subi	r18, 0x03	; 3
     398:	31 09       	sbc	r19, r1
     39a:	41 09       	sbc	r20, r1
     39c:	51 09       	sbc	r21, r1
     39e:	c7 01       	movw	r24, r14
     3a0:	b6 01       	movw	r22, r12
     3a2:	0e 94 06 06 	call	0xc0c	; 0xc0c <__mulsi3>
     3a6:	68 0d       	add	r22, r8
     3a8:	79 1d       	adc	r23, r9
     3aa:	8a 1d       	adc	r24, r10
     3ac:	9b 1d       	adc	r25, r11
     3ae:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <random_num>
     3b2:	70 93 71 00 	sts	0x0071, r23	; 0x800071 <random_num+0x1>
     3b6:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <random_num+0x2>
     3ba:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <random_num+0x3>
	 i+=2;
     3be:	22 e0       	ldi	r18, 0x02	; 2
     3c0:	c2 0e       	add	r12, r18
     3c2:	d1 1c       	adc	r13, r1
     3c4:	e1 1c       	adc	r14, r1
     3c6:	f1 1c       	adc	r15, r1
     3c8:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__DATA_REGION_ORIGIN__>
     3cc:	d0 92 61 00 	sts	0x0061, r13	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     3d0:	e0 92 62 00 	sts	0x0062, r14	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     3d4:	f0 92 63 00 	sts	0x0063, r15	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	 
	 return random_num;
	 
	 
 }
     3d8:	ff 90       	pop	r15
     3da:	ef 90       	pop	r14
     3dc:	df 90       	pop	r13
     3de:	cf 90       	pop	r12
     3e0:	bf 90       	pop	r11
     3e2:	af 90       	pop	r10
     3e4:	9f 90       	pop	r9
     3e6:	8f 90       	pop	r8
     3e8:	08 95       	ret

000003ea <f1>:


 void f1 ()
 {
	 static  Rec_C=0,R_flag=0;
	 R_flag=UART_ReceiveStringAshync_V3(&data[0]);
     3ea:	81 ee       	ldi	r24, 0xE1	; 225
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	0e 94 cc 05 	call	0xb98	; 0xb98 <UART_ReceiveStringAshync_V3>
	 if (R_flag==UART_FREE)
     3f2:	88 30       	cpi	r24, 0x08	; 8
     3f4:	29 f4       	brne	.+10     	; 0x400 <__EEPROM_REGION_LENGTH__>
	 {
		 // LCD_SetCursor(1,10);
		 // LCD_WriteString(data[Rec_C]);
		 // LCD_WriteString("   ");
		 // Rec_C++;
		 Total_C++;
     3f6:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <__data_end>
     3fa:	8f 5f       	subi	r24, 0xFF	; 255
     3fc:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__data_end>
     400:	08 95       	ret

00000402 <main>:
	 
	 
 }

 int main(void)
 {
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	00 d0       	rcall	.+0      	; 0x408 <main+0x6>
     408:	cd b7       	in	r28, 0x3d	; 61
     40a:	de b7       	in	r29, 0x3e	; 62
	 u8 x=0, flag_a=0,flag_b=0;
	 int i,k;
	 u16 num=0;
	 DIO_Init_All();
     40c:	0e 94 16 04 	call	0x82c	; 0x82c <DIO_Init_All>
	 LCD_Init();
     410:	0e 94 09 01 	call	0x212	; 0x212 <LCD_Init>
	 GLOBALE_ENABLE();
     414:	78 94       	sei
	 UART_Init();
     416:	0e 94 36 05 	call	0xa6c	; 0xa6c <UART_Init>
	 UART_RX_InterruptEnable();
     41a:	0e 94 5b 05 	call	0xab6	; 0xab6 <UART_RX_InterruptEnable>
	 UART_RX_SetCallBack(UART_RX_FUN);
     41e:	8a eb       	ldi	r24, 0xBA	; 186
     420:	95 e0       	ldi	r25, 0x05	; 5
     422:	0e 94 5f 05 	call	0xabe	; 0xabe <UART_RX_SetCallBack>
	 
 }

 int main(void)
 {
	 u8 x=0, flag_a=0,flag_b=0;
     426:	00 e0       	ldi	r16, 0x00	; 0
     428:	10 e0       	ldi	r17, 0x00	; 0
	 u32 ECode,serv;
	 
	 while(1)
	 {

		 f1();   //rec
     42a:	0e 94 f5 01 	call	0x3ea	; 0x3ea <f1>

		 while(Total_C>0)   // i have messages
     42e:	e8 c0       	rjmp	.+464    	; 0x600 <main+0x1fe>
		 {

			 serv = strtol (data[0],&ptr,16);
     430:	40 e1       	ldi	r20, 0x10	; 16
     432:	50 e0       	ldi	r21, 0x00	; 0
     434:	be 01       	movw	r22, r28
     436:	6f 5f       	subi	r22, 0xFF	; 255
     438:	7f 4f       	sbci	r23, 0xFF	; 255
     43a:	81 ee       	ldi	r24, 0xE1	; 225
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	0e 94 52 06 	call	0xca4	; 0xca4 <strtol>
     442:	6c 01       	movw	r12, r24
     444:	99 0f       	add	r25, r25
     446:	ee 08       	sbc	r14, r14
     448:	ff 08       	sbc	r15, r15
			 ECode = strtol(ptr,&ptr, 16);
     44a:	40 e1       	ldi	r20, 0x10	; 16
     44c:	50 e0       	ldi	r21, 0x00	; 0
     44e:	be 01       	movw	r22, r28
     450:	6f 5f       	subi	r22, 0xFF	; 255
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	89 81       	ldd	r24, Y+1	; 0x01
     456:	9a 81       	ldd	r25, Y+2	; 0x02
     458:	0e 94 52 06 	call	0xca4	; 0xca4 <strtol>
     45c:	4c 01       	movw	r8, r24
     45e:	99 0f       	add	r25, r25
     460:	aa 08       	sbc	r10, r10
     462:	bb 08       	sbc	r11, r11
			 Total_C--;
     464:	90 91 d2 00 	lds	r25, 0x00D2	; 0x8000d2 <__data_end>
     468:	91 50       	subi	r25, 0x01	; 1
     46a:	90 93 d2 00 	sts	0x00D2, r25	; 0x8000d2 <__data_end>
			 if (serv==securty_req)
     46e:	40 91 6c 00 	lds	r20, 0x006C	; 0x80006c <securty_req>
     472:	50 91 6d 00 	lds	r21, 0x006D	; 0x80006d <securty_req+0x1>
     476:	60 e0       	ldi	r22, 0x00	; 0
     478:	70 e0       	ldi	r23, 0x00	; 0
     47a:	c4 16       	cp	r12, r20
     47c:	d5 06       	cpc	r13, r21
     47e:	e6 06       	cpc	r14, r22
     480:	f7 06       	cpc	r15, r23
     482:	31 f5       	brne	.+76     	; 0x4d0 <main+0xce>
			 {
				 flag_a=1;
				 LCD_Clear();
     484:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_Clear>
				 LCD_SetCursor(0,0);
     488:	60 e0       	ldi	r22, 0x00	; 0
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_SetCursor>
				 random_num =gen_num();
     490:	0e 94 b1 01 	call	0x362	; 0x362 <gen_num>
     494:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <random_num>
     498:	70 93 71 00 	sts	0x0071, r23	; 0x800071 <random_num+0x1>
     49c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <random_num+0x2>
     4a0:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <random_num+0x3>
				 LCD_WriteHex(securty_ans);
     4a4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <securty_ans>
     4a8:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <securty_ans+0x1>
     4ac:	0e 94 84 01 	call	0x308	; 0x308 <LCD_WriteHex>
				 LCD_WriteString("  ");
     4b0:	81 e8       	ldi	r24, 0x81	; 129
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteString>
				 LCD_WriteHexlong(random_num);
     4b8:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <random_num>
     4bc:	70 91 71 00 	lds	r23, 0x0071	; 0x800071 <random_num+0x1>
     4c0:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <random_num+0x2>
     4c4:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <random_num+0x3>
     4c8:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_WriteHexlong>
			 serv = strtol (data[0],&ptr,16);
			 ECode = strtol(ptr,&ptr, 16);
			 Total_C--;
			 if (serv==securty_req)
			 {
				 flag_a=1;
     4cc:	11 e0       	ldi	r17, 0x01	; 1
     4ce:	98 c0       	rjmp	.+304    	; 0x600 <main+0x1fe>
				 random_num =gen_num();
				 LCD_WriteHex(securty_ans);
				 LCD_WriteString("  ");
				 LCD_WriteHexlong(random_num);
			 }
			 else if(serv==service_send)
     4d0:	40 91 6e 00 	lds	r20, 0x006E	; 0x80006e <service_send>
     4d4:	50 91 6f 00 	lds	r21, 0x006F	; 0x80006f <service_send+0x1>
     4d8:	60 e0       	ldi	r22, 0x00	; 0
     4da:	70 e0       	ldi	r23, 0x00	; 0
     4dc:	c4 16       	cp	r12, r20
     4de:	d5 06       	cpc	r13, r21
     4e0:	e6 06       	cpc	r14, r22
     4e2:	f7 06       	cpc	r15, r23
     4e4:	09 f0       	breq	.+2      	; 0x4e8 <main+0xe6>
     4e6:	3f c0       	rjmp	.+126    	; 0x566 <main+0x164>
			 {
				 if (flag_b==1) //u have access
     4e8:	01 30       	cpi	r16, 0x01	; 1
     4ea:	91 f5       	brne	.+100    	; 0x550 <main+0x14e>
				 {
					 if (ECode==routine)
     4ec:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <routine>
     4f0:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <routine+0x1>
     4f4:	a0 e0       	ldi	r26, 0x00	; 0
     4f6:	b0 e0       	ldi	r27, 0x00	; 0
     4f8:	88 16       	cp	r8, r24
     4fa:	99 06       	cpc	r9, r25
     4fc:	aa 06       	cpc	r10, r26
     4fe:	bb 06       	cpc	r11, r27
     500:	e1 f4       	brne	.+56     	; 0x53a <main+0x138>
					 {
						 LCD_Clear();
     502:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_Clear>
						 LCD_SetCursor(0,0);
     506:	60 e0       	ldi	r22, 0x00	; 0
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_SetCursor>
						 LCD_WriteHex(service_send);
     50e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <service_send>
     512:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <service_send+0x1>
     516:	0e 94 84 01 	call	0x308	; 0x308 <LCD_WriteHex>
						 LCD_WriteString("  ");
     51a:	81 e8       	ldi	r24, 0x81	; 129
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteString>
						 LCD_WriteHex(routine);
     522:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <routine>
     526:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <routine+0x1>
     52a:	0e 94 84 01 	call	0x308	; 0x308 <LCD_WriteHex>
						 SET_BIT(PORTB,0);
     52e:	88 b3       	in	r24, 0x18	; 24
     530:	81 60       	ori	r24, 0x01	; 1
     532:	88 bb       	out	0x18, r24	; 24
						 flag_b=0;
     534:	00 e0       	ldi	r16, 0x00	; 0
						 flag_a=0;
     536:	10 e0       	ldi	r17, 0x00	; 0
     538:	63 c0       	rjmp	.+198    	; 0x600 <main+0x1fe>
					 }
					 else
					 {
						 LCD_Clear();
     53a:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_Clear>
						 LCD_SetCursor(0,0);
     53e:	60 e0       	ldi	r22, 0x00	; 0
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_SetCursor>
						 LCD_WriteString(NRC);
     546:	84 e8       	ldi	r24, 0x84	; 132
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteString>
     54e:	58 c0       	rjmp	.+176    	; 0x600 <main+0x1fe>
					 }
					 
				 }
				 else
				 {
					 LCD_Clear();
     550:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_Clear>
					 LCD_SetCursor(0,0);
     554:	60 e0       	ldi	r22, 0x00	; 0
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_SetCursor>
					 LCD_WriteString("ACCESS DENIED ");
     55c:	8b e8       	ldi	r24, 0x8B	; 139
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteString>
     564:	4d c0       	rjmp	.+154    	; 0x600 <main+0x1fe>
				 }
				 
			 }
			 else if( serv==enc_send)
     566:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <enc_send>
     56a:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <enc_send+0x1>
     56e:	a0 e0       	ldi	r26, 0x00	; 0
     570:	b0 e0       	ldi	r27, 0x00	; 0
     572:	c8 16       	cp	r12, r24
     574:	d9 06       	cpc	r13, r25
     576:	ea 06       	cpc	r14, r26
     578:	fb 06       	cpc	r15, r27
     57a:	09 f0       	breq	.+2      	; 0x57e <main+0x17c>
     57c:	41 c0       	rjmp	.+130    	; 0x600 <main+0x1fe>
			 {

				 if (flag_a==1)
     57e:	11 30       	cpi	r17, 0x01	; 1
     580:	a1 f5       	brne	.+104    	; 0x5ea <main+0x1e8>
				 {


					 if ((random_num^key)==ECode)
     582:	40 91 70 00 	lds	r20, 0x0070	; 0x800070 <random_num>
     586:	50 91 71 00 	lds	r21, 0x0071	; 0x800071 <random_num+0x1>
     58a:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <random_num+0x2>
     58e:	70 91 73 00 	lds	r23, 0x0073	; 0x800073 <random_num+0x3>
     592:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <key>
     596:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <key+0x1>
     59a:	a0 91 76 00 	lds	r26, 0x0076	; 0x800076 <key+0x2>
     59e:	b0 91 77 00 	lds	r27, 0x0077	; 0x800077 <key+0x3>
     5a2:	84 27       	eor	r24, r20
     5a4:	95 27       	eor	r25, r21
     5a6:	a6 27       	eor	r26, r22
     5a8:	b7 27       	eor	r27, r23
     5aa:	88 16       	cp	r8, r24
     5ac:	99 06       	cpc	r9, r25
     5ae:	aa 06       	cpc	r10, r26
     5b0:	bb 06       	cpc	r11, r27
     5b2:	79 f4       	brne	.+30     	; 0x5d2 <main+0x1d0>
					 {
						 LCD_Clear();
     5b4:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_Clear>
						 LCD_SetCursor(0,0);
     5b8:	60 e0       	ldi	r22, 0x00	; 0
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_SetCursor>
						 LCD_WriteHex(enc_rec);
     5c0:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <enc_rec>
     5c4:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <enc_rec+0x1>
     5c8:	0e 94 84 01 	call	0x308	; 0x308 <LCD_WriteHex>
						 flag_a=0;
						 flag_b=1;
     5cc:	01 e0       	ldi	r16, 0x01	; 1
					 if ((random_num^key)==ECode)
					 {
						 LCD_Clear();
						 LCD_SetCursor(0,0);
						 LCD_WriteHex(enc_rec);
						 flag_a=0;
     5ce:	10 e0       	ldi	r17, 0x00	; 0
     5d0:	17 c0       	rjmp	.+46     	; 0x600 <main+0x1fe>
						 flag_b=1;
					 }
					 else
					 {
						 LCD_Clear();
     5d2:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_Clear>
						 LCD_SetCursor(0,0);
     5d6:	60 e0       	ldi	r22, 0x00	; 0
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_SetCursor>
						 LCD_WriteString(NRC);
     5de:	84 e8       	ldi	r24, 0x84	; 132
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteString>
						 flag_a=0;
     5e6:	10 e0       	ldi	r17, 0x00	; 0
     5e8:	0b c0       	rjmp	.+22     	; 0x600 <main+0x1fe>
					 }

				 }
				 else
				 {
					 LCD_Clear();
     5ea:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_Clear>
					 LCD_SetCursor(0,0);
     5ee:	60 e0       	ldi	r22, 0x00	; 0
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_SetCursor>
					 LCD_WriteString(NRC);
     5f6:	84 e8       	ldi	r24, 0x84	; 132
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteString>
					 flag_a=0;
     5fe:	10 e0       	ldi	r17, 0x00	; 0
	 while(1)
	 {

		 f1();   //rec

		 while(Total_C>0)   // i have messages
     600:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <__data_end>
     604:	81 11       	cpse	r24, r1
     606:	14 cf       	rjmp	.-472    	; 0x430 <main+0x2e>
     608:	10 cf       	rjmp	.-480    	; 0x42a <main+0x28>

0000060a <DIO_initpin>:
		  DIO_initpin(i,PinsStatusArray[i]);
	  }
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
     60a:	98 2f       	mov	r25, r24
     60c:	96 95       	lsr	r25
     60e:	96 95       	lsr	r25
     610:	96 95       	lsr	r25
	  u8 pin_num =pin % 8;
     612:	87 70       	andi	r24, 0x07	; 7
	  en_dioError_t error = DIO_OK;
	  
	  if (pin_num < 8)
	  {

		  switch(status)
     614:	61 30       	cpi	r22, 0x01	; 1
     616:	09 f4       	brne	.+2      	; 0x61a <DIO_initpin+0x10>
     618:	59 c0       	rjmp	.+178    	; 0x6cc <DIO_initpin+0xc2>
     61a:	20 f0       	brcs	.+8      	; 0x624 <DIO_initpin+0x1a>
     61c:	62 30       	cpi	r22, 0x02	; 2
     61e:	09 f4       	brne	.+2      	; 0x622 <DIO_initpin+0x18>
     620:	a9 c0       	rjmp	.+338    	; 0x774 <DIO_initpin+0x16a>
     622:	fc c0       	rjmp	.+504    	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
		  {
			  case OUTPUT:
			  switch(port)
     624:	91 30       	cpi	r25, 0x01	; 1
     626:	c9 f0       	breq	.+50     	; 0x65a <DIO_initpin+0x50>
     628:	28 f0       	brcs	.+10     	; 0x634 <DIO_initpin+0x2a>
     62a:	92 30       	cpi	r25, 0x02	; 2
     62c:	49 f1       	breq	.+82     	; 0x680 <DIO_initpin+0x76>
     62e:	93 30       	cpi	r25, 0x03	; 3
     630:	d1 f1       	breq	.+116    	; 0x6a6 <DIO_initpin+0x9c>
     632:	f6 c0       	rjmp	.+492    	; 0x820 <__DATA_REGION_LENGTH__+0x20>
			  {
				  case PA:
				  SET_BIT( DDRA,pin_num);
     634:	4a b3       	in	r20, 0x1a	; 26
     636:	21 e0       	ldi	r18, 0x01	; 1
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	b9 01       	movw	r22, r18
     63c:	02 c0       	rjmp	.+4      	; 0x642 <DIO_initpin+0x38>
     63e:	66 0f       	add	r22, r22
     640:	77 1f       	adc	r23, r23
     642:	8a 95       	dec	r24
     644:	e2 f7       	brpl	.-8      	; 0x63e <DIO_initpin+0x34>
     646:	cb 01       	movw	r24, r22
     648:	94 2f       	mov	r25, r20
     64a:	98 2b       	or	r25, r24
     64c:	9a bb       	out	0x1a, r25	; 26
				  CLR_BIT(PORTA,pin_num);
     64e:	9b b3       	in	r25, 0x1b	; 27
     650:	80 95       	com	r24
     652:	89 23       	and	r24, r25
     654:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     656:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:
				  SET_BIT( DDRA,pin_num);
				  CLR_BIT(PORTA,pin_num);
				  break;
     658:	08 95       	ret
				  case PB:
				  SET_BIT( DDRB,pin_num);
     65a:	47 b3       	in	r20, 0x17	; 23
     65c:	21 e0       	ldi	r18, 0x01	; 1
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	b9 01       	movw	r22, r18
     662:	02 c0       	rjmp	.+4      	; 0x668 <DIO_initpin+0x5e>
     664:	66 0f       	add	r22, r22
     666:	77 1f       	adc	r23, r23
     668:	8a 95       	dec	r24
     66a:	e2 f7       	brpl	.-8      	; 0x664 <DIO_initpin+0x5a>
     66c:	cb 01       	movw	r24, r22
     66e:	94 2f       	mov	r25, r20
     670:	98 2b       	or	r25, r24
     672:	97 bb       	out	0x17, r25	; 23
				  CLR_BIT(PORTB,pin_num);
     674:	98 b3       	in	r25, 0x18	; 24
     676:	80 95       	com	r24
     678:	89 23       	and	r24, r25
     67a:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     67c:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTA,pin_num);
				  break;
				  case PB:
				  SET_BIT( DDRB,pin_num);
				  CLR_BIT(PORTB,pin_num);
				  break;
     67e:	08 95       	ret
				  case PC:
				  SET_BIT( DDRC,pin_num);
     680:	44 b3       	in	r20, 0x14	; 20
     682:	21 e0       	ldi	r18, 0x01	; 1
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	b9 01       	movw	r22, r18
     688:	02 c0       	rjmp	.+4      	; 0x68e <DIO_initpin+0x84>
     68a:	66 0f       	add	r22, r22
     68c:	77 1f       	adc	r23, r23
     68e:	8a 95       	dec	r24
     690:	e2 f7       	brpl	.-8      	; 0x68a <DIO_initpin+0x80>
     692:	cb 01       	movw	r24, r22
     694:	94 2f       	mov	r25, r20
     696:	98 2b       	or	r25, r24
     698:	94 bb       	out	0x14, r25	; 20
				  CLR_BIT(PORTC,pin_num);
     69a:	95 b3       	in	r25, 0x15	; 21
     69c:	80 95       	com	r24
     69e:	89 23       	and	r24, r25
     6a0:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     6a2:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTB,pin_num);
				  break;
				  case PC:
				  SET_BIT( DDRC,pin_num);
				  CLR_BIT(PORTC,pin_num);
				  break;
     6a4:	08 95       	ret
				  case PD:
				  SET_BIT( DDRD,pin_num);
     6a6:	41 b3       	in	r20, 0x11	; 17
     6a8:	21 e0       	ldi	r18, 0x01	; 1
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	b9 01       	movw	r22, r18
     6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <DIO_initpin+0xaa>
     6b0:	66 0f       	add	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	8a 95       	dec	r24
     6b6:	e2 f7       	brpl	.-8      	; 0x6b0 <DIO_initpin+0xa6>
     6b8:	cb 01       	movw	r24, r22
     6ba:	94 2f       	mov	r25, r20
     6bc:	98 2b       	or	r25, r24
     6be:	91 bb       	out	0x11, r25	; 17
				  CLR_BIT(PORTD,pin_num);
     6c0:	92 b3       	in	r25, 0x12	; 18
     6c2:	80 95       	com	r24
     6c4:	89 23       	and	r24, r25
     6c6:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     6c8:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTC,pin_num);
				  break;
				  case PD:
				  SET_BIT( DDRD,pin_num);
				  CLR_BIT(PORTD,pin_num);
				  break;
     6ca:	08 95       	ret
				  error = WRONG_PORT_NUMBER;
				  break;
			  }
			  break;
			  case INFREE:
			  switch(port)
     6cc:	91 30       	cpi	r25, 0x01	; 1
     6ce:	c9 f0       	breq	.+50     	; 0x702 <DIO_initpin+0xf8>
     6d0:	28 f0       	brcs	.+10     	; 0x6dc <DIO_initpin+0xd2>
     6d2:	92 30       	cpi	r25, 0x02	; 2
     6d4:	49 f1       	breq	.+82     	; 0x728 <DIO_initpin+0x11e>
     6d6:	93 30       	cpi	r25, 0x03	; 3
     6d8:	d1 f1       	breq	.+116    	; 0x74e <DIO_initpin+0x144>
     6da:	a4 c0       	rjmp	.+328    	; 0x824 <__DATA_REGION_LENGTH__+0x24>
			  {
				  case PA:
				  CLR_BIT(DDRA,pin_num);
     6dc:	4a b3       	in	r20, 0x1a	; 26
     6de:	21 e0       	ldi	r18, 0x01	; 1
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	b9 01       	movw	r22, r18
     6e4:	02 c0       	rjmp	.+4      	; 0x6ea <DIO_initpin+0xe0>
     6e6:	66 0f       	add	r22, r22
     6e8:	77 1f       	adc	r23, r23
     6ea:	8a 95       	dec	r24
     6ec:	e2 f7       	brpl	.-8      	; 0x6e6 <DIO_initpin+0xdc>
     6ee:	cb 01       	movw	r24, r22
     6f0:	80 95       	com	r24
     6f2:	94 2f       	mov	r25, r20
     6f4:	98 23       	and	r25, r24
     6f6:	9a bb       	out	0x1a, r25	; 26
				  CLR_BIT(PORTA,pin_num);
     6f8:	9b b3       	in	r25, 0x1b	; 27
     6fa:	89 23       	and	r24, r25
     6fc:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     6fe:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:
				  CLR_BIT(DDRA,pin_num);
				  CLR_BIT(PORTA,pin_num);
				  break;
     700:	08 95       	ret
				  case PB:
				  CLR_BIT(DDRB,pin_num);
     702:	47 b3       	in	r20, 0x17	; 23
     704:	21 e0       	ldi	r18, 0x01	; 1
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	b9 01       	movw	r22, r18
     70a:	02 c0       	rjmp	.+4      	; 0x710 <DIO_initpin+0x106>
     70c:	66 0f       	add	r22, r22
     70e:	77 1f       	adc	r23, r23
     710:	8a 95       	dec	r24
     712:	e2 f7       	brpl	.-8      	; 0x70c <DIO_initpin+0x102>
     714:	cb 01       	movw	r24, r22
     716:	80 95       	com	r24
     718:	94 2f       	mov	r25, r20
     71a:	98 23       	and	r25, r24
     71c:	97 bb       	out	0x17, r25	; 23
				  CLR_BIT(PORTB,pin_num);
     71e:	98 b3       	in	r25, 0x18	; 24
     720:	89 23       	and	r24, r25
     722:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     724:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTA,pin_num);
				  break;
				  case PB:
				  CLR_BIT(DDRB,pin_num);
				  CLR_BIT(PORTB,pin_num);
				  break;
     726:	08 95       	ret
				  case PC:
				  CLR_BIT(DDRC,pin_num);
     728:	44 b3       	in	r20, 0x14	; 20
     72a:	21 e0       	ldi	r18, 0x01	; 1
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	b9 01       	movw	r22, r18
     730:	02 c0       	rjmp	.+4      	; 0x736 <DIO_initpin+0x12c>
     732:	66 0f       	add	r22, r22
     734:	77 1f       	adc	r23, r23
     736:	8a 95       	dec	r24
     738:	e2 f7       	brpl	.-8      	; 0x732 <DIO_initpin+0x128>
     73a:	cb 01       	movw	r24, r22
     73c:	80 95       	com	r24
     73e:	94 2f       	mov	r25, r20
     740:	98 23       	and	r25, r24
     742:	94 bb       	out	0x14, r25	; 20
				  CLR_BIT(PORTC,pin_num);
     744:	95 b3       	in	r25, 0x15	; 21
     746:	89 23       	and	r24, r25
     748:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     74a:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTB,pin_num);
				  break;
				  case PC:
				  CLR_BIT(DDRC,pin_num);
				  CLR_BIT(PORTC,pin_num);
				  break;
     74c:	08 95       	ret
				  case PD:
				  CLR_BIT(DDRD,pin_num);
     74e:	41 b3       	in	r20, 0x11	; 17
     750:	21 e0       	ldi	r18, 0x01	; 1
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	b9 01       	movw	r22, r18
     756:	02 c0       	rjmp	.+4      	; 0x75c <DIO_initpin+0x152>
     758:	66 0f       	add	r22, r22
     75a:	77 1f       	adc	r23, r23
     75c:	8a 95       	dec	r24
     75e:	e2 f7       	brpl	.-8      	; 0x758 <DIO_initpin+0x14e>
     760:	cb 01       	movw	r24, r22
     762:	80 95       	com	r24
     764:	94 2f       	mov	r25, r20
     766:	98 23       	and	r25, r24
     768:	91 bb       	out	0x11, r25	; 17
				  CLR_BIT(PORTD,pin_num);
     76a:	92 b3       	in	r25, 0x12	; 18
     76c:	89 23       	and	r24, r25
     76e:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     770:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTC,pin_num);
				  break;
				  case PD:
				  CLR_BIT(DDRD,pin_num);
				  CLR_BIT(PORTD,pin_num);
				  break;
     772:	08 95       	ret
				  break;
			  }
			  break;

			  case INPULL:
			  switch(port)
     774:	91 30       	cpi	r25, 0x01	; 1
     776:	c9 f0       	breq	.+50     	; 0x7aa <DIO_initpin+0x1a0>
     778:	28 f0       	brcs	.+10     	; 0x784 <DIO_initpin+0x17a>
     77a:	92 30       	cpi	r25, 0x02	; 2
     77c:	49 f1       	breq	.+82     	; 0x7d0 <DIO_initpin+0x1c6>
     77e:	93 30       	cpi	r25, 0x03	; 3
     780:	d1 f1       	breq	.+116    	; 0x7f6 <DIO_initpin+0x1ec>
     782:	52 c0       	rjmp	.+164    	; 0x828 <__DATA_REGION_LENGTH__+0x28>
			  {
				  case PA:
				  CLR_BIT(DDRA,pin_num);
     784:	4a b3       	in	r20, 0x1a	; 26
     786:	21 e0       	ldi	r18, 0x01	; 1
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	b9 01       	movw	r22, r18
     78c:	02 c0       	rjmp	.+4      	; 0x792 <DIO_initpin+0x188>
     78e:	66 0f       	add	r22, r22
     790:	77 1f       	adc	r23, r23
     792:	8a 95       	dec	r24
     794:	e2 f7       	brpl	.-8      	; 0x78e <DIO_initpin+0x184>
     796:	cb 01       	movw	r24, r22
     798:	96 2f       	mov	r25, r22
     79a:	90 95       	com	r25
     79c:	94 23       	and	r25, r20
     79e:	9a bb       	out	0x1a, r25	; 26
				  SET_BIT(PORTA,pin_num);
     7a0:	9b b3       	in	r25, 0x1b	; 27
     7a2:	89 2b       	or	r24, r25
     7a4:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     7a6:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:
				  CLR_BIT(DDRA,pin_num);
				  SET_BIT(PORTA,pin_num);
				  break;
     7a8:	08 95       	ret
				  case PB:
				  CLR_BIT(DDRB,pin_num);
     7aa:	47 b3       	in	r20, 0x17	; 23
     7ac:	21 e0       	ldi	r18, 0x01	; 1
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	b9 01       	movw	r22, r18
     7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <DIO_initpin+0x1ae>
     7b4:	66 0f       	add	r22, r22
     7b6:	77 1f       	adc	r23, r23
     7b8:	8a 95       	dec	r24
     7ba:	e2 f7       	brpl	.-8      	; 0x7b4 <DIO_initpin+0x1aa>
     7bc:	cb 01       	movw	r24, r22
     7be:	96 2f       	mov	r25, r22
     7c0:	90 95       	com	r25
     7c2:	94 23       	and	r25, r20
     7c4:	97 bb       	out	0x17, r25	; 23
				  SET_BIT(PORTB,pin_num);
     7c6:	98 b3       	in	r25, 0x18	; 24
     7c8:	89 2b       	or	r24, r25
     7ca:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     7cc:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTA,pin_num);
				  break;
				  case PB:
				  CLR_BIT(DDRB,pin_num);
				  SET_BIT(PORTB,pin_num);
				  break;
     7ce:	08 95       	ret
				  case PC:
				  CLR_BIT(DDRC,pin_num);
     7d0:	44 b3       	in	r20, 0x14	; 20
     7d2:	21 e0       	ldi	r18, 0x01	; 1
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	b9 01       	movw	r22, r18
     7d8:	02 c0       	rjmp	.+4      	; 0x7de <DIO_initpin+0x1d4>
     7da:	66 0f       	add	r22, r22
     7dc:	77 1f       	adc	r23, r23
     7de:	8a 95       	dec	r24
     7e0:	e2 f7       	brpl	.-8      	; 0x7da <DIO_initpin+0x1d0>
     7e2:	cb 01       	movw	r24, r22
     7e4:	96 2f       	mov	r25, r22
     7e6:	90 95       	com	r25
     7e8:	94 23       	and	r25, r20
     7ea:	94 bb       	out	0x14, r25	; 20
				  SET_BIT(PORTC,pin_num);
     7ec:	95 b3       	in	r25, 0x15	; 21
     7ee:	89 2b       	or	r24, r25
     7f0:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     7f2:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTB,pin_num);
				  break;
				  case PC:
				  CLR_BIT(DDRC,pin_num);
				  SET_BIT(PORTC,pin_num);
				  break;
     7f4:	08 95       	ret
				  case PD:
				  CLR_BIT(DDRD,pin_num);
     7f6:	41 b3       	in	r20, 0x11	; 17
     7f8:	21 e0       	ldi	r18, 0x01	; 1
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	b9 01       	movw	r22, r18
     7fe:	02 c0       	rjmp	.+4      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     800:	66 0f       	add	r22, r22
     802:	77 1f       	adc	r23, r23
     804:	8a 95       	dec	r24
     806:	e2 f7       	brpl	.-8      	; 0x800 <__DATA_REGION_LENGTH__>
     808:	cb 01       	movw	r24, r22
     80a:	96 2f       	mov	r25, r22
     80c:	90 95       	com	r25
     80e:	94 23       	and	r25, r20
     810:	91 bb       	out	0x11, r25	; 17
				  SET_BIT(PORTD,pin_num);
     812:	92 b3       	in	r25, 0x12	; 18
     814:	89 2b       	or	r24, r25
     816:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     818:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTC,pin_num);
				  break;
				  case PD:
				  CLR_BIT(DDRD,pin_num);
				  SET_BIT(PORTD,pin_num);
				  break;
     81a:	08 95       	ret
				  error = WRONG_PORT_NUMBER;
				  break;
			  }
			  break;
			  default:
			  error = WRONG_PORT_NUMBER;
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	08 95       	ret
				  case PD:
				  SET_BIT( DDRD,pin_num);
				  CLR_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	08 95       	ret
				  case PD:
				  CLR_BIT(DDRD,pin_num);
				  CLR_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	08 95       	ret
				  case PD:
				  CLR_BIT(DDRD,pin_num);
				  SET_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     828:	81 e0       	ldi	r24, 0x01	; 1
	  {
		  error = WRONG_PIN_NUMBER;
	  }
	  return error;

  }
     82a:	08 95       	ret

0000082c <DIO_Init_All>:
	    return error;
    }
//////////////////////////////////////////////////////////////////////*/
//pin MODE
  void DIO_Init_All(void)
  {
     82c:	cf 93       	push	r28
	  DIO_Pin_type i;
	  for (i=PINA0; i<TOTAL_PINS; i++)
     82e:	c0 e0       	ldi	r28, 0x00	; 0
     830:	09 c0       	rjmp	.+18     	; 0x844 <DIO_Init_All+0x18>
	  {
		  DIO_initpin(i,PinsStatusArray[i]);
     832:	ec 2f       	mov	r30, r28
     834:	f0 e0       	ldi	r31, 0x00	; 0
     836:	e6 56       	subi	r30, 0x66	; 102
     838:	ff 4f       	sbci	r31, 0xFF	; 255
     83a:	60 81       	ld	r22, Z
     83c:	8c 2f       	mov	r24, r28
     83e:	0e 94 05 03 	call	0x60a	; 0x60a <DIO_initpin>
//////////////////////////////////////////////////////////////////////*/
//pin MODE
  void DIO_Init_All(void)
  {
	  DIO_Pin_type i;
	  for (i=PINA0; i<TOTAL_PINS; i++)
     842:	cf 5f       	subi	r28, 0xFF	; 255
     844:	c0 32       	cpi	r28, 0x20	; 32
     846:	a8 f3       	brcs	.-22     	; 0x832 <DIO_Init_All+0x6>
	  {
		  DIO_initpin(i,PinsStatusArray[i]);
	  }
  }
     848:	cf 91       	pop	r28
     84a:	08 95       	ret

0000084c <DIO_writepin>:
	  return error;

  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
     84c:	98 2f       	mov	r25, r24
     84e:	96 95       	lsr	r25
     850:	96 95       	lsr	r25
     852:	96 95       	lsr	r25
	  u8 pin_num =pin % 8;
     854:	87 70       	andi	r24, 0x07	; 7
	  en_dioError_t error= DIO_OK;
	  if (pin_num<8)
	  {
		  switch (volt)
     856:	66 23       	and	r22, r22
     858:	09 f4       	brne	.+2      	; 0x85c <DIO_writepin+0x10>
     85a:	43 c0       	rjmp	.+134    	; 0x8e2 <__stack+0x83>
     85c:	61 30       	cpi	r22, 0x01	; 1
     85e:	09 f0       	breq	.+2      	; 0x862 <__stack+0x3>
     860:	84 c0       	rjmp	.+264    	; 0x96a <__stack+0x10b>
		  {
			  case HIGH:

			  switch(port)
     862:	91 30       	cpi	r25, 0x01	; 1
     864:	a1 f0       	breq	.+40     	; 0x88e <__stack+0x2f>
     866:	28 f0       	brcs	.+10     	; 0x872 <__stack+0x13>
     868:	92 30       	cpi	r25, 0x02	; 2
     86a:	f9 f0       	breq	.+62     	; 0x8aa <__stack+0x4b>
     86c:	93 30       	cpi	r25, 0x03	; 3
     86e:	59 f1       	breq	.+86     	; 0x8c6 <__stack+0x67>
     870:	7e c0       	rjmp	.+252    	; 0x96e <__stack+0x10f>
			  {
				  case PA:

				  SET_BIT(PORTA,pin_num);
     872:	4b b3       	in	r20, 0x1b	; 27
     874:	21 e0       	ldi	r18, 0x01	; 1
     876:	30 e0       	ldi	r19, 0x00	; 0
     878:	b9 01       	movw	r22, r18
     87a:	02 c0       	rjmp	.+4      	; 0x880 <__stack+0x21>
     87c:	66 0f       	add	r22, r22
     87e:	77 1f       	adc	r23, r23
     880:	8a 95       	dec	r24
     882:	e2 f7       	brpl	.-8      	; 0x87c <__stack+0x1d>
     884:	cb 01       	movw	r24, r22
     886:	84 2b       	or	r24, r20
     888:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     88a:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:

				  SET_BIT(PORTA,pin_num);
				  break;
     88c:	08 95       	ret
				  case PB:

				  SET_BIT(PORTB,pin_num);
     88e:	48 b3       	in	r20, 0x18	; 24
     890:	21 e0       	ldi	r18, 0x01	; 1
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	b9 01       	movw	r22, r18
     896:	02 c0       	rjmp	.+4      	; 0x89c <__stack+0x3d>
     898:	66 0f       	add	r22, r22
     89a:	77 1f       	adc	r23, r23
     89c:	8a 95       	dec	r24
     89e:	e2 f7       	brpl	.-8      	; 0x898 <__stack+0x39>
     8a0:	cb 01       	movw	r24, r22
     8a2:	84 2b       	or	r24, r20
     8a4:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     8a6:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTA,pin_num);
				  break;
				  case PB:

				  SET_BIT(PORTB,pin_num);
				  break;
     8a8:	08 95       	ret
				  case PC:

				  SET_BIT(PORTC,pin_num);
     8aa:	45 b3       	in	r20, 0x15	; 21
     8ac:	21 e0       	ldi	r18, 0x01	; 1
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	b9 01       	movw	r22, r18
     8b2:	02 c0       	rjmp	.+4      	; 0x8b8 <__stack+0x59>
     8b4:	66 0f       	add	r22, r22
     8b6:	77 1f       	adc	r23, r23
     8b8:	8a 95       	dec	r24
     8ba:	e2 f7       	brpl	.-8      	; 0x8b4 <__stack+0x55>
     8bc:	cb 01       	movw	r24, r22
     8be:	84 2b       	or	r24, r20
     8c0:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     8c2:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTB,pin_num);
				  break;
				  case PC:

				  SET_BIT(PORTC,pin_num);
				  break;
     8c4:	08 95       	ret
				  case PD:

				  SET_BIT(PORTD,pin_num);
     8c6:	42 b3       	in	r20, 0x12	; 18
     8c8:	21 e0       	ldi	r18, 0x01	; 1
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	b9 01       	movw	r22, r18
     8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <__stack+0x75>
     8d0:	66 0f       	add	r22, r22
     8d2:	77 1f       	adc	r23, r23
     8d4:	8a 95       	dec	r24
     8d6:	e2 f7       	brpl	.-8      	; 0x8d0 <__stack+0x71>
     8d8:	cb 01       	movw	r24, r22
     8da:	84 2b       	or	r24, r20
     8dc:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     8de:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTC,pin_num);
				  break;
				  case PD:

				  SET_BIT(PORTD,pin_num);
				  break;
     8e0:	08 95       	ret
			  }
			  break;

			  case LOW:

			  switch(port)
     8e2:	91 30       	cpi	r25, 0x01	; 1
     8e4:	a9 f0       	breq	.+42     	; 0x910 <__stack+0xb1>
     8e6:	28 f0       	brcs	.+10     	; 0x8f2 <__stack+0x93>
     8e8:	92 30       	cpi	r25, 0x02	; 2
     8ea:	09 f1       	breq	.+66     	; 0x92e <__stack+0xcf>
     8ec:	93 30       	cpi	r25, 0x03	; 3
     8ee:	71 f1       	breq	.+92     	; 0x94c <__stack+0xed>
     8f0:	40 c0       	rjmp	.+128    	; 0x972 <__stack+0x113>
			  {
				  case PA:

				  CLR_BIT(PORTA,pin_num);
     8f2:	4b b3       	in	r20, 0x1b	; 27
     8f4:	21 e0       	ldi	r18, 0x01	; 1
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	b9 01       	movw	r22, r18
     8fa:	02 c0       	rjmp	.+4      	; 0x900 <__stack+0xa1>
     8fc:	66 0f       	add	r22, r22
     8fe:	77 1f       	adc	r23, r23
     900:	8a 95       	dec	r24
     902:	e2 f7       	brpl	.-8      	; 0x8fc <__stack+0x9d>
     904:	cb 01       	movw	r24, r22
     906:	80 95       	com	r24
     908:	84 23       	and	r24, r20
     90a:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     90c:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:

				  CLR_BIT(PORTA,pin_num);
				  break;
     90e:	08 95       	ret
				  case PB:

				  CLR_BIT(PORTB,pin_num);
     910:	48 b3       	in	r20, 0x18	; 24
     912:	21 e0       	ldi	r18, 0x01	; 1
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	b9 01       	movw	r22, r18
     918:	02 c0       	rjmp	.+4      	; 0x91e <__stack+0xbf>
     91a:	66 0f       	add	r22, r22
     91c:	77 1f       	adc	r23, r23
     91e:	8a 95       	dec	r24
     920:	e2 f7       	brpl	.-8      	; 0x91a <__stack+0xbb>
     922:	cb 01       	movw	r24, r22
     924:	80 95       	com	r24
     926:	84 23       	and	r24, r20
     928:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     92a:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTA,pin_num);
				  break;
				  case PB:

				  CLR_BIT(PORTB,pin_num);
				  break;
     92c:	08 95       	ret
				  case PC:

				  CLR_BIT(PORTC,pin_num);
     92e:	45 b3       	in	r20, 0x15	; 21
     930:	21 e0       	ldi	r18, 0x01	; 1
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	b9 01       	movw	r22, r18
     936:	02 c0       	rjmp	.+4      	; 0x93c <__stack+0xdd>
     938:	66 0f       	add	r22, r22
     93a:	77 1f       	adc	r23, r23
     93c:	8a 95       	dec	r24
     93e:	e2 f7       	brpl	.-8      	; 0x938 <__stack+0xd9>
     940:	cb 01       	movw	r24, r22
     942:	80 95       	com	r24
     944:	84 23       	and	r24, r20
     946:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     948:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTB,pin_num);
				  break;
				  case PC:

				  CLR_BIT(PORTC,pin_num);
				  break;
     94a:	08 95       	ret
				  case PD:

				  CLR_BIT(PORTD,pin_num);
     94c:	42 b3       	in	r20, 0x12	; 18
     94e:	21 e0       	ldi	r18, 0x01	; 1
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	b9 01       	movw	r22, r18
     954:	02 c0       	rjmp	.+4      	; 0x95a <__stack+0xfb>
     956:	66 0f       	add	r22, r22
     958:	77 1f       	adc	r23, r23
     95a:	8a 95       	dec	r24
     95c:	e2 f7       	brpl	.-8      	; 0x956 <__stack+0xf7>
     95e:	cb 01       	movw	r24, r22
     960:	80 95       	com	r24
     962:	84 23       	and	r24, r20
     964:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     966:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTC,pin_num);
				  break;
				  case PD:

				  CLR_BIT(PORTD,pin_num);
				  break;
     968:	08 95       	ret
			  }

			  break;

			  default:
			  error = WRONG_VALUE;
     96a:	83 e0       	ldi	r24, 0x03	; 3
     96c:	08 95       	ret
				  case PD:

				  SET_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	08 95       	ret
				  case PD:

				  CLR_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     972:	81 e0       	ldi	r24, 0x01	; 1
	  {
		  error = WRONG_PIN_NUMBER;
	  }
	  return error;

  }
     974:	08 95       	ret

00000976 <__vector_1>:




ISR(INT0_vect)
{
     976:	1f 92       	push	r1
     978:	0f 92       	push	r0
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	0f 92       	push	r0
     97e:	11 24       	eor	r1, r1
     980:	2f 93       	push	r18
     982:	3f 93       	push	r19
     984:	4f 93       	push	r20
     986:	5f 93       	push	r21
     988:	6f 93       	push	r22
     98a:	7f 93       	push	r23
     98c:	8f 93       	push	r24
     98e:	9f 93       	push	r25
     990:	af 93       	push	r26
     992:	bf 93       	push	r27
     994:	ef 93       	push	r30
     996:	ff 93       	push	r31
	if (INT0_Fptr!=NULLPTR)
     998:	e0 91 d7 00 	lds	r30, 0x00D7	; 0x8000d7 <INT0_Fptr>
     99c:	f0 91 d8 00 	lds	r31, 0x00D8	; 0x8000d8 <INT0_Fptr+0x1>
     9a0:	30 97       	sbiw	r30, 0x00	; 0
     9a2:	09 f0       	breq	.+2      	; 0x9a6 <__vector_1+0x30>
	{
		INT0_Fptr();
     9a4:	09 95       	icall
	}
}
     9a6:	ff 91       	pop	r31
     9a8:	ef 91       	pop	r30
     9aa:	bf 91       	pop	r27
     9ac:	af 91       	pop	r26
     9ae:	9f 91       	pop	r25
     9b0:	8f 91       	pop	r24
     9b2:	7f 91       	pop	r23
     9b4:	6f 91       	pop	r22
     9b6:	5f 91       	pop	r21
     9b8:	4f 91       	pop	r20
     9ba:	3f 91       	pop	r19
     9bc:	2f 91       	pop	r18
     9be:	0f 90       	pop	r0
     9c0:	0f be       	out	0x3f, r0	; 63
     9c2:	0f 90       	pop	r0
     9c4:	1f 90       	pop	r1
     9c6:	18 95       	reti

000009c8 <__vector_2>:
ISR(INT1_vect)
{
     9c8:	1f 92       	push	r1
     9ca:	0f 92       	push	r0
     9cc:	0f b6       	in	r0, 0x3f	; 63
     9ce:	0f 92       	push	r0
     9d0:	11 24       	eor	r1, r1
     9d2:	2f 93       	push	r18
     9d4:	3f 93       	push	r19
     9d6:	4f 93       	push	r20
     9d8:	5f 93       	push	r21
     9da:	6f 93       	push	r22
     9dc:	7f 93       	push	r23
     9de:	8f 93       	push	r24
     9e0:	9f 93       	push	r25
     9e2:	af 93       	push	r26
     9e4:	bf 93       	push	r27
     9e6:	ef 93       	push	r30
     9e8:	ff 93       	push	r31
	if (INT1_Fptr!=NULLPTR)
     9ea:	e0 91 d5 00 	lds	r30, 0x00D5	; 0x8000d5 <INT1_Fptr>
     9ee:	f0 91 d6 00 	lds	r31, 0x00D6	; 0x8000d6 <INT1_Fptr+0x1>
     9f2:	30 97       	sbiw	r30, 0x00	; 0
     9f4:	09 f0       	breq	.+2      	; 0x9f8 <__vector_2+0x30>
	{
		INT1_Fptr();
     9f6:	09 95       	icall
	}
}
     9f8:	ff 91       	pop	r31
     9fa:	ef 91       	pop	r30
     9fc:	bf 91       	pop	r27
     9fe:	af 91       	pop	r26
     a00:	9f 91       	pop	r25
     a02:	8f 91       	pop	r24
     a04:	7f 91       	pop	r23
     a06:	6f 91       	pop	r22
     a08:	5f 91       	pop	r21
     a0a:	4f 91       	pop	r20
     a0c:	3f 91       	pop	r19
     a0e:	2f 91       	pop	r18
     a10:	0f 90       	pop	r0
     a12:	0f be       	out	0x3f, r0	; 63
     a14:	0f 90       	pop	r0
     a16:	1f 90       	pop	r1
     a18:	18 95       	reti

00000a1a <__vector_3>:
ISR(INT2_vect)
{
     a1a:	1f 92       	push	r1
     a1c:	0f 92       	push	r0
     a1e:	0f b6       	in	r0, 0x3f	; 63
     a20:	0f 92       	push	r0
     a22:	11 24       	eor	r1, r1
     a24:	2f 93       	push	r18
     a26:	3f 93       	push	r19
     a28:	4f 93       	push	r20
     a2a:	5f 93       	push	r21
     a2c:	6f 93       	push	r22
     a2e:	7f 93       	push	r23
     a30:	8f 93       	push	r24
     a32:	9f 93       	push	r25
     a34:	af 93       	push	r26
     a36:	bf 93       	push	r27
     a38:	ef 93       	push	r30
     a3a:	ff 93       	push	r31
	if (INT2_Fptr!=NULLPTR)
     a3c:	e0 91 d3 00 	lds	r30, 0x00D3	; 0x8000d3 <INT2_Fptr>
     a40:	f0 91 d4 00 	lds	r31, 0x00D4	; 0x8000d4 <INT2_Fptr+0x1>
     a44:	30 97       	sbiw	r30, 0x00	; 0
     a46:	09 f0       	breq	.+2      	; 0xa4a <__vector_3+0x30>
	{
		INT2_Fptr();
     a48:	09 95       	icall
	}
}
     a4a:	ff 91       	pop	r31
     a4c:	ef 91       	pop	r30
     a4e:	bf 91       	pop	r27
     a50:	af 91       	pop	r26
     a52:	9f 91       	pop	r25
     a54:	8f 91       	pop	r24
     a56:	7f 91       	pop	r23
     a58:	6f 91       	pop	r22
     a5a:	5f 91       	pop	r21
     a5c:	4f 91       	pop	r20
     a5e:	3f 91       	pop	r19
     a60:	2f 91       	pop	r18
     a62:	0f 90       	pop	r0
     a64:	0f be       	out	0x3f, r0	; 63
     a66:	0f 90       	pop	r0
     a68:	1f 90       	pop	r1
     a6a:	18 95       	reti

00000a6c <UART_Init>:
	{
		LCD_SetCursor(1,i);
		LCD_WriteChar(u8_g_RX_STR[i]);
		
		i++;
		RX_flag--;
     a6c:	10 bc       	out	0x20, r1	; 32
     a6e:	83 e3       	ldi	r24, 0x33	; 51
     a70:	89 b9       	out	0x09, r24	; 9
     a72:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <UART_cfg>
     a76:	81 30       	cpi	r24, 0x01	; 1
     a78:	41 f0       	breq	.+16     	; 0xa8a <UART_Init+0x1e>
     a7a:	18 f0       	brcs	.+6      	; 0xa82 <UART_Init+0x16>
     a7c:	82 30       	cpi	r24, 0x02	; 2
     a7e:	49 f0       	breq	.+18     	; 0xa92 <UART_Init+0x26>
     a80:	0a c0       	rjmp	.+20     	; 0xa96 <UART_Init+0x2a>
     a82:	8a b1       	in	r24, 0x0a	; 10
     a84:	88 60       	ori	r24, 0x08	; 8
     a86:	8a b9       	out	0x0a, r24	; 10
     a88:	06 c0       	rjmp	.+12     	; 0xa96 <UART_Init+0x2a>
     a8a:	8a b1       	in	r24, 0x0a	; 10
     a8c:	80 61       	ori	r24, 0x10	; 16
     a8e:	8a b9       	out	0x0a, r24	; 10
     a90:	02 c0       	rjmp	.+4      	; 0xa96 <UART_Init+0x2a>
     a92:	88 e1       	ldi	r24, 0x18	; 24
     a94:	8a b9       	out	0x0a, r24	; 10
     a96:	80 b5       	in	r24, 0x20	; 32
     a98:	84 60       	ori	r24, 0x04	; 4
     a9a:	80 bd       	out	0x20, r24	; 32
     a9c:	80 b5       	in	r24, 0x20	; 32
     a9e:	82 60       	ori	r24, 0x02	; 2
     aa0:	80 bd       	out	0x20, r24	; 32
     aa2:	80 b5       	in	r24, 0x20	; 32
     aa4:	8f 7d       	andi	r24, 0xDF	; 223
     aa6:	80 bd       	out	0x20, r24	; 32
     aa8:	80 b5       	in	r24, 0x20	; 32
     aaa:	8f 7e       	andi	r24, 0xEF	; 239
     aac:	80 bd       	out	0x20, r24	; 32
     aae:	80 b5       	in	r24, 0x20	; 32
     ab0:	87 7f       	andi	r24, 0xF7	; 247
     ab2:	80 bd       	out	0x20, r24	; 32
     ab4:	08 95       	ret

00000ab6 <UART_RX_InterruptEnable>:
     ab6:	8a b1       	in	r24, 0x0a	; 10
     ab8:	80 68       	ori	r24, 0x80	; 128
     aba:	8a b9       	out	0x0a, r24	; 10
     abc:	08 95       	ret

00000abe <UART_RX_SetCallBack>:
     abe:	90 93 df 00 	sts	0x00DF, r25	; 0x8000df <UART_RX_Fptr+0x1>
     ac2:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <UART_RX_Fptr>
     ac6:	08 95       	ret

00000ac8 <UART_RecieveByteNoBlock>:
     ac8:	2c b1       	in	r18, 0x0c	; 12
     aca:	fc 01       	movw	r30, r24
     acc:	20 83       	st	Z, r18
     ace:	08 95       	ret

00000ad0 <__vector_13>:
     ad0:	1f 92       	push	r1
     ad2:	0f 92       	push	r0
     ad4:	0f b6       	in	r0, 0x3f	; 63
     ad6:	0f 92       	push	r0
     ad8:	11 24       	eor	r1, r1
     ada:	2f 93       	push	r18
     adc:	3f 93       	push	r19
     ade:	4f 93       	push	r20
     ae0:	5f 93       	push	r21
     ae2:	6f 93       	push	r22
     ae4:	7f 93       	push	r23
     ae6:	8f 93       	push	r24
     ae8:	9f 93       	push	r25
     aea:	af 93       	push	r26
     aec:	bf 93       	push	r27
     aee:	ef 93       	push	r30
     af0:	ff 93       	push	r31
     af2:	e0 91 de 00 	lds	r30, 0x00DE	; 0x8000de <UART_RX_Fptr>
     af6:	f0 91 df 00 	lds	r31, 0x00DF	; 0x8000df <UART_RX_Fptr+0x1>
     afa:	30 97       	sbiw	r30, 0x00	; 0
     afc:	09 f0       	breq	.+2      	; 0xb00 <__vector_13+0x30>
     afe:	09 95       	icall
     b00:	ff 91       	pop	r31
     b02:	ef 91       	pop	r30
     b04:	bf 91       	pop	r27
     b06:	af 91       	pop	r26
     b08:	9f 91       	pop	r25
     b0a:	8f 91       	pop	r24
     b0c:	7f 91       	pop	r23
     b0e:	6f 91       	pop	r22
     b10:	5f 91       	pop	r21
     b12:	4f 91       	pop	r20
     b14:	3f 91       	pop	r19
     b16:	2f 91       	pop	r18
     b18:	0f 90       	pop	r0
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	0f 90       	pop	r0
     b1e:	1f 90       	pop	r1
     b20:	18 95       	reti

00000b22 <__vector_15>:
     b22:	1f 92       	push	r1
     b24:	0f 92       	push	r0
     b26:	0f b6       	in	r0, 0x3f	; 63
     b28:	0f 92       	push	r0
     b2a:	11 24       	eor	r1, r1
     b2c:	2f 93       	push	r18
     b2e:	3f 93       	push	r19
     b30:	4f 93       	push	r20
     b32:	5f 93       	push	r21
     b34:	6f 93       	push	r22
     b36:	7f 93       	push	r23
     b38:	8f 93       	push	r24
     b3a:	9f 93       	push	r25
     b3c:	af 93       	push	r26
     b3e:	bf 93       	push	r27
     b40:	ef 93       	push	r30
     b42:	ff 93       	push	r31
     b44:	e0 91 dc 00 	lds	r30, 0x00DC	; 0x8000dc <UART_TX_Fptr>
     b48:	f0 91 dd 00 	lds	r31, 0x00DD	; 0x8000dd <UART_TX_Fptr+0x1>
     b4c:	30 97       	sbiw	r30, 0x00	; 0
     b4e:	09 f0       	breq	.+2      	; 0xb52 <__vector_15+0x30>
     b50:	09 95       	icall
     b52:	ff 91       	pop	r31
     b54:	ef 91       	pop	r30
     b56:	bf 91       	pop	r27
     b58:	af 91       	pop	r26
     b5a:	9f 91       	pop	r25
     b5c:	8f 91       	pop	r24
     b5e:	7f 91       	pop	r23
     b60:	6f 91       	pop	r22
     b62:	5f 91       	pop	r21
     b64:	4f 91       	pop	r20
     b66:	3f 91       	pop	r19
     b68:	2f 91       	pop	r18
     b6a:	0f 90       	pop	r0
     b6c:	0f be       	out	0x3f, r0	; 63
     b6e:	0f 90       	pop	r0
     b70:	1f 90       	pop	r1
     b72:	18 95       	reti

00000b74 <UART_RX_FUN>:
     b74:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <i.1928>
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	87 5a       	subi	r24, 0xA7	; 167
     b7c:	9e 4f       	sbci	r25, 0xFE	; 254
     b7e:	0e 94 64 05 	call	0xac8	; 0xac8 <UART_RecieveByteNoBlock>
     b82:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <i.1928>
     b86:	8f 5f       	subi	r24, 0xFF	; 255
     b88:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <i.1928>
     b8c:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <RX_flag>
     b90:	8f 5f       	subi	r24, 0xFF	; 255
     b92:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <RX_flag>
     b96:	08 95       	ret

00000b98 <UART_ReceiveStringAshync_V3>:
}



en_UARTError_t UART_ReceiveStringAshync_V3 (u8 *str) //just for testing
{
     b98:	9c 01       	movw	r18, r24
	static u8 u8StringCounter=0,u8ReceiveCounter=0;
	 en_UARTError_t status=0;
	if (RX_flag>0)
     b9a:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <RX_flag>
     b9e:	88 23       	and	r24, r24
     ba0:	99 f1       	breq	.+102    	; 0xc08 <UART_ReceiveStringAshync_V3+0x70>
	{
		if (u8_g_RX_STR[u8ReceiveCounter]==13) //rec str
     ba2:	90 91 da 00 	lds	r25, 0x00DA	; 0x8000da <u8ReceiveCounter.1941>
     ba6:	49 2f       	mov	r20, r25
     ba8:	50 e0       	ldi	r21, 0x00	; 0
     baa:	fa 01       	movw	r30, r20
     bac:	e7 5a       	subi	r30, 0xA7	; 167
     bae:	fe 4f       	sbci	r31, 0xFE	; 254
     bb0:	80 81       	ld	r24, Z
     bb2:	8d 30       	cpi	r24, 0x0D	; 13
     bb4:	91 f4       	brne	.+36     	; 0xbda <UART_ReceiveStringAshync_V3+0x42>
		{    
			str[u8StringCounter]=0;
     bb6:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <u8StringCounter.1940>
     bba:	f9 01       	movw	r30, r18
     bbc:	e8 0f       	add	r30, r24
     bbe:	f1 1d       	adc	r31, r1
     bc0:	10 82       	st	Z, r1
			u8StringCounter=0;
     bc2:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <u8StringCounter.1940>
			u8ReceiveCounter++;
     bc6:	9f 5f       	subi	r25, 0xFF	; 255
     bc8:	90 93 da 00 	sts	0x00DA, r25	; 0x8000da <u8ReceiveCounter.1941>
			RX_flag--;
     bcc:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <RX_flag>
     bd0:	81 50       	subi	r24, 0x01	; 1
     bd2:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <RX_flag>
			//TGL_BIT(PORTB,0);
			status = UART_FREE;     //string complete
     bd6:	88 e0       	ldi	r24, 0x08	; 8
     bd8:	08 95       	ret
		}
      else  //rec byte 
	  {
		 
		 str[u8StringCounter] = u8_g_RX_STR[u8ReceiveCounter] ;
     bda:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <u8StringCounter.1940>
     bde:	f9 01       	movw	r30, r18
     be0:	e8 0f       	add	r30, r24
     be2:	f1 1d       	adc	r31, r1
     be4:	da 01       	movw	r26, r20
     be6:	a7 5a       	subi	r26, 0xA7	; 167
     be8:	be 4f       	sbci	r27, 0xFE	; 254
     bea:	4c 91       	ld	r20, X
     bec:	40 83       	st	Z, r20
			 
//      	  LCD_SetCursor(1,u8StringCounter);
// 		  LCD_WriteChar(str[u8StringCounter]);
// 		  LCD_WriteString("   ");  
		 	u8StringCounter++;
     bee:	8f 5f       	subi	r24, 0xFF	; 255
     bf0:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <u8StringCounter.1940>
			u8ReceiveCounter++;
     bf4:	9f 5f       	subi	r25, 0xFF	; 255
     bf6:	90 93 da 00 	sts	0x00DA, r25	; 0x8000da <u8ReceiveCounter.1941>
			
		 	RX_flag--;  
     bfa:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <RX_flag>
     bfe:	81 50       	subi	r24, 0x01	; 1
     c00:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <RX_flag>
		    status=UART_RECIEVEING;    //receive string 
     c04:	89 e0       	ldi	r24, 0x09	; 9
     c06:	08 95       	ret


en_UARTError_t UART_ReceiveStringAshync_V3 (u8 *str) //just for testing
{
	static u8 u8StringCounter=0,u8ReceiveCounter=0;
	 en_UARTError_t status=0;
     c08:	80 e0       	ldi	r24, 0x00	; 0

	}
	
	return status;
	
}
     c0a:	08 95       	ret

00000c0c <__mulsi3>:
     c0c:	db 01       	movw	r26, r22
     c0e:	8f 93       	push	r24
     c10:	9f 93       	push	r25
     c12:	0e 94 25 06 	call	0xc4a	; 0xc4a <__muluhisi3>
     c16:	bf 91       	pop	r27
     c18:	af 91       	pop	r26
     c1a:	a2 9f       	mul	r26, r18
     c1c:	80 0d       	add	r24, r0
     c1e:	91 1d       	adc	r25, r1
     c20:	a3 9f       	mul	r26, r19
     c22:	90 0d       	add	r25, r0
     c24:	b2 9f       	mul	r27, r18
     c26:	90 0d       	add	r25, r0
     c28:	11 24       	eor	r1, r1
     c2a:	08 95       	ret

00000c2c <__umulhisi3>:
     c2c:	a2 9f       	mul	r26, r18
     c2e:	b0 01       	movw	r22, r0
     c30:	b3 9f       	mul	r27, r19
     c32:	c0 01       	movw	r24, r0
     c34:	a3 9f       	mul	r26, r19
     c36:	70 0d       	add	r23, r0
     c38:	81 1d       	adc	r24, r1
     c3a:	11 24       	eor	r1, r1
     c3c:	91 1d       	adc	r25, r1
     c3e:	b2 9f       	mul	r27, r18
     c40:	70 0d       	add	r23, r0
     c42:	81 1d       	adc	r24, r1
     c44:	11 24       	eor	r1, r1
     c46:	91 1d       	adc	r25, r1
     c48:	08 95       	ret

00000c4a <__muluhisi3>:
     c4a:	0e 94 16 06 	call	0xc2c	; 0xc2c <__umulhisi3>
     c4e:	a5 9f       	mul	r26, r21
     c50:	90 0d       	add	r25, r0
     c52:	b4 9f       	mul	r27, r20
     c54:	90 0d       	add	r25, r0
     c56:	a4 9f       	mul	r26, r20
     c58:	80 0d       	add	r24, r0
     c5a:	91 1d       	adc	r25, r1
     c5c:	11 24       	eor	r1, r1
     c5e:	08 95       	ret

00000c60 <__udivmodsi4>:
     c60:	a1 e2       	ldi	r26, 0x21	; 33
     c62:	1a 2e       	mov	r1, r26
     c64:	aa 1b       	sub	r26, r26
     c66:	bb 1b       	sub	r27, r27
     c68:	fd 01       	movw	r30, r26
     c6a:	0d c0       	rjmp	.+26     	; 0xc86 <__udivmodsi4_ep>

00000c6c <__udivmodsi4_loop>:
     c6c:	aa 1f       	adc	r26, r26
     c6e:	bb 1f       	adc	r27, r27
     c70:	ee 1f       	adc	r30, r30
     c72:	ff 1f       	adc	r31, r31
     c74:	a2 17       	cp	r26, r18
     c76:	b3 07       	cpc	r27, r19
     c78:	e4 07       	cpc	r30, r20
     c7a:	f5 07       	cpc	r31, r21
     c7c:	20 f0       	brcs	.+8      	; 0xc86 <__udivmodsi4_ep>
     c7e:	a2 1b       	sub	r26, r18
     c80:	b3 0b       	sbc	r27, r19
     c82:	e4 0b       	sbc	r30, r20
     c84:	f5 0b       	sbc	r31, r21

00000c86 <__udivmodsi4_ep>:
     c86:	66 1f       	adc	r22, r22
     c88:	77 1f       	adc	r23, r23
     c8a:	88 1f       	adc	r24, r24
     c8c:	99 1f       	adc	r25, r25
     c8e:	1a 94       	dec	r1
     c90:	69 f7       	brne	.-38     	; 0xc6c <__udivmodsi4_loop>
     c92:	60 95       	com	r22
     c94:	70 95       	com	r23
     c96:	80 95       	com	r24
     c98:	90 95       	com	r25
     c9a:	9b 01       	movw	r18, r22
     c9c:	ac 01       	movw	r20, r24
     c9e:	bd 01       	movw	r22, r26
     ca0:	cf 01       	movw	r24, r30
     ca2:	08 95       	ret

00000ca4 <strtol>:
     ca4:	a0 e0       	ldi	r26, 0x00	; 0
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	e8 e5       	ldi	r30, 0x58	; 88
     caa:	f6 e0       	ldi	r31, 0x06	; 6
     cac:	0c 94 28 0a 	jmp	0x1450	; 0x1450 <__prologue_saves__+0x2>
     cb0:	5c 01       	movw	r10, r24
     cb2:	6b 01       	movw	r12, r22
     cb4:	7a 01       	movw	r14, r20
     cb6:	61 15       	cp	r22, r1
     cb8:	71 05       	cpc	r23, r1
     cba:	19 f0       	breq	.+6      	; 0xcc2 <strtol+0x1e>
     cbc:	fb 01       	movw	r30, r22
     cbe:	91 83       	std	Z+1, r25	; 0x01
     cc0:	80 83       	st	Z, r24
     cc2:	e1 14       	cp	r14, r1
     cc4:	f1 04       	cpc	r15, r1
     cc6:	29 f0       	breq	.+10     	; 0xcd2 <strtol+0x2e>
     cc8:	c7 01       	movw	r24, r14
     cca:	02 97       	sbiw	r24, 0x02	; 2
     ccc:	83 97       	sbiw	r24, 0x23	; 35
     cce:	08 f0       	brcs	.+2      	; 0xcd2 <strtol+0x2e>
     cd0:	e5 c0       	rjmp	.+458    	; 0xe9c <strtol+0x1f8>
     cd2:	e5 01       	movw	r28, r10
     cd4:	21 96       	adiw	r28, 0x01	; 1
     cd6:	f5 01       	movw	r30, r10
     cd8:	10 81       	ld	r17, Z
     cda:	81 2f       	mov	r24, r17
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	0e 94 68 07 	call	0xed0	; 0xed0 <isspace>
     ce2:	89 2b       	or	r24, r25
     ce4:	11 f0       	breq	.+4      	; 0xcea <strtol+0x46>
     ce6:	5e 01       	movw	r10, r28
     ce8:	f4 cf       	rjmp	.-24     	; 0xcd2 <strtol+0x2e>
     cea:	1d 32       	cpi	r17, 0x2D	; 45
     cec:	29 f4       	brne	.+10     	; 0xcf8 <strtol+0x54>
     cee:	21 96       	adiw	r28, 0x01	; 1
     cf0:	f5 01       	movw	r30, r10
     cf2:	11 81       	ldd	r17, Z+1	; 0x01
     cf4:	01 e0       	ldi	r16, 0x01	; 1
     cf6:	07 c0       	rjmp	.+14     	; 0xd06 <strtol+0x62>
     cf8:	1b 32       	cpi	r17, 0x2B	; 43
     cfa:	21 f4       	brne	.+8      	; 0xd04 <strtol+0x60>
     cfc:	e5 01       	movw	r28, r10
     cfe:	22 96       	adiw	r28, 0x02	; 2
     d00:	f5 01       	movw	r30, r10
     d02:	11 81       	ldd	r17, Z+1	; 0x01
     d04:	00 e0       	ldi	r16, 0x00	; 0
     d06:	e1 14       	cp	r14, r1
     d08:	f1 04       	cpc	r15, r1
     d0a:	09 f1       	breq	.+66     	; 0xd4e <strtol+0xaa>
     d0c:	f0 e1       	ldi	r31, 0x10	; 16
     d0e:	ef 16       	cp	r14, r31
     d10:	f1 04       	cpc	r15, r1
     d12:	29 f4       	brne	.+10     	; 0xd1e <strtol+0x7a>
     d14:	3f c0       	rjmp	.+126    	; 0xd94 <strtol+0xf0>
     d16:	10 e3       	ldi	r17, 0x30	; 48
     d18:	e1 14       	cp	r14, r1
     d1a:	f1 04       	cpc	r15, r1
     d1c:	21 f1       	breq	.+72     	; 0xd66 <strtol+0xc2>
     d1e:	28 e0       	ldi	r18, 0x08	; 8
     d20:	e2 16       	cp	r14, r18
     d22:	f1 04       	cpc	r15, r1
     d24:	01 f1       	breq	.+64     	; 0xd66 <strtol+0xc2>
     d26:	54 f4       	brge	.+20     	; 0xd3c <strtol+0x98>
     d28:	e2 e0       	ldi	r30, 0x02	; 2
     d2a:	ee 16       	cp	r14, r30
     d2c:	f1 04       	cpc	r15, r1
     d2e:	21 f5       	brne	.+72     	; 0xd78 <strtol+0xd4>
     d30:	81 2c       	mov	r8, r1
     d32:	91 2c       	mov	r9, r1
     d34:	a1 2c       	mov	r10, r1
     d36:	b0 e4       	ldi	r27, 0x40	; 64
     d38:	bb 2e       	mov	r11, r27
     d3a:	3e c0       	rjmp	.+124    	; 0xdb8 <strtol+0x114>
     d3c:	fa e0       	ldi	r31, 0x0A	; 10
     d3e:	ef 16       	cp	r14, r31
     d40:	f1 04       	cpc	r15, r1
     d42:	39 f0       	breq	.+14     	; 0xd52 <strtol+0xae>
     d44:	20 e1       	ldi	r18, 0x10	; 16
     d46:	e2 16       	cp	r14, r18
     d48:	f1 04       	cpc	r15, r1
     d4a:	b1 f4       	brne	.+44     	; 0xd78 <strtol+0xd4>
     d4c:	30 c0       	rjmp	.+96     	; 0xdae <strtol+0x10a>
     d4e:	10 33       	cpi	r17, 0x30	; 48
     d50:	19 f1       	breq	.+70     	; 0xd98 <strtol+0xf4>
     d52:	fa e0       	ldi	r31, 0x0A	; 10
     d54:	ef 2e       	mov	r14, r31
     d56:	f1 2c       	mov	r15, r1
     d58:	ac ec       	ldi	r26, 0xCC	; 204
     d5a:	8a 2e       	mov	r8, r26
     d5c:	98 2c       	mov	r9, r8
     d5e:	a8 2c       	mov	r10, r8
     d60:	ac e0       	ldi	r26, 0x0C	; 12
     d62:	ba 2e       	mov	r11, r26
     d64:	29 c0       	rjmp	.+82     	; 0xdb8 <strtol+0x114>
     d66:	78 e0       	ldi	r23, 0x08	; 8
     d68:	e7 2e       	mov	r14, r23
     d6a:	f1 2c       	mov	r15, r1
     d6c:	81 2c       	mov	r8, r1
     d6e:	91 2c       	mov	r9, r1
     d70:	a1 2c       	mov	r10, r1
     d72:	e0 e1       	ldi	r30, 0x10	; 16
     d74:	be 2e       	mov	r11, r30
     d76:	20 c0       	rjmp	.+64     	; 0xdb8 <strtol+0x114>
     d78:	60 e0       	ldi	r22, 0x00	; 0
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	80 e0       	ldi	r24, 0x00	; 0
     d7e:	90 e8       	ldi	r25, 0x80	; 128
     d80:	97 01       	movw	r18, r14
     d82:	0f 2c       	mov	r0, r15
     d84:	00 0c       	add	r0, r0
     d86:	44 0b       	sbc	r20, r20
     d88:	55 0b       	sbc	r21, r21
     d8a:	0e 94 30 06 	call	0xc60	; 0xc60 <__udivmodsi4>
     d8e:	49 01       	movw	r8, r18
     d90:	5a 01       	movw	r10, r20
     d92:	12 c0       	rjmp	.+36     	; 0xdb8 <strtol+0x114>
     d94:	10 33       	cpi	r17, 0x30	; 48
     d96:	59 f4       	brne	.+22     	; 0xdae <strtol+0x10a>
     d98:	88 81       	ld	r24, Y
     d9a:	8f 7d       	andi	r24, 0xDF	; 223
     d9c:	88 35       	cpi	r24, 0x58	; 88
     d9e:	09 f0       	breq	.+2      	; 0xda2 <strtol+0xfe>
     da0:	ba cf       	rjmp	.-140    	; 0xd16 <strtol+0x72>
     da2:	19 81       	ldd	r17, Y+1	; 0x01
     da4:	22 96       	adiw	r28, 0x02	; 2
     da6:	02 60       	ori	r16, 0x02	; 2
     da8:	80 e1       	ldi	r24, 0x10	; 16
     daa:	e8 2e       	mov	r14, r24
     dac:	f1 2c       	mov	r15, r1
     dae:	81 2c       	mov	r8, r1
     db0:	91 2c       	mov	r9, r1
     db2:	a1 2c       	mov	r10, r1
     db4:	68 e0       	ldi	r22, 0x08	; 8
     db6:	b6 2e       	mov	r11, r22
     db8:	40 e0       	ldi	r20, 0x00	; 0
     dba:	60 e0       	ldi	r22, 0x00	; 0
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	cb 01       	movw	r24, r22
     dc0:	27 01       	movw	r4, r14
     dc2:	0f 2c       	mov	r0, r15
     dc4:	00 0c       	add	r0, r0
     dc6:	66 08       	sbc	r6, r6
     dc8:	77 08       	sbc	r7, r7
     dca:	fe 01       	movw	r30, r28
     dcc:	50 ed       	ldi	r21, 0xD0	; 208
     dce:	35 2e       	mov	r3, r21
     dd0:	31 0e       	add	r3, r17
     dd2:	29 e0       	ldi	r18, 0x09	; 9
     dd4:	23 15       	cp	r18, r3
     dd6:	70 f4       	brcc	.+28     	; 0xdf4 <strtol+0x150>
     dd8:	2f eb       	ldi	r18, 0xBF	; 191
     dda:	21 0f       	add	r18, r17
     ddc:	2a 31       	cpi	r18, 0x1A	; 26
     dde:	18 f4       	brcc	.+6      	; 0xde6 <strtol+0x142>
     de0:	39 ec       	ldi	r19, 0xC9	; 201
     de2:	33 2e       	mov	r3, r19
     de4:	06 c0       	rjmp	.+12     	; 0xdf2 <strtol+0x14e>
     de6:	2f e9       	ldi	r18, 0x9F	; 159
     de8:	21 0f       	add	r18, r17
     dea:	2a 31       	cpi	r18, 0x1A	; 26
     dec:	18 f5       	brcc	.+70     	; 0xe34 <strtol+0x190>
     dee:	29 ea       	ldi	r18, 0xA9	; 169
     df0:	32 2e       	mov	r3, r18
     df2:	31 0e       	add	r3, r17
     df4:	23 2d       	mov	r18, r3
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	2e 15       	cp	r18, r14
     dfa:	3f 05       	cpc	r19, r15
     dfc:	dc f4       	brge	.+54     	; 0xe34 <strtol+0x190>
     dfe:	47 fd       	sbrc	r20, 7
     e00:	16 c0       	rjmp	.+44     	; 0xe2e <strtol+0x18a>
     e02:	86 16       	cp	r8, r22
     e04:	97 06       	cpc	r9, r23
     e06:	a8 06       	cpc	r10, r24
     e08:	b9 06       	cpc	r11, r25
     e0a:	70 f0       	brcs	.+28     	; 0xe28 <strtol+0x184>
     e0c:	a3 01       	movw	r20, r6
     e0e:	92 01       	movw	r18, r4
     e10:	0e 94 06 06 	call	0xc0c	; 0xc0c <__mulsi3>
     e14:	63 0d       	add	r22, r3
     e16:	71 1d       	adc	r23, r1
     e18:	81 1d       	adc	r24, r1
     e1a:	91 1d       	adc	r25, r1
     e1c:	61 30       	cpi	r22, 0x01	; 1
     e1e:	71 05       	cpc	r23, r1
     e20:	81 05       	cpc	r24, r1
     e22:	20 e8       	ldi	r18, 0x80	; 128
     e24:	92 07       	cpc	r25, r18
     e26:	10 f0       	brcs	.+4      	; 0xe2c <strtol+0x188>
     e28:	4f ef       	ldi	r20, 0xFF	; 255
     e2a:	01 c0       	rjmp	.+2      	; 0xe2e <strtol+0x18a>
     e2c:	41 e0       	ldi	r20, 0x01	; 1
     e2e:	21 96       	adiw	r28, 0x01	; 1
     e30:	10 81       	ld	r17, Z
     e32:	cb cf       	rjmp	.-106    	; 0xdca <strtol+0x126>
     e34:	20 2f       	mov	r18, r16
     e36:	21 70       	andi	r18, 0x01	; 1
     e38:	c1 14       	cp	r12, r1
     e3a:	d1 04       	cpc	r13, r1
     e3c:	71 f0       	breq	.+28     	; 0xe5a <strtol+0x1b6>
     e3e:	44 23       	and	r20, r20
     e40:	29 f0       	breq	.+10     	; 0xe4c <strtol+0x1a8>
     e42:	21 97       	sbiw	r28, 0x01	; 1
     e44:	f6 01       	movw	r30, r12
     e46:	d1 83       	std	Z+1, r29	; 0x01
     e48:	c0 83       	st	Z, r28
     e4a:	07 c0       	rjmp	.+14     	; 0xe5a <strtol+0x1b6>
     e4c:	01 ff       	sbrs	r16, 1
     e4e:	19 c0       	rjmp	.+50     	; 0xe82 <strtol+0x1de>
     e50:	22 97       	sbiw	r28, 0x02	; 2
     e52:	f6 01       	movw	r30, r12
     e54:	d1 83       	std	Z+1, r29	; 0x01
     e56:	c0 83       	st	Z, r28
     e58:	14 c0       	rjmp	.+40     	; 0xe82 <strtol+0x1de>
     e5a:	47 ff       	sbrs	r20, 7
     e5c:	12 c0       	rjmp	.+36     	; 0xe82 <strtol+0x1de>
     e5e:	22 23       	and	r18, r18
     e60:	29 f0       	breq	.+10     	; 0xe6c <strtol+0x1c8>
     e62:	60 e0       	ldi	r22, 0x00	; 0
     e64:	70 e0       	ldi	r23, 0x00	; 0
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	90 e8       	ldi	r25, 0x80	; 128
     e6a:	04 c0       	rjmp	.+8      	; 0xe74 <strtol+0x1d0>
     e6c:	6f ef       	ldi	r22, 0xFF	; 255
     e6e:	7f ef       	ldi	r23, 0xFF	; 255
     e70:	8f ef       	ldi	r24, 0xFF	; 255
     e72:	9f e7       	ldi	r25, 0x7F	; 127
     e74:	22 e2       	ldi	r18, 0x22	; 34
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	30 93 72 01 	sts	0x0172, r19	; 0x800172 <errno+0x1>
     e7c:	20 93 71 01 	sts	0x0171, r18	; 0x800171 <errno>
     e80:	09 c0       	rjmp	.+18     	; 0xe94 <strtol+0x1f0>
     e82:	22 23       	and	r18, r18
     e84:	81 f0       	breq	.+32     	; 0xea6 <strtol+0x202>
     e86:	90 95       	com	r25
     e88:	80 95       	com	r24
     e8a:	70 95       	com	r23
     e8c:	61 95       	neg	r22
     e8e:	7f 4f       	sbci	r23, 0xFF	; 255
     e90:	8f 4f       	sbci	r24, 0xFF	; 255
     e92:	9f 4f       	sbci	r25, 0xFF	; 255
     e94:	46 2f       	mov	r20, r22
     e96:	37 2f       	mov	r19, r23
     e98:	28 2f       	mov	r18, r24
     e9a:	12 c0       	rjmp	.+36     	; 0xec0 <strtol+0x21c>
     e9c:	40 e0       	ldi	r20, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	0d c0       	rjmp	.+26     	; 0xec0 <strtol+0x21c>
     ea6:	97 ff       	sbrs	r25, 7
     ea8:	f5 cf       	rjmp	.-22     	; 0xe94 <strtol+0x1f0>
     eaa:	82 e2       	ldi	r24, 0x22	; 34
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <errno+0x1>
     eb2:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <errno>
     eb6:	6f ef       	ldi	r22, 0xFF	; 255
     eb8:	7f ef       	ldi	r23, 0xFF	; 255
     eba:	8f ef       	ldi	r24, 0xFF	; 255
     ebc:	9f e7       	ldi	r25, 0x7F	; 127
     ebe:	ea cf       	rjmp	.-44     	; 0xe94 <strtol+0x1f0>
     ec0:	64 2f       	mov	r22, r20
     ec2:	73 2f       	mov	r23, r19
     ec4:	82 2f       	mov	r24, r18
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	e1 e1       	ldi	r30, 0x11	; 17
     ecc:	0c 94 44 0a 	jmp	0x1488	; 0x1488 <__epilogue_restores__+0x2>

00000ed0 <isspace>:
     ed0:	91 11       	cpse	r25, r1
     ed2:	0c 94 74 09 	jmp	0x12e8	; 0x12e8 <__ctype_isfalse>
     ed6:	80 32       	cpi	r24, 0x20	; 32
     ed8:	19 f0       	breq	.+6      	; 0xee0 <isspace+0x10>
     eda:	89 50       	subi	r24, 0x09	; 9
     edc:	85 50       	subi	r24, 0x05	; 5
     ede:	c8 f7       	brcc	.-14     	; 0xed2 <isspace+0x2>
     ee0:	08 95       	ret

00000ee2 <sprintf>:
     ee2:	ae e0       	ldi	r26, 0x0E	; 14
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e7 e7       	ldi	r30, 0x77	; 119
     ee8:	f7 e0       	ldi	r31, 0x07	; 7
     eea:	0c 94 35 0a 	jmp	0x146a	; 0x146a <__prologue_saves__+0x1c>
     eee:	0d 89       	ldd	r16, Y+21	; 0x15
     ef0:	1e 89       	ldd	r17, Y+22	; 0x16
     ef2:	86 e0       	ldi	r24, 0x06	; 6
     ef4:	8c 83       	std	Y+4, r24	; 0x04
     ef6:	1a 83       	std	Y+2, r17	; 0x02
     ef8:	09 83       	std	Y+1, r16	; 0x01
     efa:	8f ef       	ldi	r24, 0xFF	; 255
     efc:	9f e7       	ldi	r25, 0x7F	; 127
     efe:	9e 83       	std	Y+6, r25	; 0x06
     f00:	8d 83       	std	Y+5, r24	; 0x05
     f02:	ae 01       	movw	r20, r28
     f04:	47 5e       	subi	r20, 0xE7	; 231
     f06:	5f 4f       	sbci	r21, 0xFF	; 255
     f08:	6f 89       	ldd	r22, Y+23	; 0x17
     f0a:	78 8d       	ldd	r23, Y+24	; 0x18
     f0c:	ce 01       	movw	r24, r28
     f0e:	01 96       	adiw	r24, 0x01	; 1
     f10:	0e 94 93 07 	call	0xf26	; 0xf26 <vfprintf>
     f14:	ef 81       	ldd	r30, Y+7	; 0x07
     f16:	f8 85       	ldd	r31, Y+8	; 0x08
     f18:	e0 0f       	add	r30, r16
     f1a:	f1 1f       	adc	r31, r17
     f1c:	10 82       	st	Z, r1
     f1e:	2e 96       	adiw	r28, 0x0e	; 14
     f20:	e4 e0       	ldi	r30, 0x04	; 4
     f22:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <__epilogue_restores__+0x1c>

00000f26 <vfprintf>:
     f26:	ab e0       	ldi	r26, 0x0B	; 11
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e9 e9       	ldi	r30, 0x99	; 153
     f2c:	f7 e0       	ldi	r31, 0x07	; 7
     f2e:	0c 94 27 0a 	jmp	0x144e	; 0x144e <__prologue_saves__>
     f32:	6c 01       	movw	r12, r24
     f34:	7b 01       	movw	r14, r22
     f36:	8a 01       	movw	r16, r20
     f38:	fc 01       	movw	r30, r24
     f3a:	17 82       	std	Z+7, r1	; 0x07
     f3c:	16 82       	std	Z+6, r1	; 0x06
     f3e:	83 81       	ldd	r24, Z+3	; 0x03
     f40:	81 ff       	sbrs	r24, 1
     f42:	cc c1       	rjmp	.+920    	; 0x12dc <vfprintf+0x3b6>
     f44:	ce 01       	movw	r24, r28
     f46:	01 96       	adiw	r24, 0x01	; 1
     f48:	3c 01       	movw	r6, r24
     f4a:	f6 01       	movw	r30, r12
     f4c:	93 81       	ldd	r25, Z+3	; 0x03
     f4e:	f7 01       	movw	r30, r14
     f50:	93 fd       	sbrc	r25, 3
     f52:	85 91       	lpm	r24, Z+
     f54:	93 ff       	sbrs	r25, 3
     f56:	81 91       	ld	r24, Z+
     f58:	7f 01       	movw	r14, r30
     f5a:	88 23       	and	r24, r24
     f5c:	09 f4       	brne	.+2      	; 0xf60 <vfprintf+0x3a>
     f5e:	ba c1       	rjmp	.+884    	; 0x12d4 <vfprintf+0x3ae>
     f60:	85 32       	cpi	r24, 0x25	; 37
     f62:	39 f4       	brne	.+14     	; 0xf72 <vfprintf+0x4c>
     f64:	93 fd       	sbrc	r25, 3
     f66:	85 91       	lpm	r24, Z+
     f68:	93 ff       	sbrs	r25, 3
     f6a:	81 91       	ld	r24, Z+
     f6c:	7f 01       	movw	r14, r30
     f6e:	85 32       	cpi	r24, 0x25	; 37
     f70:	29 f4       	brne	.+10     	; 0xf7c <vfprintf+0x56>
     f72:	b6 01       	movw	r22, r12
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	0e 94 8d 09 	call	0x131a	; 0x131a <fputc>
     f7a:	e7 cf       	rjmp	.-50     	; 0xf4a <vfprintf+0x24>
     f7c:	91 2c       	mov	r9, r1
     f7e:	21 2c       	mov	r2, r1
     f80:	31 2c       	mov	r3, r1
     f82:	ff e1       	ldi	r31, 0x1F	; 31
     f84:	f3 15       	cp	r31, r3
     f86:	d8 f0       	brcs	.+54     	; 0xfbe <vfprintf+0x98>
     f88:	8b 32       	cpi	r24, 0x2B	; 43
     f8a:	79 f0       	breq	.+30     	; 0xfaa <vfprintf+0x84>
     f8c:	38 f4       	brcc	.+14     	; 0xf9c <vfprintf+0x76>
     f8e:	80 32       	cpi	r24, 0x20	; 32
     f90:	79 f0       	breq	.+30     	; 0xfb0 <vfprintf+0x8a>
     f92:	83 32       	cpi	r24, 0x23	; 35
     f94:	a1 f4       	brne	.+40     	; 0xfbe <vfprintf+0x98>
     f96:	23 2d       	mov	r18, r3
     f98:	20 61       	ori	r18, 0x10	; 16
     f9a:	1d c0       	rjmp	.+58     	; 0xfd6 <vfprintf+0xb0>
     f9c:	8d 32       	cpi	r24, 0x2D	; 45
     f9e:	61 f0       	breq	.+24     	; 0xfb8 <vfprintf+0x92>
     fa0:	80 33       	cpi	r24, 0x30	; 48
     fa2:	69 f4       	brne	.+26     	; 0xfbe <vfprintf+0x98>
     fa4:	23 2d       	mov	r18, r3
     fa6:	21 60       	ori	r18, 0x01	; 1
     fa8:	16 c0       	rjmp	.+44     	; 0xfd6 <vfprintf+0xb0>
     faa:	83 2d       	mov	r24, r3
     fac:	82 60       	ori	r24, 0x02	; 2
     fae:	38 2e       	mov	r3, r24
     fb0:	e3 2d       	mov	r30, r3
     fb2:	e4 60       	ori	r30, 0x04	; 4
     fb4:	3e 2e       	mov	r3, r30
     fb6:	2a c0       	rjmp	.+84     	; 0x100c <vfprintf+0xe6>
     fb8:	f3 2d       	mov	r31, r3
     fba:	f8 60       	ori	r31, 0x08	; 8
     fbc:	1d c0       	rjmp	.+58     	; 0xff8 <vfprintf+0xd2>
     fbe:	37 fc       	sbrc	r3, 7
     fc0:	2d c0       	rjmp	.+90     	; 0x101c <vfprintf+0xf6>
     fc2:	20 ed       	ldi	r18, 0xD0	; 208
     fc4:	28 0f       	add	r18, r24
     fc6:	2a 30       	cpi	r18, 0x0A	; 10
     fc8:	40 f0       	brcs	.+16     	; 0xfda <vfprintf+0xb4>
     fca:	8e 32       	cpi	r24, 0x2E	; 46
     fcc:	b9 f4       	brne	.+46     	; 0xffc <vfprintf+0xd6>
     fce:	36 fc       	sbrc	r3, 6
     fd0:	81 c1       	rjmp	.+770    	; 0x12d4 <vfprintf+0x3ae>
     fd2:	23 2d       	mov	r18, r3
     fd4:	20 64       	ori	r18, 0x40	; 64
     fd6:	32 2e       	mov	r3, r18
     fd8:	19 c0       	rjmp	.+50     	; 0x100c <vfprintf+0xe6>
     fda:	36 fe       	sbrs	r3, 6
     fdc:	06 c0       	rjmp	.+12     	; 0xfea <vfprintf+0xc4>
     fde:	8a e0       	ldi	r24, 0x0A	; 10
     fe0:	98 9e       	mul	r9, r24
     fe2:	20 0d       	add	r18, r0
     fe4:	11 24       	eor	r1, r1
     fe6:	92 2e       	mov	r9, r18
     fe8:	11 c0       	rjmp	.+34     	; 0x100c <vfprintf+0xe6>
     fea:	ea e0       	ldi	r30, 0x0A	; 10
     fec:	2e 9e       	mul	r2, r30
     fee:	20 0d       	add	r18, r0
     ff0:	11 24       	eor	r1, r1
     ff2:	22 2e       	mov	r2, r18
     ff4:	f3 2d       	mov	r31, r3
     ff6:	f0 62       	ori	r31, 0x20	; 32
     ff8:	3f 2e       	mov	r3, r31
     ffa:	08 c0       	rjmp	.+16     	; 0x100c <vfprintf+0xe6>
     ffc:	8c 36       	cpi	r24, 0x6C	; 108
     ffe:	21 f4       	brne	.+8      	; 0x1008 <vfprintf+0xe2>
    1000:	83 2d       	mov	r24, r3
    1002:	80 68       	ori	r24, 0x80	; 128
    1004:	38 2e       	mov	r3, r24
    1006:	02 c0       	rjmp	.+4      	; 0x100c <vfprintf+0xe6>
    1008:	88 36       	cpi	r24, 0x68	; 104
    100a:	41 f4       	brne	.+16     	; 0x101c <vfprintf+0xf6>
    100c:	f7 01       	movw	r30, r14
    100e:	93 fd       	sbrc	r25, 3
    1010:	85 91       	lpm	r24, Z+
    1012:	93 ff       	sbrs	r25, 3
    1014:	81 91       	ld	r24, Z+
    1016:	7f 01       	movw	r14, r30
    1018:	81 11       	cpse	r24, r1
    101a:	b3 cf       	rjmp	.-154    	; 0xf82 <vfprintf+0x5c>
    101c:	98 2f       	mov	r25, r24
    101e:	9f 7d       	andi	r25, 0xDF	; 223
    1020:	95 54       	subi	r25, 0x45	; 69
    1022:	93 30       	cpi	r25, 0x03	; 3
    1024:	28 f4       	brcc	.+10     	; 0x1030 <vfprintf+0x10a>
    1026:	0c 5f       	subi	r16, 0xFC	; 252
    1028:	1f 4f       	sbci	r17, 0xFF	; 255
    102a:	9f e3       	ldi	r25, 0x3F	; 63
    102c:	99 83       	std	Y+1, r25	; 0x01
    102e:	0d c0       	rjmp	.+26     	; 0x104a <vfprintf+0x124>
    1030:	83 36       	cpi	r24, 0x63	; 99
    1032:	31 f0       	breq	.+12     	; 0x1040 <vfprintf+0x11a>
    1034:	83 37       	cpi	r24, 0x73	; 115
    1036:	71 f0       	breq	.+28     	; 0x1054 <vfprintf+0x12e>
    1038:	83 35       	cpi	r24, 0x53	; 83
    103a:	09 f0       	breq	.+2      	; 0x103e <vfprintf+0x118>
    103c:	59 c0       	rjmp	.+178    	; 0x10f0 <vfprintf+0x1ca>
    103e:	21 c0       	rjmp	.+66     	; 0x1082 <vfprintf+0x15c>
    1040:	f8 01       	movw	r30, r16
    1042:	80 81       	ld	r24, Z
    1044:	89 83       	std	Y+1, r24	; 0x01
    1046:	0e 5f       	subi	r16, 0xFE	; 254
    1048:	1f 4f       	sbci	r17, 0xFF	; 255
    104a:	88 24       	eor	r8, r8
    104c:	83 94       	inc	r8
    104e:	91 2c       	mov	r9, r1
    1050:	53 01       	movw	r10, r6
    1052:	13 c0       	rjmp	.+38     	; 0x107a <vfprintf+0x154>
    1054:	28 01       	movw	r4, r16
    1056:	f2 e0       	ldi	r31, 0x02	; 2
    1058:	4f 0e       	add	r4, r31
    105a:	51 1c       	adc	r5, r1
    105c:	f8 01       	movw	r30, r16
    105e:	a0 80       	ld	r10, Z
    1060:	b1 80       	ldd	r11, Z+1	; 0x01
    1062:	36 fe       	sbrs	r3, 6
    1064:	03 c0       	rjmp	.+6      	; 0x106c <vfprintf+0x146>
    1066:	69 2d       	mov	r22, r9
    1068:	70 e0       	ldi	r23, 0x00	; 0
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <vfprintf+0x14a>
    106c:	6f ef       	ldi	r22, 0xFF	; 255
    106e:	7f ef       	ldi	r23, 0xFF	; 255
    1070:	c5 01       	movw	r24, r10
    1072:	0e 94 82 09 	call	0x1304	; 0x1304 <strnlen>
    1076:	4c 01       	movw	r8, r24
    1078:	82 01       	movw	r16, r4
    107a:	f3 2d       	mov	r31, r3
    107c:	ff 77       	andi	r31, 0x7F	; 127
    107e:	3f 2e       	mov	r3, r31
    1080:	16 c0       	rjmp	.+44     	; 0x10ae <vfprintf+0x188>
    1082:	28 01       	movw	r4, r16
    1084:	22 e0       	ldi	r18, 0x02	; 2
    1086:	42 0e       	add	r4, r18
    1088:	51 1c       	adc	r5, r1
    108a:	f8 01       	movw	r30, r16
    108c:	a0 80       	ld	r10, Z
    108e:	b1 80       	ldd	r11, Z+1	; 0x01
    1090:	36 fe       	sbrs	r3, 6
    1092:	03 c0       	rjmp	.+6      	; 0x109a <vfprintf+0x174>
    1094:	69 2d       	mov	r22, r9
    1096:	70 e0       	ldi	r23, 0x00	; 0
    1098:	02 c0       	rjmp	.+4      	; 0x109e <vfprintf+0x178>
    109a:	6f ef       	ldi	r22, 0xFF	; 255
    109c:	7f ef       	ldi	r23, 0xFF	; 255
    109e:	c5 01       	movw	r24, r10
    10a0:	0e 94 77 09 	call	0x12ee	; 0x12ee <strnlen_P>
    10a4:	4c 01       	movw	r8, r24
    10a6:	f3 2d       	mov	r31, r3
    10a8:	f0 68       	ori	r31, 0x80	; 128
    10aa:	3f 2e       	mov	r3, r31
    10ac:	82 01       	movw	r16, r4
    10ae:	33 fc       	sbrc	r3, 3
    10b0:	1b c0       	rjmp	.+54     	; 0x10e8 <vfprintf+0x1c2>
    10b2:	82 2d       	mov	r24, r2
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	88 16       	cp	r8, r24
    10b8:	99 06       	cpc	r9, r25
    10ba:	b0 f4       	brcc	.+44     	; 0x10e8 <vfprintf+0x1c2>
    10bc:	b6 01       	movw	r22, r12
    10be:	80 e2       	ldi	r24, 0x20	; 32
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	0e 94 8d 09 	call	0x131a	; 0x131a <fputc>
    10c6:	2a 94       	dec	r2
    10c8:	f4 cf       	rjmp	.-24     	; 0x10b2 <vfprintf+0x18c>
    10ca:	f5 01       	movw	r30, r10
    10cc:	37 fc       	sbrc	r3, 7
    10ce:	85 91       	lpm	r24, Z+
    10d0:	37 fe       	sbrs	r3, 7
    10d2:	81 91       	ld	r24, Z+
    10d4:	5f 01       	movw	r10, r30
    10d6:	b6 01       	movw	r22, r12
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	0e 94 8d 09 	call	0x131a	; 0x131a <fputc>
    10de:	21 10       	cpse	r2, r1
    10e0:	2a 94       	dec	r2
    10e2:	21 e0       	ldi	r18, 0x01	; 1
    10e4:	82 1a       	sub	r8, r18
    10e6:	91 08       	sbc	r9, r1
    10e8:	81 14       	cp	r8, r1
    10ea:	91 04       	cpc	r9, r1
    10ec:	71 f7       	brne	.-36     	; 0x10ca <vfprintf+0x1a4>
    10ee:	e8 c0       	rjmp	.+464    	; 0x12c0 <vfprintf+0x39a>
    10f0:	84 36       	cpi	r24, 0x64	; 100
    10f2:	11 f0       	breq	.+4      	; 0x10f8 <vfprintf+0x1d2>
    10f4:	89 36       	cpi	r24, 0x69	; 105
    10f6:	41 f5       	brne	.+80     	; 0x1148 <vfprintf+0x222>
    10f8:	f8 01       	movw	r30, r16
    10fa:	37 fe       	sbrs	r3, 7
    10fc:	07 c0       	rjmp	.+14     	; 0x110c <vfprintf+0x1e6>
    10fe:	60 81       	ld	r22, Z
    1100:	71 81       	ldd	r23, Z+1	; 0x01
    1102:	82 81       	ldd	r24, Z+2	; 0x02
    1104:	93 81       	ldd	r25, Z+3	; 0x03
    1106:	0c 5f       	subi	r16, 0xFC	; 252
    1108:	1f 4f       	sbci	r17, 0xFF	; 255
    110a:	08 c0       	rjmp	.+16     	; 0x111c <vfprintf+0x1f6>
    110c:	60 81       	ld	r22, Z
    110e:	71 81       	ldd	r23, Z+1	; 0x01
    1110:	07 2e       	mov	r0, r23
    1112:	00 0c       	add	r0, r0
    1114:	88 0b       	sbc	r24, r24
    1116:	99 0b       	sbc	r25, r25
    1118:	0e 5f       	subi	r16, 0xFE	; 254
    111a:	1f 4f       	sbci	r17, 0xFF	; 255
    111c:	f3 2d       	mov	r31, r3
    111e:	ff 76       	andi	r31, 0x6F	; 111
    1120:	3f 2e       	mov	r3, r31
    1122:	97 ff       	sbrs	r25, 7
    1124:	09 c0       	rjmp	.+18     	; 0x1138 <vfprintf+0x212>
    1126:	90 95       	com	r25
    1128:	80 95       	com	r24
    112a:	70 95       	com	r23
    112c:	61 95       	neg	r22
    112e:	7f 4f       	sbci	r23, 0xFF	; 255
    1130:	8f 4f       	sbci	r24, 0xFF	; 255
    1132:	9f 4f       	sbci	r25, 0xFF	; 255
    1134:	f0 68       	ori	r31, 0x80	; 128
    1136:	3f 2e       	mov	r3, r31
    1138:	2a e0       	ldi	r18, 0x0A	; 10
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	a3 01       	movw	r20, r6
    113e:	0e 94 c9 09 	call	0x1392	; 0x1392 <__ultoa_invert>
    1142:	88 2e       	mov	r8, r24
    1144:	86 18       	sub	r8, r6
    1146:	45 c0       	rjmp	.+138    	; 0x11d2 <vfprintf+0x2ac>
    1148:	85 37       	cpi	r24, 0x75	; 117
    114a:	31 f4       	brne	.+12     	; 0x1158 <vfprintf+0x232>
    114c:	23 2d       	mov	r18, r3
    114e:	2f 7e       	andi	r18, 0xEF	; 239
    1150:	b2 2e       	mov	r11, r18
    1152:	2a e0       	ldi	r18, 0x0A	; 10
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	25 c0       	rjmp	.+74     	; 0x11a2 <vfprintf+0x27c>
    1158:	93 2d       	mov	r25, r3
    115a:	99 7f       	andi	r25, 0xF9	; 249
    115c:	b9 2e       	mov	r11, r25
    115e:	8f 36       	cpi	r24, 0x6F	; 111
    1160:	c1 f0       	breq	.+48     	; 0x1192 <vfprintf+0x26c>
    1162:	18 f4       	brcc	.+6      	; 0x116a <vfprintf+0x244>
    1164:	88 35       	cpi	r24, 0x58	; 88
    1166:	79 f0       	breq	.+30     	; 0x1186 <vfprintf+0x260>
    1168:	b5 c0       	rjmp	.+362    	; 0x12d4 <vfprintf+0x3ae>
    116a:	80 37       	cpi	r24, 0x70	; 112
    116c:	19 f0       	breq	.+6      	; 0x1174 <vfprintf+0x24e>
    116e:	88 37       	cpi	r24, 0x78	; 120
    1170:	21 f0       	breq	.+8      	; 0x117a <vfprintf+0x254>
    1172:	b0 c0       	rjmp	.+352    	; 0x12d4 <vfprintf+0x3ae>
    1174:	e9 2f       	mov	r30, r25
    1176:	e0 61       	ori	r30, 0x10	; 16
    1178:	be 2e       	mov	r11, r30
    117a:	b4 fe       	sbrs	r11, 4
    117c:	0d c0       	rjmp	.+26     	; 0x1198 <vfprintf+0x272>
    117e:	fb 2d       	mov	r31, r11
    1180:	f4 60       	ori	r31, 0x04	; 4
    1182:	bf 2e       	mov	r11, r31
    1184:	09 c0       	rjmp	.+18     	; 0x1198 <vfprintf+0x272>
    1186:	34 fe       	sbrs	r3, 4
    1188:	0a c0       	rjmp	.+20     	; 0x119e <vfprintf+0x278>
    118a:	29 2f       	mov	r18, r25
    118c:	26 60       	ori	r18, 0x06	; 6
    118e:	b2 2e       	mov	r11, r18
    1190:	06 c0       	rjmp	.+12     	; 0x119e <vfprintf+0x278>
    1192:	28 e0       	ldi	r18, 0x08	; 8
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	05 c0       	rjmp	.+10     	; 0x11a2 <vfprintf+0x27c>
    1198:	20 e1       	ldi	r18, 0x10	; 16
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <vfprintf+0x27c>
    119e:	20 e1       	ldi	r18, 0x10	; 16
    11a0:	32 e0       	ldi	r19, 0x02	; 2
    11a2:	f8 01       	movw	r30, r16
    11a4:	b7 fe       	sbrs	r11, 7
    11a6:	07 c0       	rjmp	.+14     	; 0x11b6 <vfprintf+0x290>
    11a8:	60 81       	ld	r22, Z
    11aa:	71 81       	ldd	r23, Z+1	; 0x01
    11ac:	82 81       	ldd	r24, Z+2	; 0x02
    11ae:	93 81       	ldd	r25, Z+3	; 0x03
    11b0:	0c 5f       	subi	r16, 0xFC	; 252
    11b2:	1f 4f       	sbci	r17, 0xFF	; 255
    11b4:	06 c0       	rjmp	.+12     	; 0x11c2 <vfprintf+0x29c>
    11b6:	60 81       	ld	r22, Z
    11b8:	71 81       	ldd	r23, Z+1	; 0x01
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	0e 5f       	subi	r16, 0xFE	; 254
    11c0:	1f 4f       	sbci	r17, 0xFF	; 255
    11c2:	a3 01       	movw	r20, r6
    11c4:	0e 94 c9 09 	call	0x1392	; 0x1392 <__ultoa_invert>
    11c8:	88 2e       	mov	r8, r24
    11ca:	86 18       	sub	r8, r6
    11cc:	fb 2d       	mov	r31, r11
    11ce:	ff 77       	andi	r31, 0x7F	; 127
    11d0:	3f 2e       	mov	r3, r31
    11d2:	36 fe       	sbrs	r3, 6
    11d4:	0d c0       	rjmp	.+26     	; 0x11f0 <vfprintf+0x2ca>
    11d6:	23 2d       	mov	r18, r3
    11d8:	2e 7f       	andi	r18, 0xFE	; 254
    11da:	a2 2e       	mov	r10, r18
    11dc:	89 14       	cp	r8, r9
    11de:	58 f4       	brcc	.+22     	; 0x11f6 <vfprintf+0x2d0>
    11e0:	34 fe       	sbrs	r3, 4
    11e2:	0b c0       	rjmp	.+22     	; 0x11fa <vfprintf+0x2d4>
    11e4:	32 fc       	sbrc	r3, 2
    11e6:	09 c0       	rjmp	.+18     	; 0x11fa <vfprintf+0x2d4>
    11e8:	83 2d       	mov	r24, r3
    11ea:	8e 7e       	andi	r24, 0xEE	; 238
    11ec:	a8 2e       	mov	r10, r24
    11ee:	05 c0       	rjmp	.+10     	; 0x11fa <vfprintf+0x2d4>
    11f0:	b8 2c       	mov	r11, r8
    11f2:	a3 2c       	mov	r10, r3
    11f4:	03 c0       	rjmp	.+6      	; 0x11fc <vfprintf+0x2d6>
    11f6:	b8 2c       	mov	r11, r8
    11f8:	01 c0       	rjmp	.+2      	; 0x11fc <vfprintf+0x2d6>
    11fa:	b9 2c       	mov	r11, r9
    11fc:	a4 fe       	sbrs	r10, 4
    11fe:	0f c0       	rjmp	.+30     	; 0x121e <vfprintf+0x2f8>
    1200:	fe 01       	movw	r30, r28
    1202:	e8 0d       	add	r30, r8
    1204:	f1 1d       	adc	r31, r1
    1206:	80 81       	ld	r24, Z
    1208:	80 33       	cpi	r24, 0x30	; 48
    120a:	21 f4       	brne	.+8      	; 0x1214 <vfprintf+0x2ee>
    120c:	9a 2d       	mov	r25, r10
    120e:	99 7e       	andi	r25, 0xE9	; 233
    1210:	a9 2e       	mov	r10, r25
    1212:	09 c0       	rjmp	.+18     	; 0x1226 <vfprintf+0x300>
    1214:	a2 fe       	sbrs	r10, 2
    1216:	06 c0       	rjmp	.+12     	; 0x1224 <vfprintf+0x2fe>
    1218:	b3 94       	inc	r11
    121a:	b3 94       	inc	r11
    121c:	04 c0       	rjmp	.+8      	; 0x1226 <vfprintf+0x300>
    121e:	8a 2d       	mov	r24, r10
    1220:	86 78       	andi	r24, 0x86	; 134
    1222:	09 f0       	breq	.+2      	; 0x1226 <vfprintf+0x300>
    1224:	b3 94       	inc	r11
    1226:	a3 fc       	sbrc	r10, 3
    1228:	11 c0       	rjmp	.+34     	; 0x124c <vfprintf+0x326>
    122a:	a0 fe       	sbrs	r10, 0
    122c:	06 c0       	rjmp	.+12     	; 0x123a <vfprintf+0x314>
    122e:	b2 14       	cp	r11, r2
    1230:	88 f4       	brcc	.+34     	; 0x1254 <vfprintf+0x32e>
    1232:	28 0c       	add	r2, r8
    1234:	92 2c       	mov	r9, r2
    1236:	9b 18       	sub	r9, r11
    1238:	0e c0       	rjmp	.+28     	; 0x1256 <vfprintf+0x330>
    123a:	b2 14       	cp	r11, r2
    123c:	60 f4       	brcc	.+24     	; 0x1256 <vfprintf+0x330>
    123e:	b6 01       	movw	r22, r12
    1240:	80 e2       	ldi	r24, 0x20	; 32
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	0e 94 8d 09 	call	0x131a	; 0x131a <fputc>
    1248:	b3 94       	inc	r11
    124a:	f7 cf       	rjmp	.-18     	; 0x123a <vfprintf+0x314>
    124c:	b2 14       	cp	r11, r2
    124e:	18 f4       	brcc	.+6      	; 0x1256 <vfprintf+0x330>
    1250:	2b 18       	sub	r2, r11
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <vfprintf+0x332>
    1254:	98 2c       	mov	r9, r8
    1256:	21 2c       	mov	r2, r1
    1258:	a4 fe       	sbrs	r10, 4
    125a:	10 c0       	rjmp	.+32     	; 0x127c <vfprintf+0x356>
    125c:	b6 01       	movw	r22, r12
    125e:	80 e3       	ldi	r24, 0x30	; 48
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	0e 94 8d 09 	call	0x131a	; 0x131a <fputc>
    1266:	a2 fe       	sbrs	r10, 2
    1268:	17 c0       	rjmp	.+46     	; 0x1298 <vfprintf+0x372>
    126a:	a1 fc       	sbrc	r10, 1
    126c:	03 c0       	rjmp	.+6      	; 0x1274 <vfprintf+0x34e>
    126e:	88 e7       	ldi	r24, 0x78	; 120
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <vfprintf+0x352>
    1274:	88 e5       	ldi	r24, 0x58	; 88
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	b6 01       	movw	r22, r12
    127a:	0c c0       	rjmp	.+24     	; 0x1294 <vfprintf+0x36e>
    127c:	8a 2d       	mov	r24, r10
    127e:	86 78       	andi	r24, 0x86	; 134
    1280:	59 f0       	breq	.+22     	; 0x1298 <vfprintf+0x372>
    1282:	a1 fe       	sbrs	r10, 1
    1284:	02 c0       	rjmp	.+4      	; 0x128a <vfprintf+0x364>
    1286:	8b e2       	ldi	r24, 0x2B	; 43
    1288:	01 c0       	rjmp	.+2      	; 0x128c <vfprintf+0x366>
    128a:	80 e2       	ldi	r24, 0x20	; 32
    128c:	a7 fc       	sbrc	r10, 7
    128e:	8d e2       	ldi	r24, 0x2D	; 45
    1290:	b6 01       	movw	r22, r12
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	0e 94 8d 09 	call	0x131a	; 0x131a <fputc>
    1298:	89 14       	cp	r8, r9
    129a:	38 f4       	brcc	.+14     	; 0x12aa <vfprintf+0x384>
    129c:	b6 01       	movw	r22, r12
    129e:	80 e3       	ldi	r24, 0x30	; 48
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	0e 94 8d 09 	call	0x131a	; 0x131a <fputc>
    12a6:	9a 94       	dec	r9
    12a8:	f7 cf       	rjmp	.-18     	; 0x1298 <vfprintf+0x372>
    12aa:	8a 94       	dec	r8
    12ac:	f3 01       	movw	r30, r6
    12ae:	e8 0d       	add	r30, r8
    12b0:	f1 1d       	adc	r31, r1
    12b2:	80 81       	ld	r24, Z
    12b4:	b6 01       	movw	r22, r12
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	0e 94 8d 09 	call	0x131a	; 0x131a <fputc>
    12bc:	81 10       	cpse	r8, r1
    12be:	f5 cf       	rjmp	.-22     	; 0x12aa <vfprintf+0x384>
    12c0:	22 20       	and	r2, r2
    12c2:	09 f4       	brne	.+2      	; 0x12c6 <vfprintf+0x3a0>
    12c4:	42 ce       	rjmp	.-892    	; 0xf4a <vfprintf+0x24>
    12c6:	b6 01       	movw	r22, r12
    12c8:	80 e2       	ldi	r24, 0x20	; 32
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	0e 94 8d 09 	call	0x131a	; 0x131a <fputc>
    12d0:	2a 94       	dec	r2
    12d2:	f6 cf       	rjmp	.-20     	; 0x12c0 <vfprintf+0x39a>
    12d4:	f6 01       	movw	r30, r12
    12d6:	86 81       	ldd	r24, Z+6	; 0x06
    12d8:	97 81       	ldd	r25, Z+7	; 0x07
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <vfprintf+0x3ba>
    12dc:	8f ef       	ldi	r24, 0xFF	; 255
    12de:	9f ef       	ldi	r25, 0xFF	; 255
    12e0:	2b 96       	adiw	r28, 0x0b	; 11
    12e2:	e2 e1       	ldi	r30, 0x12	; 18
    12e4:	0c 94 43 0a 	jmp	0x1486	; 0x1486 <__epilogue_restores__>

000012e8 <__ctype_isfalse>:
    12e8:	99 27       	eor	r25, r25
    12ea:	88 27       	eor	r24, r24

000012ec <__ctype_istrue>:
    12ec:	08 95       	ret

000012ee <strnlen_P>:
    12ee:	fc 01       	movw	r30, r24
    12f0:	05 90       	lpm	r0, Z+
    12f2:	61 50       	subi	r22, 0x01	; 1
    12f4:	70 40       	sbci	r23, 0x00	; 0
    12f6:	01 10       	cpse	r0, r1
    12f8:	d8 f7       	brcc	.-10     	; 0x12f0 <strnlen_P+0x2>
    12fa:	80 95       	com	r24
    12fc:	90 95       	com	r25
    12fe:	8e 0f       	add	r24, r30
    1300:	9f 1f       	adc	r25, r31
    1302:	08 95       	ret

00001304 <strnlen>:
    1304:	fc 01       	movw	r30, r24
    1306:	61 50       	subi	r22, 0x01	; 1
    1308:	70 40       	sbci	r23, 0x00	; 0
    130a:	01 90       	ld	r0, Z+
    130c:	01 10       	cpse	r0, r1
    130e:	d8 f7       	brcc	.-10     	; 0x1306 <strnlen+0x2>
    1310:	80 95       	com	r24
    1312:	90 95       	com	r25
    1314:	8e 0f       	add	r24, r30
    1316:	9f 1f       	adc	r25, r31
    1318:	08 95       	ret

0000131a <fputc>:
    131a:	0f 93       	push	r16
    131c:	1f 93       	push	r17
    131e:	cf 93       	push	r28
    1320:	df 93       	push	r29
    1322:	fb 01       	movw	r30, r22
    1324:	23 81       	ldd	r18, Z+3	; 0x03
    1326:	21 fd       	sbrc	r18, 1
    1328:	03 c0       	rjmp	.+6      	; 0x1330 <fputc+0x16>
    132a:	8f ef       	ldi	r24, 0xFF	; 255
    132c:	9f ef       	ldi	r25, 0xFF	; 255
    132e:	2c c0       	rjmp	.+88     	; 0x1388 <fputc+0x6e>
    1330:	22 ff       	sbrs	r18, 2
    1332:	16 c0       	rjmp	.+44     	; 0x1360 <fputc+0x46>
    1334:	46 81       	ldd	r20, Z+6	; 0x06
    1336:	57 81       	ldd	r21, Z+7	; 0x07
    1338:	24 81       	ldd	r18, Z+4	; 0x04
    133a:	35 81       	ldd	r19, Z+5	; 0x05
    133c:	42 17       	cp	r20, r18
    133e:	53 07       	cpc	r21, r19
    1340:	44 f4       	brge	.+16     	; 0x1352 <fputc+0x38>
    1342:	a0 81       	ld	r26, Z
    1344:	b1 81       	ldd	r27, Z+1	; 0x01
    1346:	9d 01       	movw	r18, r26
    1348:	2f 5f       	subi	r18, 0xFF	; 255
    134a:	3f 4f       	sbci	r19, 0xFF	; 255
    134c:	31 83       	std	Z+1, r19	; 0x01
    134e:	20 83       	st	Z, r18
    1350:	8c 93       	st	X, r24
    1352:	26 81       	ldd	r18, Z+6	; 0x06
    1354:	37 81       	ldd	r19, Z+7	; 0x07
    1356:	2f 5f       	subi	r18, 0xFF	; 255
    1358:	3f 4f       	sbci	r19, 0xFF	; 255
    135a:	37 83       	std	Z+7, r19	; 0x07
    135c:	26 83       	std	Z+6, r18	; 0x06
    135e:	14 c0       	rjmp	.+40     	; 0x1388 <fputc+0x6e>
    1360:	8b 01       	movw	r16, r22
    1362:	ec 01       	movw	r28, r24
    1364:	fb 01       	movw	r30, r22
    1366:	00 84       	ldd	r0, Z+8	; 0x08
    1368:	f1 85       	ldd	r31, Z+9	; 0x09
    136a:	e0 2d       	mov	r30, r0
    136c:	09 95       	icall
    136e:	89 2b       	or	r24, r25
    1370:	e1 f6       	brne	.-72     	; 0x132a <fputc+0x10>
    1372:	d8 01       	movw	r26, r16
    1374:	16 96       	adiw	r26, 0x06	; 6
    1376:	8d 91       	ld	r24, X+
    1378:	9c 91       	ld	r25, X
    137a:	17 97       	sbiw	r26, 0x07	; 7
    137c:	01 96       	adiw	r24, 0x01	; 1
    137e:	17 96       	adiw	r26, 0x07	; 7
    1380:	9c 93       	st	X, r25
    1382:	8e 93       	st	-X, r24
    1384:	16 97       	sbiw	r26, 0x06	; 6
    1386:	ce 01       	movw	r24, r28
    1388:	df 91       	pop	r29
    138a:	cf 91       	pop	r28
    138c:	1f 91       	pop	r17
    138e:	0f 91       	pop	r16
    1390:	08 95       	ret

00001392 <__ultoa_invert>:
    1392:	fa 01       	movw	r30, r20
    1394:	aa 27       	eor	r26, r26
    1396:	28 30       	cpi	r18, 0x08	; 8
    1398:	51 f1       	breq	.+84     	; 0x13ee <__ultoa_invert+0x5c>
    139a:	20 31       	cpi	r18, 0x10	; 16
    139c:	81 f1       	breq	.+96     	; 0x13fe <__ultoa_invert+0x6c>
    139e:	e8 94       	clt
    13a0:	6f 93       	push	r22
    13a2:	6e 7f       	andi	r22, 0xFE	; 254
    13a4:	6e 5f       	subi	r22, 0xFE	; 254
    13a6:	7f 4f       	sbci	r23, 0xFF	; 255
    13a8:	8f 4f       	sbci	r24, 0xFF	; 255
    13aa:	9f 4f       	sbci	r25, 0xFF	; 255
    13ac:	af 4f       	sbci	r26, 0xFF	; 255
    13ae:	b1 e0       	ldi	r27, 0x01	; 1
    13b0:	3e d0       	rcall	.+124    	; 0x142e <__ultoa_invert+0x9c>
    13b2:	b4 e0       	ldi	r27, 0x04	; 4
    13b4:	3c d0       	rcall	.+120    	; 0x142e <__ultoa_invert+0x9c>
    13b6:	67 0f       	add	r22, r23
    13b8:	78 1f       	adc	r23, r24
    13ba:	89 1f       	adc	r24, r25
    13bc:	9a 1f       	adc	r25, r26
    13be:	a1 1d       	adc	r26, r1
    13c0:	68 0f       	add	r22, r24
    13c2:	79 1f       	adc	r23, r25
    13c4:	8a 1f       	adc	r24, r26
    13c6:	91 1d       	adc	r25, r1
    13c8:	a1 1d       	adc	r26, r1
    13ca:	6a 0f       	add	r22, r26
    13cc:	71 1d       	adc	r23, r1
    13ce:	81 1d       	adc	r24, r1
    13d0:	91 1d       	adc	r25, r1
    13d2:	a1 1d       	adc	r26, r1
    13d4:	20 d0       	rcall	.+64     	; 0x1416 <__ultoa_invert+0x84>
    13d6:	09 f4       	brne	.+2      	; 0x13da <__ultoa_invert+0x48>
    13d8:	68 94       	set
    13da:	3f 91       	pop	r19
    13dc:	2a e0       	ldi	r18, 0x0A	; 10
    13de:	26 9f       	mul	r18, r22
    13e0:	11 24       	eor	r1, r1
    13e2:	30 19       	sub	r19, r0
    13e4:	30 5d       	subi	r19, 0xD0	; 208
    13e6:	31 93       	st	Z+, r19
    13e8:	de f6       	brtc	.-74     	; 0x13a0 <__ultoa_invert+0xe>
    13ea:	cf 01       	movw	r24, r30
    13ec:	08 95       	ret
    13ee:	46 2f       	mov	r20, r22
    13f0:	47 70       	andi	r20, 0x07	; 7
    13f2:	40 5d       	subi	r20, 0xD0	; 208
    13f4:	41 93       	st	Z+, r20
    13f6:	b3 e0       	ldi	r27, 0x03	; 3
    13f8:	0f d0       	rcall	.+30     	; 0x1418 <__ultoa_invert+0x86>
    13fa:	c9 f7       	brne	.-14     	; 0x13ee <__ultoa_invert+0x5c>
    13fc:	f6 cf       	rjmp	.-20     	; 0x13ea <__ultoa_invert+0x58>
    13fe:	46 2f       	mov	r20, r22
    1400:	4f 70       	andi	r20, 0x0F	; 15
    1402:	40 5d       	subi	r20, 0xD0	; 208
    1404:	4a 33       	cpi	r20, 0x3A	; 58
    1406:	18 f0       	brcs	.+6      	; 0x140e <__ultoa_invert+0x7c>
    1408:	49 5d       	subi	r20, 0xD9	; 217
    140a:	31 fd       	sbrc	r19, 1
    140c:	40 52       	subi	r20, 0x20	; 32
    140e:	41 93       	st	Z+, r20
    1410:	02 d0       	rcall	.+4      	; 0x1416 <__ultoa_invert+0x84>
    1412:	a9 f7       	brne	.-22     	; 0x13fe <__ultoa_invert+0x6c>
    1414:	ea cf       	rjmp	.-44     	; 0x13ea <__ultoa_invert+0x58>
    1416:	b4 e0       	ldi	r27, 0x04	; 4
    1418:	a6 95       	lsr	r26
    141a:	97 95       	ror	r25
    141c:	87 95       	ror	r24
    141e:	77 95       	ror	r23
    1420:	67 95       	ror	r22
    1422:	ba 95       	dec	r27
    1424:	c9 f7       	brne	.-14     	; 0x1418 <__ultoa_invert+0x86>
    1426:	00 97       	sbiw	r24, 0x00	; 0
    1428:	61 05       	cpc	r22, r1
    142a:	71 05       	cpc	r23, r1
    142c:	08 95       	ret
    142e:	9b 01       	movw	r18, r22
    1430:	ac 01       	movw	r20, r24
    1432:	0a 2e       	mov	r0, r26
    1434:	06 94       	lsr	r0
    1436:	57 95       	ror	r21
    1438:	47 95       	ror	r20
    143a:	37 95       	ror	r19
    143c:	27 95       	ror	r18
    143e:	ba 95       	dec	r27
    1440:	c9 f7       	brne	.-14     	; 0x1434 <__ultoa_invert+0xa2>
    1442:	62 0f       	add	r22, r18
    1444:	73 1f       	adc	r23, r19
    1446:	84 1f       	adc	r24, r20
    1448:	95 1f       	adc	r25, r21
    144a:	a0 1d       	adc	r26, r0
    144c:	08 95       	ret

0000144e <__prologue_saves__>:
    144e:	2f 92       	push	r2
    1450:	3f 92       	push	r3
    1452:	4f 92       	push	r4
    1454:	5f 92       	push	r5
    1456:	6f 92       	push	r6
    1458:	7f 92       	push	r7
    145a:	8f 92       	push	r8
    145c:	9f 92       	push	r9
    145e:	af 92       	push	r10
    1460:	bf 92       	push	r11
    1462:	cf 92       	push	r12
    1464:	df 92       	push	r13
    1466:	ef 92       	push	r14
    1468:	ff 92       	push	r15
    146a:	0f 93       	push	r16
    146c:	1f 93       	push	r17
    146e:	cf 93       	push	r28
    1470:	df 93       	push	r29
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
    1476:	ca 1b       	sub	r28, r26
    1478:	db 0b       	sbc	r29, r27
    147a:	0f b6       	in	r0, 0x3f	; 63
    147c:	f8 94       	cli
    147e:	de bf       	out	0x3e, r29	; 62
    1480:	0f be       	out	0x3f, r0	; 63
    1482:	cd bf       	out	0x3d, r28	; 61
    1484:	09 94       	ijmp

00001486 <__epilogue_restores__>:
    1486:	2a 88       	ldd	r2, Y+18	; 0x12
    1488:	39 88       	ldd	r3, Y+17	; 0x11
    148a:	48 88       	ldd	r4, Y+16	; 0x10
    148c:	5f 84       	ldd	r5, Y+15	; 0x0f
    148e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1490:	7d 84       	ldd	r7, Y+13	; 0x0d
    1492:	8c 84       	ldd	r8, Y+12	; 0x0c
    1494:	9b 84       	ldd	r9, Y+11	; 0x0b
    1496:	aa 84       	ldd	r10, Y+10	; 0x0a
    1498:	b9 84       	ldd	r11, Y+9	; 0x09
    149a:	c8 84       	ldd	r12, Y+8	; 0x08
    149c:	df 80       	ldd	r13, Y+7	; 0x07
    149e:	ee 80       	ldd	r14, Y+6	; 0x06
    14a0:	fd 80       	ldd	r15, Y+5	; 0x05
    14a2:	0c 81       	ldd	r16, Y+4	; 0x04
    14a4:	1b 81       	ldd	r17, Y+3	; 0x03
    14a6:	aa 81       	ldd	r26, Y+2	; 0x02
    14a8:	b9 81       	ldd	r27, Y+1	; 0x01
    14aa:	ce 0f       	add	r28, r30
    14ac:	d1 1d       	adc	r29, r1
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	f8 94       	cli
    14b2:	de bf       	out	0x3e, r29	; 62
    14b4:	0f be       	out	0x3f, r0	; 63
    14b6:	cd bf       	out	0x3d, r28	; 61
    14b8:	ed 01       	movw	r28, r26
    14ba:	08 95       	ret

000014bc <_exit>:
    14bc:	f8 94       	cli

000014be <__stop_program>:
    14be:	ff cf       	rjmp	.-2      	; 0x14be <__stop_program>
